// Code generated by mockery v2.28.1. DO NOT EDIT.

package aws

import (
	context "context"

	request "github.com/aws/aws-sdk-go/aws/request"
	mock "github.com/stretchr/testify/mock"

	route53 "github.com/aws/aws-sdk-go/service/route53"
)

// MockFakeRoute53 is an autogenerated mock type for the FakeRoute53 type
type MockFakeRoute53 struct {
	mock.Mock
}

// ActivateKeySigningKey provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ActivateKeySigningKey(_a0 *route53.ActivateKeySigningKeyInput) (*route53.ActivateKeySigningKeyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ActivateKeySigningKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ActivateKeySigningKeyInput) (*route53.ActivateKeySigningKeyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ActivateKeySigningKeyInput) *route53.ActivateKeySigningKeyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ActivateKeySigningKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ActivateKeySigningKeyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActivateKeySigningKeyRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ActivateKeySigningKeyRequest(_a0 *route53.ActivateKeySigningKeyInput) (*request.Request, *route53.ActivateKeySigningKeyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ActivateKeySigningKeyOutput
	if rf, ok := ret.Get(0).(func(*route53.ActivateKeySigningKeyInput) (*request.Request, *route53.ActivateKeySigningKeyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ActivateKeySigningKeyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ActivateKeySigningKeyInput) *route53.ActivateKeySigningKeyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ActivateKeySigningKeyOutput)
		}
	}

	return r0, r1
}

// ActivateKeySigningKeyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ActivateKeySigningKeyWithContext(_a0 context.Context, _a1 *route53.ActivateKeySigningKeyInput, _a2 ...request.Option) (*route53.ActivateKeySigningKeyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ActivateKeySigningKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ActivateKeySigningKeyInput, ...request.Option) (*route53.ActivateKeySigningKeyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ActivateKeySigningKeyInput, ...request.Option) *route53.ActivateKeySigningKeyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ActivateKeySigningKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ActivateKeySigningKeyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateVPCWithHostedZone provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) AssociateVPCWithHostedZone(_a0 *route53.AssociateVPCWithHostedZoneInput) (*route53.AssociateVPCWithHostedZoneOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.AssociateVPCWithHostedZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.AssociateVPCWithHostedZoneInput) (*route53.AssociateVPCWithHostedZoneOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.AssociateVPCWithHostedZoneInput) *route53.AssociateVPCWithHostedZoneOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.AssociateVPCWithHostedZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.AssociateVPCWithHostedZoneInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateVPCWithHostedZoneRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) AssociateVPCWithHostedZoneRequest(_a0 *route53.AssociateVPCWithHostedZoneInput) (*request.Request, *route53.AssociateVPCWithHostedZoneOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.AssociateVPCWithHostedZoneOutput
	if rf, ok := ret.Get(0).(func(*route53.AssociateVPCWithHostedZoneInput) (*request.Request, *route53.AssociateVPCWithHostedZoneOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.AssociateVPCWithHostedZoneInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.AssociateVPCWithHostedZoneInput) *route53.AssociateVPCWithHostedZoneOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.AssociateVPCWithHostedZoneOutput)
		}
	}

	return r0, r1
}

// AssociateVPCWithHostedZoneWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) AssociateVPCWithHostedZoneWithContext(_a0 context.Context, _a1 *route53.AssociateVPCWithHostedZoneInput, _a2 ...request.Option) (*route53.AssociateVPCWithHostedZoneOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.AssociateVPCWithHostedZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.AssociateVPCWithHostedZoneInput, ...request.Option) (*route53.AssociateVPCWithHostedZoneOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.AssociateVPCWithHostedZoneInput, ...request.Option) *route53.AssociateVPCWithHostedZoneOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.AssociateVPCWithHostedZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.AssociateVPCWithHostedZoneInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeCidrCollection provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ChangeCidrCollection(_a0 *route53.ChangeCidrCollectionInput) (*route53.ChangeCidrCollectionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ChangeCidrCollectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ChangeCidrCollectionInput) (*route53.ChangeCidrCollectionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ChangeCidrCollectionInput) *route53.ChangeCidrCollectionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ChangeCidrCollectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ChangeCidrCollectionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeCidrCollectionRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ChangeCidrCollectionRequest(_a0 *route53.ChangeCidrCollectionInput) (*request.Request, *route53.ChangeCidrCollectionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ChangeCidrCollectionOutput
	if rf, ok := ret.Get(0).(func(*route53.ChangeCidrCollectionInput) (*request.Request, *route53.ChangeCidrCollectionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ChangeCidrCollectionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ChangeCidrCollectionInput) *route53.ChangeCidrCollectionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ChangeCidrCollectionOutput)
		}
	}

	return r0, r1
}

// ChangeCidrCollectionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ChangeCidrCollectionWithContext(_a0 context.Context, _a1 *route53.ChangeCidrCollectionInput, _a2 ...request.Option) (*route53.ChangeCidrCollectionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ChangeCidrCollectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ChangeCidrCollectionInput, ...request.Option) (*route53.ChangeCidrCollectionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ChangeCidrCollectionInput, ...request.Option) *route53.ChangeCidrCollectionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ChangeCidrCollectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ChangeCidrCollectionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeResourceRecordSets provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ChangeResourceRecordSets(_a0 *route53.ChangeResourceRecordSetsInput) (*route53.ChangeResourceRecordSetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ChangeResourceRecordSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ChangeResourceRecordSetsInput) (*route53.ChangeResourceRecordSetsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ChangeResourceRecordSetsInput) *route53.ChangeResourceRecordSetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ChangeResourceRecordSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ChangeResourceRecordSetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeResourceRecordSetsRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ChangeResourceRecordSetsRequest(_a0 *route53.ChangeResourceRecordSetsInput) (*request.Request, *route53.ChangeResourceRecordSetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ChangeResourceRecordSetsOutput
	if rf, ok := ret.Get(0).(func(*route53.ChangeResourceRecordSetsInput) (*request.Request, *route53.ChangeResourceRecordSetsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ChangeResourceRecordSetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ChangeResourceRecordSetsInput) *route53.ChangeResourceRecordSetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ChangeResourceRecordSetsOutput)
		}
	}

	return r0, r1
}

// ChangeResourceRecordSetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ChangeResourceRecordSetsWithContext(_a0 context.Context, _a1 *route53.ChangeResourceRecordSetsInput, _a2 ...request.Option) (*route53.ChangeResourceRecordSetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ChangeResourceRecordSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ChangeResourceRecordSetsInput, ...request.Option) (*route53.ChangeResourceRecordSetsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ChangeResourceRecordSetsInput, ...request.Option) *route53.ChangeResourceRecordSetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ChangeResourceRecordSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ChangeResourceRecordSetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeTagsForResource provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ChangeTagsForResource(_a0 *route53.ChangeTagsForResourceInput) (*route53.ChangeTagsForResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ChangeTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ChangeTagsForResourceInput) (*route53.ChangeTagsForResourceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ChangeTagsForResourceInput) *route53.ChangeTagsForResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ChangeTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ChangeTagsForResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeTagsForResourceRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ChangeTagsForResourceRequest(_a0 *route53.ChangeTagsForResourceInput) (*request.Request, *route53.ChangeTagsForResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ChangeTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(*route53.ChangeTagsForResourceInput) (*request.Request, *route53.ChangeTagsForResourceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ChangeTagsForResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ChangeTagsForResourceInput) *route53.ChangeTagsForResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ChangeTagsForResourceOutput)
		}
	}

	return r0, r1
}

// ChangeTagsForResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ChangeTagsForResourceWithContext(_a0 context.Context, _a1 *route53.ChangeTagsForResourceInput, _a2 ...request.Option) (*route53.ChangeTagsForResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ChangeTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ChangeTagsForResourceInput, ...request.Option) (*route53.ChangeTagsForResourceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ChangeTagsForResourceInput, ...request.Option) *route53.ChangeTagsForResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ChangeTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ChangeTagsForResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCidrCollection provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) CreateCidrCollection(_a0 *route53.CreateCidrCollectionInput) (*route53.CreateCidrCollectionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.CreateCidrCollectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.CreateCidrCollectionInput) (*route53.CreateCidrCollectionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.CreateCidrCollectionInput) *route53.CreateCidrCollectionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateCidrCollectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.CreateCidrCollectionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCidrCollectionRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) CreateCidrCollectionRequest(_a0 *route53.CreateCidrCollectionInput) (*request.Request, *route53.CreateCidrCollectionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.CreateCidrCollectionOutput
	if rf, ok := ret.Get(0).(func(*route53.CreateCidrCollectionInput) (*request.Request, *route53.CreateCidrCollectionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.CreateCidrCollectionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.CreateCidrCollectionInput) *route53.CreateCidrCollectionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.CreateCidrCollectionOutput)
		}
	}

	return r0, r1
}

// CreateCidrCollectionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) CreateCidrCollectionWithContext(_a0 context.Context, _a1 *route53.CreateCidrCollectionInput, _a2 ...request.Option) (*route53.CreateCidrCollectionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.CreateCidrCollectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateCidrCollectionInput, ...request.Option) (*route53.CreateCidrCollectionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateCidrCollectionInput, ...request.Option) *route53.CreateCidrCollectionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateCidrCollectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.CreateCidrCollectionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHealthCheck provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) CreateHealthCheck(_a0 *route53.CreateHealthCheckInput) (*route53.CreateHealthCheckOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.CreateHealthCheckOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.CreateHealthCheckInput) (*route53.CreateHealthCheckOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.CreateHealthCheckInput) *route53.CreateHealthCheckOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateHealthCheckOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.CreateHealthCheckInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHealthCheckRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) CreateHealthCheckRequest(_a0 *route53.CreateHealthCheckInput) (*request.Request, *route53.CreateHealthCheckOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.CreateHealthCheckOutput
	if rf, ok := ret.Get(0).(func(*route53.CreateHealthCheckInput) (*request.Request, *route53.CreateHealthCheckOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.CreateHealthCheckInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.CreateHealthCheckInput) *route53.CreateHealthCheckOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.CreateHealthCheckOutput)
		}
	}

	return r0, r1
}

// CreateHealthCheckWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) CreateHealthCheckWithContext(_a0 context.Context, _a1 *route53.CreateHealthCheckInput, _a2 ...request.Option) (*route53.CreateHealthCheckOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.CreateHealthCheckOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateHealthCheckInput, ...request.Option) (*route53.CreateHealthCheckOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateHealthCheckInput, ...request.Option) *route53.CreateHealthCheckOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateHealthCheckOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.CreateHealthCheckInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHostedZone provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) CreateHostedZone(_a0 *route53.CreateHostedZoneInput) (*route53.CreateHostedZoneOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.CreateHostedZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.CreateHostedZoneInput) (*route53.CreateHostedZoneOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.CreateHostedZoneInput) *route53.CreateHostedZoneOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateHostedZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.CreateHostedZoneInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHostedZoneRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) CreateHostedZoneRequest(_a0 *route53.CreateHostedZoneInput) (*request.Request, *route53.CreateHostedZoneOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.CreateHostedZoneOutput
	if rf, ok := ret.Get(0).(func(*route53.CreateHostedZoneInput) (*request.Request, *route53.CreateHostedZoneOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.CreateHostedZoneInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.CreateHostedZoneInput) *route53.CreateHostedZoneOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.CreateHostedZoneOutput)
		}
	}

	return r0, r1
}

// CreateHostedZoneWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) CreateHostedZoneWithContext(_a0 context.Context, _a1 *route53.CreateHostedZoneInput, _a2 ...request.Option) (*route53.CreateHostedZoneOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.CreateHostedZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateHostedZoneInput, ...request.Option) (*route53.CreateHostedZoneOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateHostedZoneInput, ...request.Option) *route53.CreateHostedZoneOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateHostedZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.CreateHostedZoneInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateKeySigningKey provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) CreateKeySigningKey(_a0 *route53.CreateKeySigningKeyInput) (*route53.CreateKeySigningKeyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.CreateKeySigningKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.CreateKeySigningKeyInput) (*route53.CreateKeySigningKeyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.CreateKeySigningKeyInput) *route53.CreateKeySigningKeyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateKeySigningKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.CreateKeySigningKeyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateKeySigningKeyRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) CreateKeySigningKeyRequest(_a0 *route53.CreateKeySigningKeyInput) (*request.Request, *route53.CreateKeySigningKeyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.CreateKeySigningKeyOutput
	if rf, ok := ret.Get(0).(func(*route53.CreateKeySigningKeyInput) (*request.Request, *route53.CreateKeySigningKeyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.CreateKeySigningKeyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.CreateKeySigningKeyInput) *route53.CreateKeySigningKeyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.CreateKeySigningKeyOutput)
		}
	}

	return r0, r1
}

// CreateKeySigningKeyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) CreateKeySigningKeyWithContext(_a0 context.Context, _a1 *route53.CreateKeySigningKeyInput, _a2 ...request.Option) (*route53.CreateKeySigningKeyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.CreateKeySigningKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateKeySigningKeyInput, ...request.Option) (*route53.CreateKeySigningKeyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateKeySigningKeyInput, ...request.Option) *route53.CreateKeySigningKeyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateKeySigningKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.CreateKeySigningKeyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateQueryLoggingConfig provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) CreateQueryLoggingConfig(_a0 *route53.CreateQueryLoggingConfigInput) (*route53.CreateQueryLoggingConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.CreateQueryLoggingConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.CreateQueryLoggingConfigInput) (*route53.CreateQueryLoggingConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.CreateQueryLoggingConfigInput) *route53.CreateQueryLoggingConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateQueryLoggingConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.CreateQueryLoggingConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateQueryLoggingConfigRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) CreateQueryLoggingConfigRequest(_a0 *route53.CreateQueryLoggingConfigInput) (*request.Request, *route53.CreateQueryLoggingConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.CreateQueryLoggingConfigOutput
	if rf, ok := ret.Get(0).(func(*route53.CreateQueryLoggingConfigInput) (*request.Request, *route53.CreateQueryLoggingConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.CreateQueryLoggingConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.CreateQueryLoggingConfigInput) *route53.CreateQueryLoggingConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.CreateQueryLoggingConfigOutput)
		}
	}

	return r0, r1
}

// CreateQueryLoggingConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) CreateQueryLoggingConfigWithContext(_a0 context.Context, _a1 *route53.CreateQueryLoggingConfigInput, _a2 ...request.Option) (*route53.CreateQueryLoggingConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.CreateQueryLoggingConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateQueryLoggingConfigInput, ...request.Option) (*route53.CreateQueryLoggingConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateQueryLoggingConfigInput, ...request.Option) *route53.CreateQueryLoggingConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateQueryLoggingConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.CreateQueryLoggingConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReusableDelegationSet provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) CreateReusableDelegationSet(_a0 *route53.CreateReusableDelegationSetInput) (*route53.CreateReusableDelegationSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.CreateReusableDelegationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.CreateReusableDelegationSetInput) (*route53.CreateReusableDelegationSetOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.CreateReusableDelegationSetInput) *route53.CreateReusableDelegationSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateReusableDelegationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.CreateReusableDelegationSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReusableDelegationSetRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) CreateReusableDelegationSetRequest(_a0 *route53.CreateReusableDelegationSetInput) (*request.Request, *route53.CreateReusableDelegationSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.CreateReusableDelegationSetOutput
	if rf, ok := ret.Get(0).(func(*route53.CreateReusableDelegationSetInput) (*request.Request, *route53.CreateReusableDelegationSetOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.CreateReusableDelegationSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.CreateReusableDelegationSetInput) *route53.CreateReusableDelegationSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.CreateReusableDelegationSetOutput)
		}
	}

	return r0, r1
}

// CreateReusableDelegationSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) CreateReusableDelegationSetWithContext(_a0 context.Context, _a1 *route53.CreateReusableDelegationSetInput, _a2 ...request.Option) (*route53.CreateReusableDelegationSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.CreateReusableDelegationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateReusableDelegationSetInput, ...request.Option) (*route53.CreateReusableDelegationSetOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateReusableDelegationSetInput, ...request.Option) *route53.CreateReusableDelegationSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateReusableDelegationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.CreateReusableDelegationSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrafficPolicy provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) CreateTrafficPolicy(_a0 *route53.CreateTrafficPolicyInput) (*route53.CreateTrafficPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.CreateTrafficPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.CreateTrafficPolicyInput) (*route53.CreateTrafficPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.CreateTrafficPolicyInput) *route53.CreateTrafficPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateTrafficPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.CreateTrafficPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrafficPolicyInstance provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) CreateTrafficPolicyInstance(_a0 *route53.CreateTrafficPolicyInstanceInput) (*route53.CreateTrafficPolicyInstanceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.CreateTrafficPolicyInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.CreateTrafficPolicyInstanceInput) (*route53.CreateTrafficPolicyInstanceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.CreateTrafficPolicyInstanceInput) *route53.CreateTrafficPolicyInstanceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateTrafficPolicyInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.CreateTrafficPolicyInstanceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrafficPolicyInstanceRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) CreateTrafficPolicyInstanceRequest(_a0 *route53.CreateTrafficPolicyInstanceInput) (*request.Request, *route53.CreateTrafficPolicyInstanceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.CreateTrafficPolicyInstanceOutput
	if rf, ok := ret.Get(0).(func(*route53.CreateTrafficPolicyInstanceInput) (*request.Request, *route53.CreateTrafficPolicyInstanceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.CreateTrafficPolicyInstanceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.CreateTrafficPolicyInstanceInput) *route53.CreateTrafficPolicyInstanceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.CreateTrafficPolicyInstanceOutput)
		}
	}

	return r0, r1
}

// CreateTrafficPolicyInstanceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) CreateTrafficPolicyInstanceWithContext(_a0 context.Context, _a1 *route53.CreateTrafficPolicyInstanceInput, _a2 ...request.Option) (*route53.CreateTrafficPolicyInstanceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.CreateTrafficPolicyInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateTrafficPolicyInstanceInput, ...request.Option) (*route53.CreateTrafficPolicyInstanceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateTrafficPolicyInstanceInput, ...request.Option) *route53.CreateTrafficPolicyInstanceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateTrafficPolicyInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.CreateTrafficPolicyInstanceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrafficPolicyRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) CreateTrafficPolicyRequest(_a0 *route53.CreateTrafficPolicyInput) (*request.Request, *route53.CreateTrafficPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.CreateTrafficPolicyOutput
	if rf, ok := ret.Get(0).(func(*route53.CreateTrafficPolicyInput) (*request.Request, *route53.CreateTrafficPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.CreateTrafficPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.CreateTrafficPolicyInput) *route53.CreateTrafficPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.CreateTrafficPolicyOutput)
		}
	}

	return r0, r1
}

// CreateTrafficPolicyVersion provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) CreateTrafficPolicyVersion(_a0 *route53.CreateTrafficPolicyVersionInput) (*route53.CreateTrafficPolicyVersionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.CreateTrafficPolicyVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.CreateTrafficPolicyVersionInput) (*route53.CreateTrafficPolicyVersionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.CreateTrafficPolicyVersionInput) *route53.CreateTrafficPolicyVersionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateTrafficPolicyVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.CreateTrafficPolicyVersionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrafficPolicyVersionRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) CreateTrafficPolicyVersionRequest(_a0 *route53.CreateTrafficPolicyVersionInput) (*request.Request, *route53.CreateTrafficPolicyVersionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.CreateTrafficPolicyVersionOutput
	if rf, ok := ret.Get(0).(func(*route53.CreateTrafficPolicyVersionInput) (*request.Request, *route53.CreateTrafficPolicyVersionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.CreateTrafficPolicyVersionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.CreateTrafficPolicyVersionInput) *route53.CreateTrafficPolicyVersionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.CreateTrafficPolicyVersionOutput)
		}
	}

	return r0, r1
}

// CreateTrafficPolicyVersionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) CreateTrafficPolicyVersionWithContext(_a0 context.Context, _a1 *route53.CreateTrafficPolicyVersionInput, _a2 ...request.Option) (*route53.CreateTrafficPolicyVersionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.CreateTrafficPolicyVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateTrafficPolicyVersionInput, ...request.Option) (*route53.CreateTrafficPolicyVersionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateTrafficPolicyVersionInput, ...request.Option) *route53.CreateTrafficPolicyVersionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateTrafficPolicyVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.CreateTrafficPolicyVersionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrafficPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) CreateTrafficPolicyWithContext(_a0 context.Context, _a1 *route53.CreateTrafficPolicyInput, _a2 ...request.Option) (*route53.CreateTrafficPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.CreateTrafficPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateTrafficPolicyInput, ...request.Option) (*route53.CreateTrafficPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateTrafficPolicyInput, ...request.Option) *route53.CreateTrafficPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateTrafficPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.CreateTrafficPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVPCAssociationAuthorization provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) CreateVPCAssociationAuthorization(_a0 *route53.CreateVPCAssociationAuthorizationInput) (*route53.CreateVPCAssociationAuthorizationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.CreateVPCAssociationAuthorizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.CreateVPCAssociationAuthorizationInput) (*route53.CreateVPCAssociationAuthorizationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.CreateVPCAssociationAuthorizationInput) *route53.CreateVPCAssociationAuthorizationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateVPCAssociationAuthorizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.CreateVPCAssociationAuthorizationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVPCAssociationAuthorizationRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) CreateVPCAssociationAuthorizationRequest(_a0 *route53.CreateVPCAssociationAuthorizationInput) (*request.Request, *route53.CreateVPCAssociationAuthorizationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.CreateVPCAssociationAuthorizationOutput
	if rf, ok := ret.Get(0).(func(*route53.CreateVPCAssociationAuthorizationInput) (*request.Request, *route53.CreateVPCAssociationAuthorizationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.CreateVPCAssociationAuthorizationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.CreateVPCAssociationAuthorizationInput) *route53.CreateVPCAssociationAuthorizationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.CreateVPCAssociationAuthorizationOutput)
		}
	}

	return r0, r1
}

// CreateVPCAssociationAuthorizationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) CreateVPCAssociationAuthorizationWithContext(_a0 context.Context, _a1 *route53.CreateVPCAssociationAuthorizationInput, _a2 ...request.Option) (*route53.CreateVPCAssociationAuthorizationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.CreateVPCAssociationAuthorizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateVPCAssociationAuthorizationInput, ...request.Option) (*route53.CreateVPCAssociationAuthorizationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateVPCAssociationAuthorizationInput, ...request.Option) *route53.CreateVPCAssociationAuthorizationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateVPCAssociationAuthorizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.CreateVPCAssociationAuthorizationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateKeySigningKey provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DeactivateKeySigningKey(_a0 *route53.DeactivateKeySigningKeyInput) (*route53.DeactivateKeySigningKeyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.DeactivateKeySigningKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.DeactivateKeySigningKeyInput) (*route53.DeactivateKeySigningKeyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DeactivateKeySigningKeyInput) *route53.DeactivateKeySigningKeyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeactivateKeySigningKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DeactivateKeySigningKeyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateKeySigningKeyRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DeactivateKeySigningKeyRequest(_a0 *route53.DeactivateKeySigningKeyInput) (*request.Request, *route53.DeactivateKeySigningKeyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.DeactivateKeySigningKeyOutput
	if rf, ok := ret.Get(0).(func(*route53.DeactivateKeySigningKeyInput) (*request.Request, *route53.DeactivateKeySigningKeyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DeactivateKeySigningKeyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DeactivateKeySigningKeyInput) *route53.DeactivateKeySigningKeyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.DeactivateKeySigningKeyOutput)
		}
	}

	return r0, r1
}

// DeactivateKeySigningKeyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) DeactivateKeySigningKeyWithContext(_a0 context.Context, _a1 *route53.DeactivateKeySigningKeyInput, _a2 ...request.Option) (*route53.DeactivateKeySigningKeyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.DeactivateKeySigningKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeactivateKeySigningKeyInput, ...request.Option) (*route53.DeactivateKeySigningKeyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeactivateKeySigningKeyInput, ...request.Option) *route53.DeactivateKeySigningKeyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeactivateKeySigningKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DeactivateKeySigningKeyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCidrCollection provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DeleteCidrCollection(_a0 *route53.DeleteCidrCollectionInput) (*route53.DeleteCidrCollectionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.DeleteCidrCollectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.DeleteCidrCollectionInput) (*route53.DeleteCidrCollectionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DeleteCidrCollectionInput) *route53.DeleteCidrCollectionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteCidrCollectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DeleteCidrCollectionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCidrCollectionRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DeleteCidrCollectionRequest(_a0 *route53.DeleteCidrCollectionInput) (*request.Request, *route53.DeleteCidrCollectionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.DeleteCidrCollectionOutput
	if rf, ok := ret.Get(0).(func(*route53.DeleteCidrCollectionInput) (*request.Request, *route53.DeleteCidrCollectionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DeleteCidrCollectionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DeleteCidrCollectionInput) *route53.DeleteCidrCollectionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.DeleteCidrCollectionOutput)
		}
	}

	return r0, r1
}

// DeleteCidrCollectionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) DeleteCidrCollectionWithContext(_a0 context.Context, _a1 *route53.DeleteCidrCollectionInput, _a2 ...request.Option) (*route53.DeleteCidrCollectionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.DeleteCidrCollectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteCidrCollectionInput, ...request.Option) (*route53.DeleteCidrCollectionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteCidrCollectionInput, ...request.Option) *route53.DeleteCidrCollectionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteCidrCollectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DeleteCidrCollectionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHealthCheck provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DeleteHealthCheck(_a0 *route53.DeleteHealthCheckInput) (*route53.DeleteHealthCheckOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.DeleteHealthCheckOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.DeleteHealthCheckInput) (*route53.DeleteHealthCheckOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DeleteHealthCheckInput) *route53.DeleteHealthCheckOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteHealthCheckOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DeleteHealthCheckInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHealthCheckRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DeleteHealthCheckRequest(_a0 *route53.DeleteHealthCheckInput) (*request.Request, *route53.DeleteHealthCheckOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.DeleteHealthCheckOutput
	if rf, ok := ret.Get(0).(func(*route53.DeleteHealthCheckInput) (*request.Request, *route53.DeleteHealthCheckOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DeleteHealthCheckInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DeleteHealthCheckInput) *route53.DeleteHealthCheckOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.DeleteHealthCheckOutput)
		}
	}

	return r0, r1
}

// DeleteHealthCheckWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) DeleteHealthCheckWithContext(_a0 context.Context, _a1 *route53.DeleteHealthCheckInput, _a2 ...request.Option) (*route53.DeleteHealthCheckOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.DeleteHealthCheckOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteHealthCheckInput, ...request.Option) (*route53.DeleteHealthCheckOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteHealthCheckInput, ...request.Option) *route53.DeleteHealthCheckOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteHealthCheckOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DeleteHealthCheckInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHostedZone provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DeleteHostedZone(_a0 *route53.DeleteHostedZoneInput) (*route53.DeleteHostedZoneOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.DeleteHostedZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.DeleteHostedZoneInput) (*route53.DeleteHostedZoneOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DeleteHostedZoneInput) *route53.DeleteHostedZoneOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteHostedZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DeleteHostedZoneInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHostedZoneRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DeleteHostedZoneRequest(_a0 *route53.DeleteHostedZoneInput) (*request.Request, *route53.DeleteHostedZoneOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.DeleteHostedZoneOutput
	if rf, ok := ret.Get(0).(func(*route53.DeleteHostedZoneInput) (*request.Request, *route53.DeleteHostedZoneOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DeleteHostedZoneInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DeleteHostedZoneInput) *route53.DeleteHostedZoneOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.DeleteHostedZoneOutput)
		}
	}

	return r0, r1
}

// DeleteHostedZoneWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) DeleteHostedZoneWithContext(_a0 context.Context, _a1 *route53.DeleteHostedZoneInput, _a2 ...request.Option) (*route53.DeleteHostedZoneOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.DeleteHostedZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteHostedZoneInput, ...request.Option) (*route53.DeleteHostedZoneOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteHostedZoneInput, ...request.Option) *route53.DeleteHostedZoneOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteHostedZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DeleteHostedZoneInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteKeySigningKey provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DeleteKeySigningKey(_a0 *route53.DeleteKeySigningKeyInput) (*route53.DeleteKeySigningKeyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.DeleteKeySigningKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.DeleteKeySigningKeyInput) (*route53.DeleteKeySigningKeyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DeleteKeySigningKeyInput) *route53.DeleteKeySigningKeyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteKeySigningKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DeleteKeySigningKeyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteKeySigningKeyRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DeleteKeySigningKeyRequest(_a0 *route53.DeleteKeySigningKeyInput) (*request.Request, *route53.DeleteKeySigningKeyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.DeleteKeySigningKeyOutput
	if rf, ok := ret.Get(0).(func(*route53.DeleteKeySigningKeyInput) (*request.Request, *route53.DeleteKeySigningKeyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DeleteKeySigningKeyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DeleteKeySigningKeyInput) *route53.DeleteKeySigningKeyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.DeleteKeySigningKeyOutput)
		}
	}

	return r0, r1
}

// DeleteKeySigningKeyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) DeleteKeySigningKeyWithContext(_a0 context.Context, _a1 *route53.DeleteKeySigningKeyInput, _a2 ...request.Option) (*route53.DeleteKeySigningKeyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.DeleteKeySigningKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteKeySigningKeyInput, ...request.Option) (*route53.DeleteKeySigningKeyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteKeySigningKeyInput, ...request.Option) *route53.DeleteKeySigningKeyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteKeySigningKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DeleteKeySigningKeyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteQueryLoggingConfig provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DeleteQueryLoggingConfig(_a0 *route53.DeleteQueryLoggingConfigInput) (*route53.DeleteQueryLoggingConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.DeleteQueryLoggingConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.DeleteQueryLoggingConfigInput) (*route53.DeleteQueryLoggingConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DeleteQueryLoggingConfigInput) *route53.DeleteQueryLoggingConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteQueryLoggingConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DeleteQueryLoggingConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteQueryLoggingConfigRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DeleteQueryLoggingConfigRequest(_a0 *route53.DeleteQueryLoggingConfigInput) (*request.Request, *route53.DeleteQueryLoggingConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.DeleteQueryLoggingConfigOutput
	if rf, ok := ret.Get(0).(func(*route53.DeleteQueryLoggingConfigInput) (*request.Request, *route53.DeleteQueryLoggingConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DeleteQueryLoggingConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DeleteQueryLoggingConfigInput) *route53.DeleteQueryLoggingConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.DeleteQueryLoggingConfigOutput)
		}
	}

	return r0, r1
}

// DeleteQueryLoggingConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) DeleteQueryLoggingConfigWithContext(_a0 context.Context, _a1 *route53.DeleteQueryLoggingConfigInput, _a2 ...request.Option) (*route53.DeleteQueryLoggingConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.DeleteQueryLoggingConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteQueryLoggingConfigInput, ...request.Option) (*route53.DeleteQueryLoggingConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteQueryLoggingConfigInput, ...request.Option) *route53.DeleteQueryLoggingConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteQueryLoggingConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DeleteQueryLoggingConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReusableDelegationSet provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DeleteReusableDelegationSet(_a0 *route53.DeleteReusableDelegationSetInput) (*route53.DeleteReusableDelegationSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.DeleteReusableDelegationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.DeleteReusableDelegationSetInput) (*route53.DeleteReusableDelegationSetOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DeleteReusableDelegationSetInput) *route53.DeleteReusableDelegationSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteReusableDelegationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DeleteReusableDelegationSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReusableDelegationSetRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DeleteReusableDelegationSetRequest(_a0 *route53.DeleteReusableDelegationSetInput) (*request.Request, *route53.DeleteReusableDelegationSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.DeleteReusableDelegationSetOutput
	if rf, ok := ret.Get(0).(func(*route53.DeleteReusableDelegationSetInput) (*request.Request, *route53.DeleteReusableDelegationSetOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DeleteReusableDelegationSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DeleteReusableDelegationSetInput) *route53.DeleteReusableDelegationSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.DeleteReusableDelegationSetOutput)
		}
	}

	return r0, r1
}

// DeleteReusableDelegationSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) DeleteReusableDelegationSetWithContext(_a0 context.Context, _a1 *route53.DeleteReusableDelegationSetInput, _a2 ...request.Option) (*route53.DeleteReusableDelegationSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.DeleteReusableDelegationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteReusableDelegationSetInput, ...request.Option) (*route53.DeleteReusableDelegationSetOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteReusableDelegationSetInput, ...request.Option) *route53.DeleteReusableDelegationSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteReusableDelegationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DeleteReusableDelegationSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrafficPolicy provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DeleteTrafficPolicy(_a0 *route53.DeleteTrafficPolicyInput) (*route53.DeleteTrafficPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.DeleteTrafficPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.DeleteTrafficPolicyInput) (*route53.DeleteTrafficPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DeleteTrafficPolicyInput) *route53.DeleteTrafficPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteTrafficPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DeleteTrafficPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrafficPolicyInstance provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DeleteTrafficPolicyInstance(_a0 *route53.DeleteTrafficPolicyInstanceInput) (*route53.DeleteTrafficPolicyInstanceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.DeleteTrafficPolicyInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.DeleteTrafficPolicyInstanceInput) (*route53.DeleteTrafficPolicyInstanceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DeleteTrafficPolicyInstanceInput) *route53.DeleteTrafficPolicyInstanceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteTrafficPolicyInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DeleteTrafficPolicyInstanceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrafficPolicyInstanceRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DeleteTrafficPolicyInstanceRequest(_a0 *route53.DeleteTrafficPolicyInstanceInput) (*request.Request, *route53.DeleteTrafficPolicyInstanceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.DeleteTrafficPolicyInstanceOutput
	if rf, ok := ret.Get(0).(func(*route53.DeleteTrafficPolicyInstanceInput) (*request.Request, *route53.DeleteTrafficPolicyInstanceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DeleteTrafficPolicyInstanceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DeleteTrafficPolicyInstanceInput) *route53.DeleteTrafficPolicyInstanceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.DeleteTrafficPolicyInstanceOutput)
		}
	}

	return r0, r1
}

// DeleteTrafficPolicyInstanceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) DeleteTrafficPolicyInstanceWithContext(_a0 context.Context, _a1 *route53.DeleteTrafficPolicyInstanceInput, _a2 ...request.Option) (*route53.DeleteTrafficPolicyInstanceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.DeleteTrafficPolicyInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteTrafficPolicyInstanceInput, ...request.Option) (*route53.DeleteTrafficPolicyInstanceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteTrafficPolicyInstanceInput, ...request.Option) *route53.DeleteTrafficPolicyInstanceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteTrafficPolicyInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DeleteTrafficPolicyInstanceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrafficPolicyRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DeleteTrafficPolicyRequest(_a0 *route53.DeleteTrafficPolicyInput) (*request.Request, *route53.DeleteTrafficPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.DeleteTrafficPolicyOutput
	if rf, ok := ret.Get(0).(func(*route53.DeleteTrafficPolicyInput) (*request.Request, *route53.DeleteTrafficPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DeleteTrafficPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DeleteTrafficPolicyInput) *route53.DeleteTrafficPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.DeleteTrafficPolicyOutput)
		}
	}

	return r0, r1
}

// DeleteTrafficPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) DeleteTrafficPolicyWithContext(_a0 context.Context, _a1 *route53.DeleteTrafficPolicyInput, _a2 ...request.Option) (*route53.DeleteTrafficPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.DeleteTrafficPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteTrafficPolicyInput, ...request.Option) (*route53.DeleteTrafficPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteTrafficPolicyInput, ...request.Option) *route53.DeleteTrafficPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteTrafficPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DeleteTrafficPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVPCAssociationAuthorization provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DeleteVPCAssociationAuthorization(_a0 *route53.DeleteVPCAssociationAuthorizationInput) (*route53.DeleteVPCAssociationAuthorizationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.DeleteVPCAssociationAuthorizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.DeleteVPCAssociationAuthorizationInput) (*route53.DeleteVPCAssociationAuthorizationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DeleteVPCAssociationAuthorizationInput) *route53.DeleteVPCAssociationAuthorizationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteVPCAssociationAuthorizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DeleteVPCAssociationAuthorizationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVPCAssociationAuthorizationRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DeleteVPCAssociationAuthorizationRequest(_a0 *route53.DeleteVPCAssociationAuthorizationInput) (*request.Request, *route53.DeleteVPCAssociationAuthorizationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.DeleteVPCAssociationAuthorizationOutput
	if rf, ok := ret.Get(0).(func(*route53.DeleteVPCAssociationAuthorizationInput) (*request.Request, *route53.DeleteVPCAssociationAuthorizationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DeleteVPCAssociationAuthorizationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DeleteVPCAssociationAuthorizationInput) *route53.DeleteVPCAssociationAuthorizationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.DeleteVPCAssociationAuthorizationOutput)
		}
	}

	return r0, r1
}

// DeleteVPCAssociationAuthorizationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) DeleteVPCAssociationAuthorizationWithContext(_a0 context.Context, _a1 *route53.DeleteVPCAssociationAuthorizationInput, _a2 ...request.Option) (*route53.DeleteVPCAssociationAuthorizationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.DeleteVPCAssociationAuthorizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteVPCAssociationAuthorizationInput, ...request.Option) (*route53.DeleteVPCAssociationAuthorizationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteVPCAssociationAuthorizationInput, ...request.Option) *route53.DeleteVPCAssociationAuthorizationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteVPCAssociationAuthorizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DeleteVPCAssociationAuthorizationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableHostedZoneDNSSEC provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DisableHostedZoneDNSSEC(_a0 *route53.DisableHostedZoneDNSSECInput) (*route53.DisableHostedZoneDNSSECOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.DisableHostedZoneDNSSECOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.DisableHostedZoneDNSSECInput) (*route53.DisableHostedZoneDNSSECOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DisableHostedZoneDNSSECInput) *route53.DisableHostedZoneDNSSECOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DisableHostedZoneDNSSECOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DisableHostedZoneDNSSECInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableHostedZoneDNSSECRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DisableHostedZoneDNSSECRequest(_a0 *route53.DisableHostedZoneDNSSECInput) (*request.Request, *route53.DisableHostedZoneDNSSECOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.DisableHostedZoneDNSSECOutput
	if rf, ok := ret.Get(0).(func(*route53.DisableHostedZoneDNSSECInput) (*request.Request, *route53.DisableHostedZoneDNSSECOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DisableHostedZoneDNSSECInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DisableHostedZoneDNSSECInput) *route53.DisableHostedZoneDNSSECOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.DisableHostedZoneDNSSECOutput)
		}
	}

	return r0, r1
}

// DisableHostedZoneDNSSECWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) DisableHostedZoneDNSSECWithContext(_a0 context.Context, _a1 *route53.DisableHostedZoneDNSSECInput, _a2 ...request.Option) (*route53.DisableHostedZoneDNSSECOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.DisableHostedZoneDNSSECOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DisableHostedZoneDNSSECInput, ...request.Option) (*route53.DisableHostedZoneDNSSECOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DisableHostedZoneDNSSECInput, ...request.Option) *route53.DisableHostedZoneDNSSECOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DisableHostedZoneDNSSECOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DisableHostedZoneDNSSECInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateVPCFromHostedZone provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DisassociateVPCFromHostedZone(_a0 *route53.DisassociateVPCFromHostedZoneInput) (*route53.DisassociateVPCFromHostedZoneOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.DisassociateVPCFromHostedZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.DisassociateVPCFromHostedZoneInput) (*route53.DisassociateVPCFromHostedZoneOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DisassociateVPCFromHostedZoneInput) *route53.DisassociateVPCFromHostedZoneOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DisassociateVPCFromHostedZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DisassociateVPCFromHostedZoneInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateVPCFromHostedZoneRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) DisassociateVPCFromHostedZoneRequest(_a0 *route53.DisassociateVPCFromHostedZoneInput) (*request.Request, *route53.DisassociateVPCFromHostedZoneOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.DisassociateVPCFromHostedZoneOutput
	if rf, ok := ret.Get(0).(func(*route53.DisassociateVPCFromHostedZoneInput) (*request.Request, *route53.DisassociateVPCFromHostedZoneOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.DisassociateVPCFromHostedZoneInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.DisassociateVPCFromHostedZoneInput) *route53.DisassociateVPCFromHostedZoneOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.DisassociateVPCFromHostedZoneOutput)
		}
	}

	return r0, r1
}

// DisassociateVPCFromHostedZoneWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) DisassociateVPCFromHostedZoneWithContext(_a0 context.Context, _a1 *route53.DisassociateVPCFromHostedZoneInput, _a2 ...request.Option) (*route53.DisassociateVPCFromHostedZoneOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.DisassociateVPCFromHostedZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DisassociateVPCFromHostedZoneInput, ...request.Option) (*route53.DisassociateVPCFromHostedZoneOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DisassociateVPCFromHostedZoneInput, ...request.Option) *route53.DisassociateVPCFromHostedZoneOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DisassociateVPCFromHostedZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DisassociateVPCFromHostedZoneInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableHostedZoneDNSSEC provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) EnableHostedZoneDNSSEC(_a0 *route53.EnableHostedZoneDNSSECInput) (*route53.EnableHostedZoneDNSSECOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.EnableHostedZoneDNSSECOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.EnableHostedZoneDNSSECInput) (*route53.EnableHostedZoneDNSSECOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.EnableHostedZoneDNSSECInput) *route53.EnableHostedZoneDNSSECOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.EnableHostedZoneDNSSECOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.EnableHostedZoneDNSSECInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableHostedZoneDNSSECRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) EnableHostedZoneDNSSECRequest(_a0 *route53.EnableHostedZoneDNSSECInput) (*request.Request, *route53.EnableHostedZoneDNSSECOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.EnableHostedZoneDNSSECOutput
	if rf, ok := ret.Get(0).(func(*route53.EnableHostedZoneDNSSECInput) (*request.Request, *route53.EnableHostedZoneDNSSECOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.EnableHostedZoneDNSSECInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.EnableHostedZoneDNSSECInput) *route53.EnableHostedZoneDNSSECOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.EnableHostedZoneDNSSECOutput)
		}
	}

	return r0, r1
}

// EnableHostedZoneDNSSECWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) EnableHostedZoneDNSSECWithContext(_a0 context.Context, _a1 *route53.EnableHostedZoneDNSSECInput, _a2 ...request.Option) (*route53.EnableHostedZoneDNSSECOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.EnableHostedZoneDNSSECOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.EnableHostedZoneDNSSECInput, ...request.Option) (*route53.EnableHostedZoneDNSSECOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.EnableHostedZoneDNSSECInput, ...request.Option) *route53.EnableHostedZoneDNSSECOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.EnableHostedZoneDNSSECOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.EnableHostedZoneDNSSECInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountLimit provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetAccountLimit(_a0 *route53.GetAccountLimitInput) (*route53.GetAccountLimitOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.GetAccountLimitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.GetAccountLimitInput) (*route53.GetAccountLimitOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetAccountLimitInput) *route53.GetAccountLimitOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetAccountLimitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetAccountLimitInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountLimitRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetAccountLimitRequest(_a0 *route53.GetAccountLimitInput) (*request.Request, *route53.GetAccountLimitOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.GetAccountLimitOutput
	if rf, ok := ret.Get(0).(func(*route53.GetAccountLimitInput) (*request.Request, *route53.GetAccountLimitOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetAccountLimitInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetAccountLimitInput) *route53.GetAccountLimitOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.GetAccountLimitOutput)
		}
	}

	return r0, r1
}

// GetAccountLimitWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) GetAccountLimitWithContext(_a0 context.Context, _a1 *route53.GetAccountLimitInput, _a2 ...request.Option) (*route53.GetAccountLimitOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.GetAccountLimitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetAccountLimitInput, ...request.Option) (*route53.GetAccountLimitOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetAccountLimitInput, ...request.Option) *route53.GetAccountLimitOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetAccountLimitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetAccountLimitInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChange provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetChange(_a0 *route53.GetChangeInput) (*route53.GetChangeOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.GetChangeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.GetChangeInput) (*route53.GetChangeOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetChangeInput) *route53.GetChangeOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetChangeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetChangeInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChangeRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetChangeRequest(_a0 *route53.GetChangeInput) (*request.Request, *route53.GetChangeOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.GetChangeOutput
	if rf, ok := ret.Get(0).(func(*route53.GetChangeInput) (*request.Request, *route53.GetChangeOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetChangeInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetChangeInput) *route53.GetChangeOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.GetChangeOutput)
		}
	}

	return r0, r1
}

// GetChangeWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) GetChangeWithContext(_a0 context.Context, _a1 *route53.GetChangeInput, _a2 ...request.Option) (*route53.GetChangeOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.GetChangeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetChangeInput, ...request.Option) (*route53.GetChangeOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetChangeInput, ...request.Option) *route53.GetChangeOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetChangeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetChangeInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCheckerIpRanges provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetCheckerIpRanges(_a0 *route53.GetCheckerIpRangesInput) (*route53.GetCheckerIpRangesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.GetCheckerIpRangesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.GetCheckerIpRangesInput) (*route53.GetCheckerIpRangesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetCheckerIpRangesInput) *route53.GetCheckerIpRangesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetCheckerIpRangesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetCheckerIpRangesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCheckerIpRangesRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetCheckerIpRangesRequest(_a0 *route53.GetCheckerIpRangesInput) (*request.Request, *route53.GetCheckerIpRangesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.GetCheckerIpRangesOutput
	if rf, ok := ret.Get(0).(func(*route53.GetCheckerIpRangesInput) (*request.Request, *route53.GetCheckerIpRangesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetCheckerIpRangesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetCheckerIpRangesInput) *route53.GetCheckerIpRangesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.GetCheckerIpRangesOutput)
		}
	}

	return r0, r1
}

// GetCheckerIpRangesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) GetCheckerIpRangesWithContext(_a0 context.Context, _a1 *route53.GetCheckerIpRangesInput, _a2 ...request.Option) (*route53.GetCheckerIpRangesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.GetCheckerIpRangesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetCheckerIpRangesInput, ...request.Option) (*route53.GetCheckerIpRangesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetCheckerIpRangesInput, ...request.Option) *route53.GetCheckerIpRangesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetCheckerIpRangesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetCheckerIpRangesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDNSSEC provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetDNSSEC(_a0 *route53.GetDNSSECInput) (*route53.GetDNSSECOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.GetDNSSECOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.GetDNSSECInput) (*route53.GetDNSSECOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetDNSSECInput) *route53.GetDNSSECOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetDNSSECOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetDNSSECInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDNSSECRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetDNSSECRequest(_a0 *route53.GetDNSSECInput) (*request.Request, *route53.GetDNSSECOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.GetDNSSECOutput
	if rf, ok := ret.Get(0).(func(*route53.GetDNSSECInput) (*request.Request, *route53.GetDNSSECOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetDNSSECInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetDNSSECInput) *route53.GetDNSSECOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.GetDNSSECOutput)
		}
	}

	return r0, r1
}

// GetDNSSECWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) GetDNSSECWithContext(_a0 context.Context, _a1 *route53.GetDNSSECInput, _a2 ...request.Option) (*route53.GetDNSSECOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.GetDNSSECOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetDNSSECInput, ...request.Option) (*route53.GetDNSSECOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetDNSSECInput, ...request.Option) *route53.GetDNSSECOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetDNSSECOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetDNSSECInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGeoLocation provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetGeoLocation(_a0 *route53.GetGeoLocationInput) (*route53.GetGeoLocationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.GetGeoLocationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.GetGeoLocationInput) (*route53.GetGeoLocationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetGeoLocationInput) *route53.GetGeoLocationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetGeoLocationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetGeoLocationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGeoLocationRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetGeoLocationRequest(_a0 *route53.GetGeoLocationInput) (*request.Request, *route53.GetGeoLocationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.GetGeoLocationOutput
	if rf, ok := ret.Get(0).(func(*route53.GetGeoLocationInput) (*request.Request, *route53.GetGeoLocationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetGeoLocationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetGeoLocationInput) *route53.GetGeoLocationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.GetGeoLocationOutput)
		}
	}

	return r0, r1
}

// GetGeoLocationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) GetGeoLocationWithContext(_a0 context.Context, _a1 *route53.GetGeoLocationInput, _a2 ...request.Option) (*route53.GetGeoLocationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.GetGeoLocationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetGeoLocationInput, ...request.Option) (*route53.GetGeoLocationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetGeoLocationInput, ...request.Option) *route53.GetGeoLocationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetGeoLocationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetGeoLocationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHealthCheck provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetHealthCheck(_a0 *route53.GetHealthCheckInput) (*route53.GetHealthCheckOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.GetHealthCheckOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.GetHealthCheckInput) (*route53.GetHealthCheckOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetHealthCheckInput) *route53.GetHealthCheckOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetHealthCheckOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetHealthCheckInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHealthCheckCount provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetHealthCheckCount(_a0 *route53.GetHealthCheckCountInput) (*route53.GetHealthCheckCountOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.GetHealthCheckCountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.GetHealthCheckCountInput) (*route53.GetHealthCheckCountOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetHealthCheckCountInput) *route53.GetHealthCheckCountOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetHealthCheckCountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetHealthCheckCountInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHealthCheckCountRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetHealthCheckCountRequest(_a0 *route53.GetHealthCheckCountInput) (*request.Request, *route53.GetHealthCheckCountOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.GetHealthCheckCountOutput
	if rf, ok := ret.Get(0).(func(*route53.GetHealthCheckCountInput) (*request.Request, *route53.GetHealthCheckCountOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetHealthCheckCountInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetHealthCheckCountInput) *route53.GetHealthCheckCountOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.GetHealthCheckCountOutput)
		}
	}

	return r0, r1
}

// GetHealthCheckCountWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) GetHealthCheckCountWithContext(_a0 context.Context, _a1 *route53.GetHealthCheckCountInput, _a2 ...request.Option) (*route53.GetHealthCheckCountOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.GetHealthCheckCountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHealthCheckCountInput, ...request.Option) (*route53.GetHealthCheckCountOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHealthCheckCountInput, ...request.Option) *route53.GetHealthCheckCountOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetHealthCheckCountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetHealthCheckCountInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHealthCheckLastFailureReason provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetHealthCheckLastFailureReason(_a0 *route53.GetHealthCheckLastFailureReasonInput) (*route53.GetHealthCheckLastFailureReasonOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.GetHealthCheckLastFailureReasonOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.GetHealthCheckLastFailureReasonInput) (*route53.GetHealthCheckLastFailureReasonOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetHealthCheckLastFailureReasonInput) *route53.GetHealthCheckLastFailureReasonOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetHealthCheckLastFailureReasonOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetHealthCheckLastFailureReasonInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHealthCheckLastFailureReasonRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetHealthCheckLastFailureReasonRequest(_a0 *route53.GetHealthCheckLastFailureReasonInput) (*request.Request, *route53.GetHealthCheckLastFailureReasonOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.GetHealthCheckLastFailureReasonOutput
	if rf, ok := ret.Get(0).(func(*route53.GetHealthCheckLastFailureReasonInput) (*request.Request, *route53.GetHealthCheckLastFailureReasonOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetHealthCheckLastFailureReasonInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetHealthCheckLastFailureReasonInput) *route53.GetHealthCheckLastFailureReasonOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.GetHealthCheckLastFailureReasonOutput)
		}
	}

	return r0, r1
}

// GetHealthCheckLastFailureReasonWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) GetHealthCheckLastFailureReasonWithContext(_a0 context.Context, _a1 *route53.GetHealthCheckLastFailureReasonInput, _a2 ...request.Option) (*route53.GetHealthCheckLastFailureReasonOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.GetHealthCheckLastFailureReasonOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHealthCheckLastFailureReasonInput, ...request.Option) (*route53.GetHealthCheckLastFailureReasonOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHealthCheckLastFailureReasonInput, ...request.Option) *route53.GetHealthCheckLastFailureReasonOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetHealthCheckLastFailureReasonOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetHealthCheckLastFailureReasonInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHealthCheckRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetHealthCheckRequest(_a0 *route53.GetHealthCheckInput) (*request.Request, *route53.GetHealthCheckOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.GetHealthCheckOutput
	if rf, ok := ret.Get(0).(func(*route53.GetHealthCheckInput) (*request.Request, *route53.GetHealthCheckOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetHealthCheckInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetHealthCheckInput) *route53.GetHealthCheckOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.GetHealthCheckOutput)
		}
	}

	return r0, r1
}

// GetHealthCheckStatus provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetHealthCheckStatus(_a0 *route53.GetHealthCheckStatusInput) (*route53.GetHealthCheckStatusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.GetHealthCheckStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.GetHealthCheckStatusInput) (*route53.GetHealthCheckStatusOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetHealthCheckStatusInput) *route53.GetHealthCheckStatusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetHealthCheckStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetHealthCheckStatusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHealthCheckStatusRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetHealthCheckStatusRequest(_a0 *route53.GetHealthCheckStatusInput) (*request.Request, *route53.GetHealthCheckStatusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.GetHealthCheckStatusOutput
	if rf, ok := ret.Get(0).(func(*route53.GetHealthCheckStatusInput) (*request.Request, *route53.GetHealthCheckStatusOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetHealthCheckStatusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetHealthCheckStatusInput) *route53.GetHealthCheckStatusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.GetHealthCheckStatusOutput)
		}
	}

	return r0, r1
}

// GetHealthCheckStatusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) GetHealthCheckStatusWithContext(_a0 context.Context, _a1 *route53.GetHealthCheckStatusInput, _a2 ...request.Option) (*route53.GetHealthCheckStatusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.GetHealthCheckStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHealthCheckStatusInput, ...request.Option) (*route53.GetHealthCheckStatusOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHealthCheckStatusInput, ...request.Option) *route53.GetHealthCheckStatusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetHealthCheckStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetHealthCheckStatusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHealthCheckWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) GetHealthCheckWithContext(_a0 context.Context, _a1 *route53.GetHealthCheckInput, _a2 ...request.Option) (*route53.GetHealthCheckOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.GetHealthCheckOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHealthCheckInput, ...request.Option) (*route53.GetHealthCheckOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHealthCheckInput, ...request.Option) *route53.GetHealthCheckOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetHealthCheckOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetHealthCheckInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostedZone provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetHostedZone(_a0 *route53.GetHostedZoneInput) (*route53.GetHostedZoneOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.GetHostedZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.GetHostedZoneInput) (*route53.GetHostedZoneOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetHostedZoneInput) *route53.GetHostedZoneOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetHostedZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetHostedZoneInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostedZoneCount provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetHostedZoneCount(_a0 *route53.GetHostedZoneCountInput) (*route53.GetHostedZoneCountOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.GetHostedZoneCountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.GetHostedZoneCountInput) (*route53.GetHostedZoneCountOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetHostedZoneCountInput) *route53.GetHostedZoneCountOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetHostedZoneCountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetHostedZoneCountInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostedZoneCountRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetHostedZoneCountRequest(_a0 *route53.GetHostedZoneCountInput) (*request.Request, *route53.GetHostedZoneCountOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.GetHostedZoneCountOutput
	if rf, ok := ret.Get(0).(func(*route53.GetHostedZoneCountInput) (*request.Request, *route53.GetHostedZoneCountOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetHostedZoneCountInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetHostedZoneCountInput) *route53.GetHostedZoneCountOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.GetHostedZoneCountOutput)
		}
	}

	return r0, r1
}

// GetHostedZoneCountWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) GetHostedZoneCountWithContext(_a0 context.Context, _a1 *route53.GetHostedZoneCountInput, _a2 ...request.Option) (*route53.GetHostedZoneCountOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.GetHostedZoneCountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHostedZoneCountInput, ...request.Option) (*route53.GetHostedZoneCountOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHostedZoneCountInput, ...request.Option) *route53.GetHostedZoneCountOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetHostedZoneCountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetHostedZoneCountInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostedZoneLimit provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetHostedZoneLimit(_a0 *route53.GetHostedZoneLimitInput) (*route53.GetHostedZoneLimitOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.GetHostedZoneLimitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.GetHostedZoneLimitInput) (*route53.GetHostedZoneLimitOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetHostedZoneLimitInput) *route53.GetHostedZoneLimitOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetHostedZoneLimitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetHostedZoneLimitInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostedZoneLimitRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetHostedZoneLimitRequest(_a0 *route53.GetHostedZoneLimitInput) (*request.Request, *route53.GetHostedZoneLimitOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.GetHostedZoneLimitOutput
	if rf, ok := ret.Get(0).(func(*route53.GetHostedZoneLimitInput) (*request.Request, *route53.GetHostedZoneLimitOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetHostedZoneLimitInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetHostedZoneLimitInput) *route53.GetHostedZoneLimitOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.GetHostedZoneLimitOutput)
		}
	}

	return r0, r1
}

// GetHostedZoneLimitWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) GetHostedZoneLimitWithContext(_a0 context.Context, _a1 *route53.GetHostedZoneLimitInput, _a2 ...request.Option) (*route53.GetHostedZoneLimitOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.GetHostedZoneLimitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHostedZoneLimitInput, ...request.Option) (*route53.GetHostedZoneLimitOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHostedZoneLimitInput, ...request.Option) *route53.GetHostedZoneLimitOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetHostedZoneLimitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetHostedZoneLimitInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostedZoneRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetHostedZoneRequest(_a0 *route53.GetHostedZoneInput) (*request.Request, *route53.GetHostedZoneOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.GetHostedZoneOutput
	if rf, ok := ret.Get(0).(func(*route53.GetHostedZoneInput) (*request.Request, *route53.GetHostedZoneOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetHostedZoneInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetHostedZoneInput) *route53.GetHostedZoneOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.GetHostedZoneOutput)
		}
	}

	return r0, r1
}

// GetHostedZoneWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) GetHostedZoneWithContext(_a0 context.Context, _a1 *route53.GetHostedZoneInput, _a2 ...request.Option) (*route53.GetHostedZoneOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.GetHostedZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHostedZoneInput, ...request.Option) (*route53.GetHostedZoneOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHostedZoneInput, ...request.Option) *route53.GetHostedZoneOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetHostedZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetHostedZoneInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryLoggingConfig provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetQueryLoggingConfig(_a0 *route53.GetQueryLoggingConfigInput) (*route53.GetQueryLoggingConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.GetQueryLoggingConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.GetQueryLoggingConfigInput) (*route53.GetQueryLoggingConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetQueryLoggingConfigInput) *route53.GetQueryLoggingConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetQueryLoggingConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetQueryLoggingConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryLoggingConfigRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetQueryLoggingConfigRequest(_a0 *route53.GetQueryLoggingConfigInput) (*request.Request, *route53.GetQueryLoggingConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.GetQueryLoggingConfigOutput
	if rf, ok := ret.Get(0).(func(*route53.GetQueryLoggingConfigInput) (*request.Request, *route53.GetQueryLoggingConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetQueryLoggingConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetQueryLoggingConfigInput) *route53.GetQueryLoggingConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.GetQueryLoggingConfigOutput)
		}
	}

	return r0, r1
}

// GetQueryLoggingConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) GetQueryLoggingConfigWithContext(_a0 context.Context, _a1 *route53.GetQueryLoggingConfigInput, _a2 ...request.Option) (*route53.GetQueryLoggingConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.GetQueryLoggingConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetQueryLoggingConfigInput, ...request.Option) (*route53.GetQueryLoggingConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetQueryLoggingConfigInput, ...request.Option) *route53.GetQueryLoggingConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetQueryLoggingConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetQueryLoggingConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReusableDelegationSet provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetReusableDelegationSet(_a0 *route53.GetReusableDelegationSetInput) (*route53.GetReusableDelegationSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.GetReusableDelegationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.GetReusableDelegationSetInput) (*route53.GetReusableDelegationSetOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetReusableDelegationSetInput) *route53.GetReusableDelegationSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetReusableDelegationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetReusableDelegationSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReusableDelegationSetLimit provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetReusableDelegationSetLimit(_a0 *route53.GetReusableDelegationSetLimitInput) (*route53.GetReusableDelegationSetLimitOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.GetReusableDelegationSetLimitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.GetReusableDelegationSetLimitInput) (*route53.GetReusableDelegationSetLimitOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetReusableDelegationSetLimitInput) *route53.GetReusableDelegationSetLimitOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetReusableDelegationSetLimitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetReusableDelegationSetLimitInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReusableDelegationSetLimitRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetReusableDelegationSetLimitRequest(_a0 *route53.GetReusableDelegationSetLimitInput) (*request.Request, *route53.GetReusableDelegationSetLimitOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.GetReusableDelegationSetLimitOutput
	if rf, ok := ret.Get(0).(func(*route53.GetReusableDelegationSetLimitInput) (*request.Request, *route53.GetReusableDelegationSetLimitOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetReusableDelegationSetLimitInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetReusableDelegationSetLimitInput) *route53.GetReusableDelegationSetLimitOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.GetReusableDelegationSetLimitOutput)
		}
	}

	return r0, r1
}

// GetReusableDelegationSetLimitWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) GetReusableDelegationSetLimitWithContext(_a0 context.Context, _a1 *route53.GetReusableDelegationSetLimitInput, _a2 ...request.Option) (*route53.GetReusableDelegationSetLimitOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.GetReusableDelegationSetLimitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetReusableDelegationSetLimitInput, ...request.Option) (*route53.GetReusableDelegationSetLimitOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetReusableDelegationSetLimitInput, ...request.Option) *route53.GetReusableDelegationSetLimitOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetReusableDelegationSetLimitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetReusableDelegationSetLimitInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReusableDelegationSetRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetReusableDelegationSetRequest(_a0 *route53.GetReusableDelegationSetInput) (*request.Request, *route53.GetReusableDelegationSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.GetReusableDelegationSetOutput
	if rf, ok := ret.Get(0).(func(*route53.GetReusableDelegationSetInput) (*request.Request, *route53.GetReusableDelegationSetOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetReusableDelegationSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetReusableDelegationSetInput) *route53.GetReusableDelegationSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.GetReusableDelegationSetOutput)
		}
	}

	return r0, r1
}

// GetReusableDelegationSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) GetReusableDelegationSetWithContext(_a0 context.Context, _a1 *route53.GetReusableDelegationSetInput, _a2 ...request.Option) (*route53.GetReusableDelegationSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.GetReusableDelegationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetReusableDelegationSetInput, ...request.Option) (*route53.GetReusableDelegationSetOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetReusableDelegationSetInput, ...request.Option) *route53.GetReusableDelegationSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetReusableDelegationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetReusableDelegationSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrafficPolicy provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetTrafficPolicy(_a0 *route53.GetTrafficPolicyInput) (*route53.GetTrafficPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.GetTrafficPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.GetTrafficPolicyInput) (*route53.GetTrafficPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetTrafficPolicyInput) *route53.GetTrafficPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetTrafficPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetTrafficPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrafficPolicyInstance provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetTrafficPolicyInstance(_a0 *route53.GetTrafficPolicyInstanceInput) (*route53.GetTrafficPolicyInstanceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.GetTrafficPolicyInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.GetTrafficPolicyInstanceInput) (*route53.GetTrafficPolicyInstanceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetTrafficPolicyInstanceInput) *route53.GetTrafficPolicyInstanceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetTrafficPolicyInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetTrafficPolicyInstanceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrafficPolicyInstanceCount provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetTrafficPolicyInstanceCount(_a0 *route53.GetTrafficPolicyInstanceCountInput) (*route53.GetTrafficPolicyInstanceCountOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.GetTrafficPolicyInstanceCountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.GetTrafficPolicyInstanceCountInput) (*route53.GetTrafficPolicyInstanceCountOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetTrafficPolicyInstanceCountInput) *route53.GetTrafficPolicyInstanceCountOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetTrafficPolicyInstanceCountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetTrafficPolicyInstanceCountInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrafficPolicyInstanceCountRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetTrafficPolicyInstanceCountRequest(_a0 *route53.GetTrafficPolicyInstanceCountInput) (*request.Request, *route53.GetTrafficPolicyInstanceCountOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.GetTrafficPolicyInstanceCountOutput
	if rf, ok := ret.Get(0).(func(*route53.GetTrafficPolicyInstanceCountInput) (*request.Request, *route53.GetTrafficPolicyInstanceCountOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetTrafficPolicyInstanceCountInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetTrafficPolicyInstanceCountInput) *route53.GetTrafficPolicyInstanceCountOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.GetTrafficPolicyInstanceCountOutput)
		}
	}

	return r0, r1
}

// GetTrafficPolicyInstanceCountWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) GetTrafficPolicyInstanceCountWithContext(_a0 context.Context, _a1 *route53.GetTrafficPolicyInstanceCountInput, _a2 ...request.Option) (*route53.GetTrafficPolicyInstanceCountOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.GetTrafficPolicyInstanceCountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetTrafficPolicyInstanceCountInput, ...request.Option) (*route53.GetTrafficPolicyInstanceCountOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetTrafficPolicyInstanceCountInput, ...request.Option) *route53.GetTrafficPolicyInstanceCountOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetTrafficPolicyInstanceCountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetTrafficPolicyInstanceCountInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrafficPolicyInstanceRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetTrafficPolicyInstanceRequest(_a0 *route53.GetTrafficPolicyInstanceInput) (*request.Request, *route53.GetTrafficPolicyInstanceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.GetTrafficPolicyInstanceOutput
	if rf, ok := ret.Get(0).(func(*route53.GetTrafficPolicyInstanceInput) (*request.Request, *route53.GetTrafficPolicyInstanceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetTrafficPolicyInstanceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetTrafficPolicyInstanceInput) *route53.GetTrafficPolicyInstanceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.GetTrafficPolicyInstanceOutput)
		}
	}

	return r0, r1
}

// GetTrafficPolicyInstanceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) GetTrafficPolicyInstanceWithContext(_a0 context.Context, _a1 *route53.GetTrafficPolicyInstanceInput, _a2 ...request.Option) (*route53.GetTrafficPolicyInstanceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.GetTrafficPolicyInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetTrafficPolicyInstanceInput, ...request.Option) (*route53.GetTrafficPolicyInstanceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetTrafficPolicyInstanceInput, ...request.Option) *route53.GetTrafficPolicyInstanceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetTrafficPolicyInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetTrafficPolicyInstanceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrafficPolicyRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) GetTrafficPolicyRequest(_a0 *route53.GetTrafficPolicyInput) (*request.Request, *route53.GetTrafficPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.GetTrafficPolicyOutput
	if rf, ok := ret.Get(0).(func(*route53.GetTrafficPolicyInput) (*request.Request, *route53.GetTrafficPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.GetTrafficPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.GetTrafficPolicyInput) *route53.GetTrafficPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.GetTrafficPolicyOutput)
		}
	}

	return r0, r1
}

// GetTrafficPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) GetTrafficPolicyWithContext(_a0 context.Context, _a1 *route53.GetTrafficPolicyInput, _a2 ...request.Option) (*route53.GetTrafficPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.GetTrafficPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetTrafficPolicyInput, ...request.Option) (*route53.GetTrafficPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetTrafficPolicyInput, ...request.Option) *route53.GetTrafficPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetTrafficPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetTrafficPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCidrBlocks provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListCidrBlocks(_a0 *route53.ListCidrBlocksInput) (*route53.ListCidrBlocksOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ListCidrBlocksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ListCidrBlocksInput) (*route53.ListCidrBlocksOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListCidrBlocksInput) *route53.ListCidrBlocksOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListCidrBlocksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListCidrBlocksInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCidrBlocksPages provides a mock function with given fields: _a0, _a1
func (_m *MockFakeRoute53) ListCidrBlocksPages(_a0 *route53.ListCidrBlocksInput, _a1 func(*route53.ListCidrBlocksOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*route53.ListCidrBlocksInput, func(*route53.ListCidrBlocksOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCidrBlocksPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockFakeRoute53) ListCidrBlocksPagesWithContext(_a0 context.Context, _a1 *route53.ListCidrBlocksInput, _a2 func(*route53.ListCidrBlocksOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListCidrBlocksInput, func(*route53.ListCidrBlocksOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCidrBlocksRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListCidrBlocksRequest(_a0 *route53.ListCidrBlocksInput) (*request.Request, *route53.ListCidrBlocksOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ListCidrBlocksOutput
	if rf, ok := ret.Get(0).(func(*route53.ListCidrBlocksInput) (*request.Request, *route53.ListCidrBlocksOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListCidrBlocksInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListCidrBlocksInput) *route53.ListCidrBlocksOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ListCidrBlocksOutput)
		}
	}

	return r0, r1
}

// ListCidrBlocksWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ListCidrBlocksWithContext(_a0 context.Context, _a1 *route53.ListCidrBlocksInput, _a2 ...request.Option) (*route53.ListCidrBlocksOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ListCidrBlocksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListCidrBlocksInput, ...request.Option) (*route53.ListCidrBlocksOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListCidrBlocksInput, ...request.Option) *route53.ListCidrBlocksOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListCidrBlocksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListCidrBlocksInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCidrCollections provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListCidrCollections(_a0 *route53.ListCidrCollectionsInput) (*route53.ListCidrCollectionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ListCidrCollectionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ListCidrCollectionsInput) (*route53.ListCidrCollectionsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListCidrCollectionsInput) *route53.ListCidrCollectionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListCidrCollectionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListCidrCollectionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCidrCollectionsPages provides a mock function with given fields: _a0, _a1
func (_m *MockFakeRoute53) ListCidrCollectionsPages(_a0 *route53.ListCidrCollectionsInput, _a1 func(*route53.ListCidrCollectionsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*route53.ListCidrCollectionsInput, func(*route53.ListCidrCollectionsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCidrCollectionsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockFakeRoute53) ListCidrCollectionsPagesWithContext(_a0 context.Context, _a1 *route53.ListCidrCollectionsInput, _a2 func(*route53.ListCidrCollectionsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListCidrCollectionsInput, func(*route53.ListCidrCollectionsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCidrCollectionsRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListCidrCollectionsRequest(_a0 *route53.ListCidrCollectionsInput) (*request.Request, *route53.ListCidrCollectionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ListCidrCollectionsOutput
	if rf, ok := ret.Get(0).(func(*route53.ListCidrCollectionsInput) (*request.Request, *route53.ListCidrCollectionsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListCidrCollectionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListCidrCollectionsInput) *route53.ListCidrCollectionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ListCidrCollectionsOutput)
		}
	}

	return r0, r1
}

// ListCidrCollectionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ListCidrCollectionsWithContext(_a0 context.Context, _a1 *route53.ListCidrCollectionsInput, _a2 ...request.Option) (*route53.ListCidrCollectionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ListCidrCollectionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListCidrCollectionsInput, ...request.Option) (*route53.ListCidrCollectionsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListCidrCollectionsInput, ...request.Option) *route53.ListCidrCollectionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListCidrCollectionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListCidrCollectionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCidrLocations provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListCidrLocations(_a0 *route53.ListCidrLocationsInput) (*route53.ListCidrLocationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ListCidrLocationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ListCidrLocationsInput) (*route53.ListCidrLocationsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListCidrLocationsInput) *route53.ListCidrLocationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListCidrLocationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListCidrLocationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCidrLocationsPages provides a mock function with given fields: _a0, _a1
func (_m *MockFakeRoute53) ListCidrLocationsPages(_a0 *route53.ListCidrLocationsInput, _a1 func(*route53.ListCidrLocationsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*route53.ListCidrLocationsInput, func(*route53.ListCidrLocationsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCidrLocationsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockFakeRoute53) ListCidrLocationsPagesWithContext(_a0 context.Context, _a1 *route53.ListCidrLocationsInput, _a2 func(*route53.ListCidrLocationsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListCidrLocationsInput, func(*route53.ListCidrLocationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCidrLocationsRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListCidrLocationsRequest(_a0 *route53.ListCidrLocationsInput) (*request.Request, *route53.ListCidrLocationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ListCidrLocationsOutput
	if rf, ok := ret.Get(0).(func(*route53.ListCidrLocationsInput) (*request.Request, *route53.ListCidrLocationsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListCidrLocationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListCidrLocationsInput) *route53.ListCidrLocationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ListCidrLocationsOutput)
		}
	}

	return r0, r1
}

// ListCidrLocationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ListCidrLocationsWithContext(_a0 context.Context, _a1 *route53.ListCidrLocationsInput, _a2 ...request.Option) (*route53.ListCidrLocationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ListCidrLocationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListCidrLocationsInput, ...request.Option) (*route53.ListCidrLocationsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListCidrLocationsInput, ...request.Option) *route53.ListCidrLocationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListCidrLocationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListCidrLocationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGeoLocations provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListGeoLocations(_a0 *route53.ListGeoLocationsInput) (*route53.ListGeoLocationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ListGeoLocationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ListGeoLocationsInput) (*route53.ListGeoLocationsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListGeoLocationsInput) *route53.ListGeoLocationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListGeoLocationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListGeoLocationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGeoLocationsRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListGeoLocationsRequest(_a0 *route53.ListGeoLocationsInput) (*request.Request, *route53.ListGeoLocationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ListGeoLocationsOutput
	if rf, ok := ret.Get(0).(func(*route53.ListGeoLocationsInput) (*request.Request, *route53.ListGeoLocationsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListGeoLocationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListGeoLocationsInput) *route53.ListGeoLocationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ListGeoLocationsOutput)
		}
	}

	return r0, r1
}

// ListGeoLocationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ListGeoLocationsWithContext(_a0 context.Context, _a1 *route53.ListGeoLocationsInput, _a2 ...request.Option) (*route53.ListGeoLocationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ListGeoLocationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListGeoLocationsInput, ...request.Option) (*route53.ListGeoLocationsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListGeoLocationsInput, ...request.Option) *route53.ListGeoLocationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListGeoLocationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListGeoLocationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHealthChecks provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListHealthChecks(_a0 *route53.ListHealthChecksInput) (*route53.ListHealthChecksOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ListHealthChecksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ListHealthChecksInput) (*route53.ListHealthChecksOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListHealthChecksInput) *route53.ListHealthChecksOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListHealthChecksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListHealthChecksInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHealthChecksPages provides a mock function with given fields: _a0, _a1
func (_m *MockFakeRoute53) ListHealthChecksPages(_a0 *route53.ListHealthChecksInput, _a1 func(*route53.ListHealthChecksOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*route53.ListHealthChecksInput, func(*route53.ListHealthChecksOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListHealthChecksPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockFakeRoute53) ListHealthChecksPagesWithContext(_a0 context.Context, _a1 *route53.ListHealthChecksInput, _a2 func(*route53.ListHealthChecksOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListHealthChecksInput, func(*route53.ListHealthChecksOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListHealthChecksRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListHealthChecksRequest(_a0 *route53.ListHealthChecksInput) (*request.Request, *route53.ListHealthChecksOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ListHealthChecksOutput
	if rf, ok := ret.Get(0).(func(*route53.ListHealthChecksInput) (*request.Request, *route53.ListHealthChecksOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListHealthChecksInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListHealthChecksInput) *route53.ListHealthChecksOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ListHealthChecksOutput)
		}
	}

	return r0, r1
}

// ListHealthChecksWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ListHealthChecksWithContext(_a0 context.Context, _a1 *route53.ListHealthChecksInput, _a2 ...request.Option) (*route53.ListHealthChecksOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ListHealthChecksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListHealthChecksInput, ...request.Option) (*route53.ListHealthChecksOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListHealthChecksInput, ...request.Option) *route53.ListHealthChecksOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListHealthChecksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListHealthChecksInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHostedZones provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListHostedZones(_a0 *route53.ListHostedZonesInput) (*route53.ListHostedZonesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ListHostedZonesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ListHostedZonesInput) (*route53.ListHostedZonesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListHostedZonesInput) *route53.ListHostedZonesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListHostedZonesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListHostedZonesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHostedZonesByName provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListHostedZonesByName(_a0 *route53.ListHostedZonesByNameInput) (*route53.ListHostedZonesByNameOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ListHostedZonesByNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ListHostedZonesByNameInput) (*route53.ListHostedZonesByNameOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListHostedZonesByNameInput) *route53.ListHostedZonesByNameOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListHostedZonesByNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListHostedZonesByNameInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHostedZonesByNameRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListHostedZonesByNameRequest(_a0 *route53.ListHostedZonesByNameInput) (*request.Request, *route53.ListHostedZonesByNameOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ListHostedZonesByNameOutput
	if rf, ok := ret.Get(0).(func(*route53.ListHostedZonesByNameInput) (*request.Request, *route53.ListHostedZonesByNameOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListHostedZonesByNameInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListHostedZonesByNameInput) *route53.ListHostedZonesByNameOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ListHostedZonesByNameOutput)
		}
	}

	return r0, r1
}

// ListHostedZonesByNameWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ListHostedZonesByNameWithContext(_a0 context.Context, _a1 *route53.ListHostedZonesByNameInput, _a2 ...request.Option) (*route53.ListHostedZonesByNameOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ListHostedZonesByNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListHostedZonesByNameInput, ...request.Option) (*route53.ListHostedZonesByNameOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListHostedZonesByNameInput, ...request.Option) *route53.ListHostedZonesByNameOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListHostedZonesByNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListHostedZonesByNameInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHostedZonesByVPC provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListHostedZonesByVPC(_a0 *route53.ListHostedZonesByVPCInput) (*route53.ListHostedZonesByVPCOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ListHostedZonesByVPCOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ListHostedZonesByVPCInput) (*route53.ListHostedZonesByVPCOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListHostedZonesByVPCInput) *route53.ListHostedZonesByVPCOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListHostedZonesByVPCOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListHostedZonesByVPCInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHostedZonesByVPCRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListHostedZonesByVPCRequest(_a0 *route53.ListHostedZonesByVPCInput) (*request.Request, *route53.ListHostedZonesByVPCOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ListHostedZonesByVPCOutput
	if rf, ok := ret.Get(0).(func(*route53.ListHostedZonesByVPCInput) (*request.Request, *route53.ListHostedZonesByVPCOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListHostedZonesByVPCInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListHostedZonesByVPCInput) *route53.ListHostedZonesByVPCOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ListHostedZonesByVPCOutput)
		}
	}

	return r0, r1
}

// ListHostedZonesByVPCWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ListHostedZonesByVPCWithContext(_a0 context.Context, _a1 *route53.ListHostedZonesByVPCInput, _a2 ...request.Option) (*route53.ListHostedZonesByVPCOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ListHostedZonesByVPCOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListHostedZonesByVPCInput, ...request.Option) (*route53.ListHostedZonesByVPCOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListHostedZonesByVPCInput, ...request.Option) *route53.ListHostedZonesByVPCOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListHostedZonesByVPCOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListHostedZonesByVPCInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHostedZonesPages provides a mock function with given fields: _a0, _a1
func (_m *MockFakeRoute53) ListHostedZonesPages(_a0 *route53.ListHostedZonesInput, _a1 func(*route53.ListHostedZonesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*route53.ListHostedZonesInput, func(*route53.ListHostedZonesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListHostedZonesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockFakeRoute53) ListHostedZonesPagesWithContext(_a0 context.Context, _a1 *route53.ListHostedZonesInput, _a2 func(*route53.ListHostedZonesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListHostedZonesInput, func(*route53.ListHostedZonesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListHostedZonesRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListHostedZonesRequest(_a0 *route53.ListHostedZonesInput) (*request.Request, *route53.ListHostedZonesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ListHostedZonesOutput
	if rf, ok := ret.Get(0).(func(*route53.ListHostedZonesInput) (*request.Request, *route53.ListHostedZonesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListHostedZonesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListHostedZonesInput) *route53.ListHostedZonesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ListHostedZonesOutput)
		}
	}

	return r0, r1
}

// ListHostedZonesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ListHostedZonesWithContext(_a0 context.Context, _a1 *route53.ListHostedZonesInput, _a2 ...request.Option) (*route53.ListHostedZonesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ListHostedZonesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListHostedZonesInput, ...request.Option) (*route53.ListHostedZonesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListHostedZonesInput, ...request.Option) *route53.ListHostedZonesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListHostedZonesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListHostedZonesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListQueryLoggingConfigs provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListQueryLoggingConfigs(_a0 *route53.ListQueryLoggingConfigsInput) (*route53.ListQueryLoggingConfigsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ListQueryLoggingConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ListQueryLoggingConfigsInput) (*route53.ListQueryLoggingConfigsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListQueryLoggingConfigsInput) *route53.ListQueryLoggingConfigsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListQueryLoggingConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListQueryLoggingConfigsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListQueryLoggingConfigsPages provides a mock function with given fields: _a0, _a1
func (_m *MockFakeRoute53) ListQueryLoggingConfigsPages(_a0 *route53.ListQueryLoggingConfigsInput, _a1 func(*route53.ListQueryLoggingConfigsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*route53.ListQueryLoggingConfigsInput, func(*route53.ListQueryLoggingConfigsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListQueryLoggingConfigsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockFakeRoute53) ListQueryLoggingConfigsPagesWithContext(_a0 context.Context, _a1 *route53.ListQueryLoggingConfigsInput, _a2 func(*route53.ListQueryLoggingConfigsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListQueryLoggingConfigsInput, func(*route53.ListQueryLoggingConfigsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListQueryLoggingConfigsRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListQueryLoggingConfigsRequest(_a0 *route53.ListQueryLoggingConfigsInput) (*request.Request, *route53.ListQueryLoggingConfigsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ListQueryLoggingConfigsOutput
	if rf, ok := ret.Get(0).(func(*route53.ListQueryLoggingConfigsInput) (*request.Request, *route53.ListQueryLoggingConfigsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListQueryLoggingConfigsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListQueryLoggingConfigsInput) *route53.ListQueryLoggingConfigsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ListQueryLoggingConfigsOutput)
		}
	}

	return r0, r1
}

// ListQueryLoggingConfigsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ListQueryLoggingConfigsWithContext(_a0 context.Context, _a1 *route53.ListQueryLoggingConfigsInput, _a2 ...request.Option) (*route53.ListQueryLoggingConfigsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ListQueryLoggingConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListQueryLoggingConfigsInput, ...request.Option) (*route53.ListQueryLoggingConfigsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListQueryLoggingConfigsInput, ...request.Option) *route53.ListQueryLoggingConfigsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListQueryLoggingConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListQueryLoggingConfigsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceRecordSets provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListResourceRecordSets(_a0 *route53.ListResourceRecordSetsInput) (*route53.ListResourceRecordSetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ListResourceRecordSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ListResourceRecordSetsInput) (*route53.ListResourceRecordSetsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListResourceRecordSetsInput) *route53.ListResourceRecordSetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListResourceRecordSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListResourceRecordSetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceRecordSetsPages provides a mock function with given fields: _a0, _a1
func (_m *MockFakeRoute53) ListResourceRecordSetsPages(_a0 *route53.ListResourceRecordSetsInput, _a1 func(*route53.ListResourceRecordSetsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*route53.ListResourceRecordSetsInput, func(*route53.ListResourceRecordSetsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListResourceRecordSetsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockFakeRoute53) ListResourceRecordSetsPagesWithContext(_a0 context.Context, _a1 *route53.ListResourceRecordSetsInput, _a2 func(*route53.ListResourceRecordSetsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListResourceRecordSetsInput, func(*route53.ListResourceRecordSetsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListResourceRecordSetsRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListResourceRecordSetsRequest(_a0 *route53.ListResourceRecordSetsInput) (*request.Request, *route53.ListResourceRecordSetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ListResourceRecordSetsOutput
	if rf, ok := ret.Get(0).(func(*route53.ListResourceRecordSetsInput) (*request.Request, *route53.ListResourceRecordSetsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListResourceRecordSetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListResourceRecordSetsInput) *route53.ListResourceRecordSetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ListResourceRecordSetsOutput)
		}
	}

	return r0, r1
}

// ListResourceRecordSetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ListResourceRecordSetsWithContext(_a0 context.Context, _a1 *route53.ListResourceRecordSetsInput, _a2 ...request.Option) (*route53.ListResourceRecordSetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ListResourceRecordSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListResourceRecordSetsInput, ...request.Option) (*route53.ListResourceRecordSetsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListResourceRecordSetsInput, ...request.Option) *route53.ListResourceRecordSetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListResourceRecordSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListResourceRecordSetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReusableDelegationSets provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListReusableDelegationSets(_a0 *route53.ListReusableDelegationSetsInput) (*route53.ListReusableDelegationSetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ListReusableDelegationSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ListReusableDelegationSetsInput) (*route53.ListReusableDelegationSetsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListReusableDelegationSetsInput) *route53.ListReusableDelegationSetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListReusableDelegationSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListReusableDelegationSetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReusableDelegationSetsRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListReusableDelegationSetsRequest(_a0 *route53.ListReusableDelegationSetsInput) (*request.Request, *route53.ListReusableDelegationSetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ListReusableDelegationSetsOutput
	if rf, ok := ret.Get(0).(func(*route53.ListReusableDelegationSetsInput) (*request.Request, *route53.ListReusableDelegationSetsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListReusableDelegationSetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListReusableDelegationSetsInput) *route53.ListReusableDelegationSetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ListReusableDelegationSetsOutput)
		}
	}

	return r0, r1
}

// ListReusableDelegationSetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ListReusableDelegationSetsWithContext(_a0 context.Context, _a1 *route53.ListReusableDelegationSetsInput, _a2 ...request.Option) (*route53.ListReusableDelegationSetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ListReusableDelegationSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListReusableDelegationSetsInput, ...request.Option) (*route53.ListReusableDelegationSetsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListReusableDelegationSetsInput, ...request.Option) *route53.ListReusableDelegationSetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListReusableDelegationSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListReusableDelegationSetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListTagsForResource(_a0 *route53.ListTagsForResourceInput) (*route53.ListTagsForResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ListTagsForResourceInput) (*route53.ListTagsForResourceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListTagsForResourceInput) *route53.ListTagsForResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListTagsForResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResourceRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListTagsForResourceRequest(_a0 *route53.ListTagsForResourceInput) (*request.Request, *route53.ListTagsForResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(*route53.ListTagsForResourceInput) (*request.Request, *route53.ListTagsForResourceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListTagsForResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListTagsForResourceInput) *route53.ListTagsForResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ListTagsForResourceOutput)
		}
	}

	return r0, r1
}

// ListTagsForResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ListTagsForResourceWithContext(_a0 context.Context, _a1 *route53.ListTagsForResourceInput, _a2 ...request.Option) (*route53.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTagsForResourceInput, ...request.Option) (*route53.ListTagsForResourceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTagsForResourceInput, ...request.Option) *route53.ListTagsForResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListTagsForResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResources provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListTagsForResources(_a0 *route53.ListTagsForResourcesInput) (*route53.ListTagsForResourcesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ListTagsForResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ListTagsForResourcesInput) (*route53.ListTagsForResourcesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListTagsForResourcesInput) *route53.ListTagsForResourcesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListTagsForResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListTagsForResourcesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResourcesRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListTagsForResourcesRequest(_a0 *route53.ListTagsForResourcesInput) (*request.Request, *route53.ListTagsForResourcesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ListTagsForResourcesOutput
	if rf, ok := ret.Get(0).(func(*route53.ListTagsForResourcesInput) (*request.Request, *route53.ListTagsForResourcesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListTagsForResourcesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListTagsForResourcesInput) *route53.ListTagsForResourcesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ListTagsForResourcesOutput)
		}
	}

	return r0, r1
}

// ListTagsForResourcesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ListTagsForResourcesWithContext(_a0 context.Context, _a1 *route53.ListTagsForResourcesInput, _a2 ...request.Option) (*route53.ListTagsForResourcesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ListTagsForResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTagsForResourcesInput, ...request.Option) (*route53.ListTagsForResourcesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTagsForResourcesInput, ...request.Option) *route53.ListTagsForResourcesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListTagsForResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListTagsForResourcesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrafficPolicies provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListTrafficPolicies(_a0 *route53.ListTrafficPoliciesInput) (*route53.ListTrafficPoliciesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ListTrafficPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ListTrafficPoliciesInput) (*route53.ListTrafficPoliciesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListTrafficPoliciesInput) *route53.ListTrafficPoliciesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListTrafficPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListTrafficPoliciesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrafficPoliciesRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListTrafficPoliciesRequest(_a0 *route53.ListTrafficPoliciesInput) (*request.Request, *route53.ListTrafficPoliciesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ListTrafficPoliciesOutput
	if rf, ok := ret.Get(0).(func(*route53.ListTrafficPoliciesInput) (*request.Request, *route53.ListTrafficPoliciesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListTrafficPoliciesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListTrafficPoliciesInput) *route53.ListTrafficPoliciesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ListTrafficPoliciesOutput)
		}
	}

	return r0, r1
}

// ListTrafficPoliciesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ListTrafficPoliciesWithContext(_a0 context.Context, _a1 *route53.ListTrafficPoliciesInput, _a2 ...request.Option) (*route53.ListTrafficPoliciesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ListTrafficPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTrafficPoliciesInput, ...request.Option) (*route53.ListTrafficPoliciesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTrafficPoliciesInput, ...request.Option) *route53.ListTrafficPoliciesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListTrafficPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListTrafficPoliciesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrafficPolicyInstances provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListTrafficPolicyInstances(_a0 *route53.ListTrafficPolicyInstancesInput) (*route53.ListTrafficPolicyInstancesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ListTrafficPolicyInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ListTrafficPolicyInstancesInput) (*route53.ListTrafficPolicyInstancesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListTrafficPolicyInstancesInput) *route53.ListTrafficPolicyInstancesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListTrafficPolicyInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListTrafficPolicyInstancesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrafficPolicyInstancesByHostedZone provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListTrafficPolicyInstancesByHostedZone(_a0 *route53.ListTrafficPolicyInstancesByHostedZoneInput) (*route53.ListTrafficPolicyInstancesByHostedZoneOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ListTrafficPolicyInstancesByHostedZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ListTrafficPolicyInstancesByHostedZoneInput) (*route53.ListTrafficPolicyInstancesByHostedZoneOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListTrafficPolicyInstancesByHostedZoneInput) *route53.ListTrafficPolicyInstancesByHostedZoneOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListTrafficPolicyInstancesByHostedZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListTrafficPolicyInstancesByHostedZoneInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrafficPolicyInstancesByHostedZoneRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListTrafficPolicyInstancesByHostedZoneRequest(_a0 *route53.ListTrafficPolicyInstancesByHostedZoneInput) (*request.Request, *route53.ListTrafficPolicyInstancesByHostedZoneOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ListTrafficPolicyInstancesByHostedZoneOutput
	if rf, ok := ret.Get(0).(func(*route53.ListTrafficPolicyInstancesByHostedZoneInput) (*request.Request, *route53.ListTrafficPolicyInstancesByHostedZoneOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListTrafficPolicyInstancesByHostedZoneInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListTrafficPolicyInstancesByHostedZoneInput) *route53.ListTrafficPolicyInstancesByHostedZoneOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ListTrafficPolicyInstancesByHostedZoneOutput)
		}
	}

	return r0, r1
}

// ListTrafficPolicyInstancesByHostedZoneWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ListTrafficPolicyInstancesByHostedZoneWithContext(_a0 context.Context, _a1 *route53.ListTrafficPolicyInstancesByHostedZoneInput, _a2 ...request.Option) (*route53.ListTrafficPolicyInstancesByHostedZoneOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ListTrafficPolicyInstancesByHostedZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTrafficPolicyInstancesByHostedZoneInput, ...request.Option) (*route53.ListTrafficPolicyInstancesByHostedZoneOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTrafficPolicyInstancesByHostedZoneInput, ...request.Option) *route53.ListTrafficPolicyInstancesByHostedZoneOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListTrafficPolicyInstancesByHostedZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListTrafficPolicyInstancesByHostedZoneInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrafficPolicyInstancesByPolicy provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListTrafficPolicyInstancesByPolicy(_a0 *route53.ListTrafficPolicyInstancesByPolicyInput) (*route53.ListTrafficPolicyInstancesByPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ListTrafficPolicyInstancesByPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ListTrafficPolicyInstancesByPolicyInput) (*route53.ListTrafficPolicyInstancesByPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListTrafficPolicyInstancesByPolicyInput) *route53.ListTrafficPolicyInstancesByPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListTrafficPolicyInstancesByPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListTrafficPolicyInstancesByPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrafficPolicyInstancesByPolicyRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListTrafficPolicyInstancesByPolicyRequest(_a0 *route53.ListTrafficPolicyInstancesByPolicyInput) (*request.Request, *route53.ListTrafficPolicyInstancesByPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ListTrafficPolicyInstancesByPolicyOutput
	if rf, ok := ret.Get(0).(func(*route53.ListTrafficPolicyInstancesByPolicyInput) (*request.Request, *route53.ListTrafficPolicyInstancesByPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListTrafficPolicyInstancesByPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListTrafficPolicyInstancesByPolicyInput) *route53.ListTrafficPolicyInstancesByPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ListTrafficPolicyInstancesByPolicyOutput)
		}
	}

	return r0, r1
}

// ListTrafficPolicyInstancesByPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ListTrafficPolicyInstancesByPolicyWithContext(_a0 context.Context, _a1 *route53.ListTrafficPolicyInstancesByPolicyInput, _a2 ...request.Option) (*route53.ListTrafficPolicyInstancesByPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ListTrafficPolicyInstancesByPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTrafficPolicyInstancesByPolicyInput, ...request.Option) (*route53.ListTrafficPolicyInstancesByPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTrafficPolicyInstancesByPolicyInput, ...request.Option) *route53.ListTrafficPolicyInstancesByPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListTrafficPolicyInstancesByPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListTrafficPolicyInstancesByPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrafficPolicyInstancesRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListTrafficPolicyInstancesRequest(_a0 *route53.ListTrafficPolicyInstancesInput) (*request.Request, *route53.ListTrafficPolicyInstancesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ListTrafficPolicyInstancesOutput
	if rf, ok := ret.Get(0).(func(*route53.ListTrafficPolicyInstancesInput) (*request.Request, *route53.ListTrafficPolicyInstancesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListTrafficPolicyInstancesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListTrafficPolicyInstancesInput) *route53.ListTrafficPolicyInstancesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ListTrafficPolicyInstancesOutput)
		}
	}

	return r0, r1
}

// ListTrafficPolicyInstancesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ListTrafficPolicyInstancesWithContext(_a0 context.Context, _a1 *route53.ListTrafficPolicyInstancesInput, _a2 ...request.Option) (*route53.ListTrafficPolicyInstancesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ListTrafficPolicyInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTrafficPolicyInstancesInput, ...request.Option) (*route53.ListTrafficPolicyInstancesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTrafficPolicyInstancesInput, ...request.Option) *route53.ListTrafficPolicyInstancesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListTrafficPolicyInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListTrafficPolicyInstancesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrafficPolicyVersions provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListTrafficPolicyVersions(_a0 *route53.ListTrafficPolicyVersionsInput) (*route53.ListTrafficPolicyVersionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ListTrafficPolicyVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ListTrafficPolicyVersionsInput) (*route53.ListTrafficPolicyVersionsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListTrafficPolicyVersionsInput) *route53.ListTrafficPolicyVersionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListTrafficPolicyVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListTrafficPolicyVersionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrafficPolicyVersionsRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListTrafficPolicyVersionsRequest(_a0 *route53.ListTrafficPolicyVersionsInput) (*request.Request, *route53.ListTrafficPolicyVersionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ListTrafficPolicyVersionsOutput
	if rf, ok := ret.Get(0).(func(*route53.ListTrafficPolicyVersionsInput) (*request.Request, *route53.ListTrafficPolicyVersionsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListTrafficPolicyVersionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListTrafficPolicyVersionsInput) *route53.ListTrafficPolicyVersionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ListTrafficPolicyVersionsOutput)
		}
	}

	return r0, r1
}

// ListTrafficPolicyVersionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ListTrafficPolicyVersionsWithContext(_a0 context.Context, _a1 *route53.ListTrafficPolicyVersionsInput, _a2 ...request.Option) (*route53.ListTrafficPolicyVersionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ListTrafficPolicyVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTrafficPolicyVersionsInput, ...request.Option) (*route53.ListTrafficPolicyVersionsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTrafficPolicyVersionsInput, ...request.Option) *route53.ListTrafficPolicyVersionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListTrafficPolicyVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListTrafficPolicyVersionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVPCAssociationAuthorizations provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListVPCAssociationAuthorizations(_a0 *route53.ListVPCAssociationAuthorizationsInput) (*route53.ListVPCAssociationAuthorizationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.ListVPCAssociationAuthorizationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.ListVPCAssociationAuthorizationsInput) (*route53.ListVPCAssociationAuthorizationsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListVPCAssociationAuthorizationsInput) *route53.ListVPCAssociationAuthorizationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListVPCAssociationAuthorizationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListVPCAssociationAuthorizationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVPCAssociationAuthorizationsRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) ListVPCAssociationAuthorizationsRequest(_a0 *route53.ListVPCAssociationAuthorizationsInput) (*request.Request, *route53.ListVPCAssociationAuthorizationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.ListVPCAssociationAuthorizationsOutput
	if rf, ok := ret.Get(0).(func(*route53.ListVPCAssociationAuthorizationsInput) (*request.Request, *route53.ListVPCAssociationAuthorizationsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.ListVPCAssociationAuthorizationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.ListVPCAssociationAuthorizationsInput) *route53.ListVPCAssociationAuthorizationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.ListVPCAssociationAuthorizationsOutput)
		}
	}

	return r0, r1
}

// ListVPCAssociationAuthorizationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) ListVPCAssociationAuthorizationsWithContext(_a0 context.Context, _a1 *route53.ListVPCAssociationAuthorizationsInput, _a2 ...request.Option) (*route53.ListVPCAssociationAuthorizationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.ListVPCAssociationAuthorizationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListVPCAssociationAuthorizationsInput, ...request.Option) (*route53.ListVPCAssociationAuthorizationsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListVPCAssociationAuthorizationsInput, ...request.Option) *route53.ListVPCAssociationAuthorizationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListVPCAssociationAuthorizationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListVPCAssociationAuthorizationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestDNSAnswer provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) TestDNSAnswer(_a0 *route53.TestDNSAnswerInput) (*route53.TestDNSAnswerOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.TestDNSAnswerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.TestDNSAnswerInput) (*route53.TestDNSAnswerOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.TestDNSAnswerInput) *route53.TestDNSAnswerOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.TestDNSAnswerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.TestDNSAnswerInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestDNSAnswerRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) TestDNSAnswerRequest(_a0 *route53.TestDNSAnswerInput) (*request.Request, *route53.TestDNSAnswerOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.TestDNSAnswerOutput
	if rf, ok := ret.Get(0).(func(*route53.TestDNSAnswerInput) (*request.Request, *route53.TestDNSAnswerOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.TestDNSAnswerInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.TestDNSAnswerInput) *route53.TestDNSAnswerOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.TestDNSAnswerOutput)
		}
	}

	return r0, r1
}

// TestDNSAnswerWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) TestDNSAnswerWithContext(_a0 context.Context, _a1 *route53.TestDNSAnswerInput, _a2 ...request.Option) (*route53.TestDNSAnswerOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.TestDNSAnswerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.TestDNSAnswerInput, ...request.Option) (*route53.TestDNSAnswerOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.TestDNSAnswerInput, ...request.Option) *route53.TestDNSAnswerOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.TestDNSAnswerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.TestDNSAnswerInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHealthCheck provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) UpdateHealthCheck(_a0 *route53.UpdateHealthCheckInput) (*route53.UpdateHealthCheckOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.UpdateHealthCheckOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.UpdateHealthCheckInput) (*route53.UpdateHealthCheckOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.UpdateHealthCheckInput) *route53.UpdateHealthCheckOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.UpdateHealthCheckOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.UpdateHealthCheckInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHealthCheckRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) UpdateHealthCheckRequest(_a0 *route53.UpdateHealthCheckInput) (*request.Request, *route53.UpdateHealthCheckOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.UpdateHealthCheckOutput
	if rf, ok := ret.Get(0).(func(*route53.UpdateHealthCheckInput) (*request.Request, *route53.UpdateHealthCheckOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.UpdateHealthCheckInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.UpdateHealthCheckInput) *route53.UpdateHealthCheckOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.UpdateHealthCheckOutput)
		}
	}

	return r0, r1
}

// UpdateHealthCheckWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) UpdateHealthCheckWithContext(_a0 context.Context, _a1 *route53.UpdateHealthCheckInput, _a2 ...request.Option) (*route53.UpdateHealthCheckOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.UpdateHealthCheckOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.UpdateHealthCheckInput, ...request.Option) (*route53.UpdateHealthCheckOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.UpdateHealthCheckInput, ...request.Option) *route53.UpdateHealthCheckOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.UpdateHealthCheckOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.UpdateHealthCheckInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHostedZoneComment provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) UpdateHostedZoneComment(_a0 *route53.UpdateHostedZoneCommentInput) (*route53.UpdateHostedZoneCommentOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.UpdateHostedZoneCommentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.UpdateHostedZoneCommentInput) (*route53.UpdateHostedZoneCommentOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.UpdateHostedZoneCommentInput) *route53.UpdateHostedZoneCommentOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.UpdateHostedZoneCommentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.UpdateHostedZoneCommentInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHostedZoneCommentRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) UpdateHostedZoneCommentRequest(_a0 *route53.UpdateHostedZoneCommentInput) (*request.Request, *route53.UpdateHostedZoneCommentOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.UpdateHostedZoneCommentOutput
	if rf, ok := ret.Get(0).(func(*route53.UpdateHostedZoneCommentInput) (*request.Request, *route53.UpdateHostedZoneCommentOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.UpdateHostedZoneCommentInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.UpdateHostedZoneCommentInput) *route53.UpdateHostedZoneCommentOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.UpdateHostedZoneCommentOutput)
		}
	}

	return r0, r1
}

// UpdateHostedZoneCommentWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) UpdateHostedZoneCommentWithContext(_a0 context.Context, _a1 *route53.UpdateHostedZoneCommentInput, _a2 ...request.Option) (*route53.UpdateHostedZoneCommentOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.UpdateHostedZoneCommentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.UpdateHostedZoneCommentInput, ...request.Option) (*route53.UpdateHostedZoneCommentOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.UpdateHostedZoneCommentInput, ...request.Option) *route53.UpdateHostedZoneCommentOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.UpdateHostedZoneCommentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.UpdateHostedZoneCommentInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTrafficPolicyComment provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) UpdateTrafficPolicyComment(_a0 *route53.UpdateTrafficPolicyCommentInput) (*route53.UpdateTrafficPolicyCommentOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.UpdateTrafficPolicyCommentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.UpdateTrafficPolicyCommentInput) (*route53.UpdateTrafficPolicyCommentOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.UpdateTrafficPolicyCommentInput) *route53.UpdateTrafficPolicyCommentOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.UpdateTrafficPolicyCommentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.UpdateTrafficPolicyCommentInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTrafficPolicyCommentRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) UpdateTrafficPolicyCommentRequest(_a0 *route53.UpdateTrafficPolicyCommentInput) (*request.Request, *route53.UpdateTrafficPolicyCommentOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.UpdateTrafficPolicyCommentOutput
	if rf, ok := ret.Get(0).(func(*route53.UpdateTrafficPolicyCommentInput) (*request.Request, *route53.UpdateTrafficPolicyCommentOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.UpdateTrafficPolicyCommentInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.UpdateTrafficPolicyCommentInput) *route53.UpdateTrafficPolicyCommentOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.UpdateTrafficPolicyCommentOutput)
		}
	}

	return r0, r1
}

// UpdateTrafficPolicyCommentWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) UpdateTrafficPolicyCommentWithContext(_a0 context.Context, _a1 *route53.UpdateTrafficPolicyCommentInput, _a2 ...request.Option) (*route53.UpdateTrafficPolicyCommentOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.UpdateTrafficPolicyCommentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.UpdateTrafficPolicyCommentInput, ...request.Option) (*route53.UpdateTrafficPolicyCommentOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.UpdateTrafficPolicyCommentInput, ...request.Option) *route53.UpdateTrafficPolicyCommentOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.UpdateTrafficPolicyCommentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.UpdateTrafficPolicyCommentInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTrafficPolicyInstance provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) UpdateTrafficPolicyInstance(_a0 *route53.UpdateTrafficPolicyInstanceInput) (*route53.UpdateTrafficPolicyInstanceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *route53.UpdateTrafficPolicyInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*route53.UpdateTrafficPolicyInstanceInput) (*route53.UpdateTrafficPolicyInstanceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.UpdateTrafficPolicyInstanceInput) *route53.UpdateTrafficPolicyInstanceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.UpdateTrafficPolicyInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.UpdateTrafficPolicyInstanceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTrafficPolicyInstanceRequest provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) UpdateTrafficPolicyInstanceRequest(_a0 *route53.UpdateTrafficPolicyInstanceInput) (*request.Request, *route53.UpdateTrafficPolicyInstanceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *route53.UpdateTrafficPolicyInstanceOutput
	if rf, ok := ret.Get(0).(func(*route53.UpdateTrafficPolicyInstanceInput) (*request.Request, *route53.UpdateTrafficPolicyInstanceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*route53.UpdateTrafficPolicyInstanceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*route53.UpdateTrafficPolicyInstanceInput) *route53.UpdateTrafficPolicyInstanceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*route53.UpdateTrafficPolicyInstanceOutput)
		}
	}

	return r0, r1
}

// UpdateTrafficPolicyInstanceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) UpdateTrafficPolicyInstanceWithContext(_a0 context.Context, _a1 *route53.UpdateTrafficPolicyInstanceInput, _a2 ...request.Option) (*route53.UpdateTrafficPolicyInstanceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *route53.UpdateTrafficPolicyInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.UpdateTrafficPolicyInstanceInput, ...request.Option) (*route53.UpdateTrafficPolicyInstanceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.UpdateTrafficPolicyInstanceInput, ...request.Option) *route53.UpdateTrafficPolicyInstanceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.UpdateTrafficPolicyInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.UpdateTrafficPolicyInstanceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitUntilResourceRecordSetsChanged provides a mock function with given fields: _a0
func (_m *MockFakeRoute53) WaitUntilResourceRecordSetsChanged(_a0 *route53.GetChangeInput) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*route53.GetChangeInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilResourceRecordSetsChangedWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeRoute53) WaitUntilResourceRecordSetsChangedWithContext(_a0 context.Context, _a1 *route53.GetChangeInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetChangeInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockFakeRoute53 interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockFakeRoute53 creates a new instance of MockFakeRoute53. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockFakeRoute53(t mockConstructorTestingTNewMockFakeRoute53) *MockFakeRoute53 {
	mock := &MockFakeRoute53{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
