// Code generated by mockery v2.28.1. DO NOT EDIT.

package aws

import (
	context "context"

	apigatewayv2 "github.com/aws/aws-sdk-go/service/apigatewayv2"

	mock "github.com/stretchr/testify/mock"

	request "github.com/aws/aws-sdk-go/aws/request"
)

// MockFakeApiGatewayV2 is an autogenerated mock type for the FakeApiGatewayV2 type
type MockFakeApiGatewayV2 struct {
	mock.Mock
}

// CreateApi provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateApi(_a0 *apigatewayv2.CreateApiInput) (*apigatewayv2.CreateApiOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.CreateApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateApiInput) (*apigatewayv2.CreateApiOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateApiInput) *apigatewayv2.CreateApiOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateApiInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApiMapping provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateApiMapping(_a0 *apigatewayv2.CreateApiMappingInput) (*apigatewayv2.CreateApiMappingOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.CreateApiMappingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateApiMappingInput) (*apigatewayv2.CreateApiMappingOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateApiMappingInput) *apigatewayv2.CreateApiMappingOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateApiMappingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateApiMappingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApiMappingRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateApiMappingRequest(_a0 *apigatewayv2.CreateApiMappingInput) (*request.Request, *apigatewayv2.CreateApiMappingOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.CreateApiMappingOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateApiMappingInput) (*request.Request, *apigatewayv2.CreateApiMappingOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateApiMappingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateApiMappingInput) *apigatewayv2.CreateApiMappingOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.CreateApiMappingOutput)
		}
	}

	return r0, r1
}

// CreateApiMappingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) CreateApiMappingWithContext(_a0 context.Context, _a1 *apigatewayv2.CreateApiMappingInput, _a2 ...request.Option) (*apigatewayv2.CreateApiMappingOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.CreateApiMappingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateApiMappingInput, ...request.Option) (*apigatewayv2.CreateApiMappingOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateApiMappingInput, ...request.Option) *apigatewayv2.CreateApiMappingOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateApiMappingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateApiMappingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApiRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateApiRequest(_a0 *apigatewayv2.CreateApiInput) (*request.Request, *apigatewayv2.CreateApiOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.CreateApiOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateApiInput) (*request.Request, *apigatewayv2.CreateApiOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateApiInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateApiInput) *apigatewayv2.CreateApiOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.CreateApiOutput)
		}
	}

	return r0, r1
}

// CreateApiWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) CreateApiWithContext(_a0 context.Context, _a1 *apigatewayv2.CreateApiInput, _a2 ...request.Option) (*apigatewayv2.CreateApiOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.CreateApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateApiInput, ...request.Option) (*apigatewayv2.CreateApiOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateApiInput, ...request.Option) *apigatewayv2.CreateApiOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateApiInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAuthorizer provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateAuthorizer(_a0 *apigatewayv2.CreateAuthorizerInput) (*apigatewayv2.CreateAuthorizerOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.CreateAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateAuthorizerInput) (*apigatewayv2.CreateAuthorizerOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateAuthorizerInput) *apigatewayv2.CreateAuthorizerOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateAuthorizerInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAuthorizerRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateAuthorizerRequest(_a0 *apigatewayv2.CreateAuthorizerInput) (*request.Request, *apigatewayv2.CreateAuthorizerOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.CreateAuthorizerOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateAuthorizerInput) (*request.Request, *apigatewayv2.CreateAuthorizerOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateAuthorizerInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateAuthorizerInput) *apigatewayv2.CreateAuthorizerOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.CreateAuthorizerOutput)
		}
	}

	return r0, r1
}

// CreateAuthorizerWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) CreateAuthorizerWithContext(_a0 context.Context, _a1 *apigatewayv2.CreateAuthorizerInput, _a2 ...request.Option) (*apigatewayv2.CreateAuthorizerOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.CreateAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateAuthorizerInput, ...request.Option) (*apigatewayv2.CreateAuthorizerOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateAuthorizerInput, ...request.Option) *apigatewayv2.CreateAuthorizerOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateAuthorizerInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeployment provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateDeployment(_a0 *apigatewayv2.CreateDeploymentInput) (*apigatewayv2.CreateDeploymentOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.CreateDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateDeploymentInput) (*apigatewayv2.CreateDeploymentOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateDeploymentInput) *apigatewayv2.CreateDeploymentOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateDeploymentInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeploymentRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateDeploymentRequest(_a0 *apigatewayv2.CreateDeploymentInput) (*request.Request, *apigatewayv2.CreateDeploymentOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.CreateDeploymentOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateDeploymentInput) (*request.Request, *apigatewayv2.CreateDeploymentOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateDeploymentInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateDeploymentInput) *apigatewayv2.CreateDeploymentOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.CreateDeploymentOutput)
		}
	}

	return r0, r1
}

// CreateDeploymentWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) CreateDeploymentWithContext(_a0 context.Context, _a1 *apigatewayv2.CreateDeploymentInput, _a2 ...request.Option) (*apigatewayv2.CreateDeploymentOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.CreateDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateDeploymentInput, ...request.Option) (*apigatewayv2.CreateDeploymentOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateDeploymentInput, ...request.Option) *apigatewayv2.CreateDeploymentOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateDeploymentInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDomainName provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateDomainName(_a0 *apigatewayv2.CreateDomainNameInput) (*apigatewayv2.CreateDomainNameOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.CreateDomainNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateDomainNameInput) (*apigatewayv2.CreateDomainNameOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateDomainNameInput) *apigatewayv2.CreateDomainNameOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateDomainNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateDomainNameInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDomainNameRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateDomainNameRequest(_a0 *apigatewayv2.CreateDomainNameInput) (*request.Request, *apigatewayv2.CreateDomainNameOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.CreateDomainNameOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateDomainNameInput) (*request.Request, *apigatewayv2.CreateDomainNameOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateDomainNameInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateDomainNameInput) *apigatewayv2.CreateDomainNameOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.CreateDomainNameOutput)
		}
	}

	return r0, r1
}

// CreateDomainNameWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) CreateDomainNameWithContext(_a0 context.Context, _a1 *apigatewayv2.CreateDomainNameInput, _a2 ...request.Option) (*apigatewayv2.CreateDomainNameOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.CreateDomainNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateDomainNameInput, ...request.Option) (*apigatewayv2.CreateDomainNameOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateDomainNameInput, ...request.Option) *apigatewayv2.CreateDomainNameOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateDomainNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateDomainNameInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIntegration provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateIntegration(_a0 *apigatewayv2.CreateIntegrationInput) (*apigatewayv2.CreateIntegrationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.CreateIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateIntegrationInput) (*apigatewayv2.CreateIntegrationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateIntegrationInput) *apigatewayv2.CreateIntegrationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateIntegrationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIntegrationRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateIntegrationRequest(_a0 *apigatewayv2.CreateIntegrationInput) (*request.Request, *apigatewayv2.CreateIntegrationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.CreateIntegrationOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateIntegrationInput) (*request.Request, *apigatewayv2.CreateIntegrationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateIntegrationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateIntegrationInput) *apigatewayv2.CreateIntegrationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.CreateIntegrationOutput)
		}
	}

	return r0, r1
}

// CreateIntegrationResponse provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateIntegrationResponse(_a0 *apigatewayv2.CreateIntegrationResponseInput) (*apigatewayv2.CreateIntegrationResponseOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.CreateIntegrationResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateIntegrationResponseInput) (*apigatewayv2.CreateIntegrationResponseOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateIntegrationResponseInput) *apigatewayv2.CreateIntegrationResponseOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateIntegrationResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateIntegrationResponseInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIntegrationResponseRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateIntegrationResponseRequest(_a0 *apigatewayv2.CreateIntegrationResponseInput) (*request.Request, *apigatewayv2.CreateIntegrationResponseOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.CreateIntegrationResponseOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateIntegrationResponseInput) (*request.Request, *apigatewayv2.CreateIntegrationResponseOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateIntegrationResponseInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateIntegrationResponseInput) *apigatewayv2.CreateIntegrationResponseOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.CreateIntegrationResponseOutput)
		}
	}

	return r0, r1
}

// CreateIntegrationResponseWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) CreateIntegrationResponseWithContext(_a0 context.Context, _a1 *apigatewayv2.CreateIntegrationResponseInput, _a2 ...request.Option) (*apigatewayv2.CreateIntegrationResponseOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.CreateIntegrationResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateIntegrationResponseInput, ...request.Option) (*apigatewayv2.CreateIntegrationResponseOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateIntegrationResponseInput, ...request.Option) *apigatewayv2.CreateIntegrationResponseOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateIntegrationResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateIntegrationResponseInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIntegrationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) CreateIntegrationWithContext(_a0 context.Context, _a1 *apigatewayv2.CreateIntegrationInput, _a2 ...request.Option) (*apigatewayv2.CreateIntegrationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.CreateIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateIntegrationInput, ...request.Option) (*apigatewayv2.CreateIntegrationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateIntegrationInput, ...request.Option) *apigatewayv2.CreateIntegrationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateIntegrationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateModel provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateModel(_a0 *apigatewayv2.CreateModelInput) (*apigatewayv2.CreateModelOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.CreateModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateModelInput) (*apigatewayv2.CreateModelOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateModelInput) *apigatewayv2.CreateModelOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateModelInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateModelRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateModelRequest(_a0 *apigatewayv2.CreateModelInput) (*request.Request, *apigatewayv2.CreateModelOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.CreateModelOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateModelInput) (*request.Request, *apigatewayv2.CreateModelOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateModelInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateModelInput) *apigatewayv2.CreateModelOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.CreateModelOutput)
		}
	}

	return r0, r1
}

// CreateModelWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) CreateModelWithContext(_a0 context.Context, _a1 *apigatewayv2.CreateModelInput, _a2 ...request.Option) (*apigatewayv2.CreateModelOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.CreateModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateModelInput, ...request.Option) (*apigatewayv2.CreateModelOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateModelInput, ...request.Option) *apigatewayv2.CreateModelOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateModelInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRoute provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateRoute(_a0 *apigatewayv2.CreateRouteInput) (*apigatewayv2.CreateRouteOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.CreateRouteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateRouteInput) (*apigatewayv2.CreateRouteOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateRouteInput) *apigatewayv2.CreateRouteOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateRouteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateRouteInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRouteRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateRouteRequest(_a0 *apigatewayv2.CreateRouteInput) (*request.Request, *apigatewayv2.CreateRouteOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.CreateRouteOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateRouteInput) (*request.Request, *apigatewayv2.CreateRouteOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateRouteInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateRouteInput) *apigatewayv2.CreateRouteOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.CreateRouteOutput)
		}
	}

	return r0, r1
}

// CreateRouteResponse provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateRouteResponse(_a0 *apigatewayv2.CreateRouteResponseInput) (*apigatewayv2.CreateRouteResponseOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.CreateRouteResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateRouteResponseInput) (*apigatewayv2.CreateRouteResponseOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateRouteResponseInput) *apigatewayv2.CreateRouteResponseOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateRouteResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateRouteResponseInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRouteResponseRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateRouteResponseRequest(_a0 *apigatewayv2.CreateRouteResponseInput) (*request.Request, *apigatewayv2.CreateRouteResponseOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.CreateRouteResponseOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateRouteResponseInput) (*request.Request, *apigatewayv2.CreateRouteResponseOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateRouteResponseInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateRouteResponseInput) *apigatewayv2.CreateRouteResponseOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.CreateRouteResponseOutput)
		}
	}

	return r0, r1
}

// CreateRouteResponseWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) CreateRouteResponseWithContext(_a0 context.Context, _a1 *apigatewayv2.CreateRouteResponseInput, _a2 ...request.Option) (*apigatewayv2.CreateRouteResponseOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.CreateRouteResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateRouteResponseInput, ...request.Option) (*apigatewayv2.CreateRouteResponseOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateRouteResponseInput, ...request.Option) *apigatewayv2.CreateRouteResponseOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateRouteResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateRouteResponseInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRouteWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) CreateRouteWithContext(_a0 context.Context, _a1 *apigatewayv2.CreateRouteInput, _a2 ...request.Option) (*apigatewayv2.CreateRouteOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.CreateRouteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateRouteInput, ...request.Option) (*apigatewayv2.CreateRouteOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateRouteInput, ...request.Option) *apigatewayv2.CreateRouteOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateRouteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateRouteInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStage provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateStage(_a0 *apigatewayv2.CreateStageInput) (*apigatewayv2.CreateStageOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.CreateStageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateStageInput) (*apigatewayv2.CreateStageOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateStageInput) *apigatewayv2.CreateStageOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateStageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateStageInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStageRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateStageRequest(_a0 *apigatewayv2.CreateStageInput) (*request.Request, *apigatewayv2.CreateStageOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.CreateStageOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateStageInput) (*request.Request, *apigatewayv2.CreateStageOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateStageInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateStageInput) *apigatewayv2.CreateStageOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.CreateStageOutput)
		}
	}

	return r0, r1
}

// CreateStageWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) CreateStageWithContext(_a0 context.Context, _a1 *apigatewayv2.CreateStageInput, _a2 ...request.Option) (*apigatewayv2.CreateStageOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.CreateStageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateStageInput, ...request.Option) (*apigatewayv2.CreateStageOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateStageInput, ...request.Option) *apigatewayv2.CreateStageOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateStageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateStageInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpcLink provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateVpcLink(_a0 *apigatewayv2.CreateVpcLinkInput) (*apigatewayv2.CreateVpcLinkOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.CreateVpcLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateVpcLinkInput) (*apigatewayv2.CreateVpcLinkOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateVpcLinkInput) *apigatewayv2.CreateVpcLinkOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateVpcLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateVpcLinkInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpcLinkRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) CreateVpcLinkRequest(_a0 *apigatewayv2.CreateVpcLinkInput) (*request.Request, *apigatewayv2.CreateVpcLinkOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.CreateVpcLinkOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateVpcLinkInput) (*request.Request, *apigatewayv2.CreateVpcLinkOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.CreateVpcLinkInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.CreateVpcLinkInput) *apigatewayv2.CreateVpcLinkOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.CreateVpcLinkOutput)
		}
	}

	return r0, r1
}

// CreateVpcLinkWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) CreateVpcLinkWithContext(_a0 context.Context, _a1 *apigatewayv2.CreateVpcLinkInput, _a2 ...request.Option) (*apigatewayv2.CreateVpcLinkOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.CreateVpcLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateVpcLinkInput, ...request.Option) (*apigatewayv2.CreateVpcLinkOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateVpcLinkInput, ...request.Option) *apigatewayv2.CreateVpcLinkOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateVpcLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateVpcLinkInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessLogSettings provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteAccessLogSettings(_a0 *apigatewayv2.DeleteAccessLogSettingsInput) (*apigatewayv2.DeleteAccessLogSettingsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.DeleteAccessLogSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteAccessLogSettingsInput) (*apigatewayv2.DeleteAccessLogSettingsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteAccessLogSettingsInput) *apigatewayv2.DeleteAccessLogSettingsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteAccessLogSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteAccessLogSettingsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessLogSettingsRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteAccessLogSettingsRequest(_a0 *apigatewayv2.DeleteAccessLogSettingsInput) (*request.Request, *apigatewayv2.DeleteAccessLogSettingsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.DeleteAccessLogSettingsOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteAccessLogSettingsInput) (*request.Request, *apigatewayv2.DeleteAccessLogSettingsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteAccessLogSettingsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteAccessLogSettingsInput) *apigatewayv2.DeleteAccessLogSettingsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.DeleteAccessLogSettingsOutput)
		}
	}

	return r0, r1
}

// DeleteAccessLogSettingsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) DeleteAccessLogSettingsWithContext(_a0 context.Context, _a1 *apigatewayv2.DeleteAccessLogSettingsInput, _a2 ...request.Option) (*apigatewayv2.DeleteAccessLogSettingsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.DeleteAccessLogSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteAccessLogSettingsInput, ...request.Option) (*apigatewayv2.DeleteAccessLogSettingsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteAccessLogSettingsInput, ...request.Option) *apigatewayv2.DeleteAccessLogSettingsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteAccessLogSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteAccessLogSettingsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApi provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteApi(_a0 *apigatewayv2.DeleteApiInput) (*apigatewayv2.DeleteApiOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.DeleteApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteApiInput) (*apigatewayv2.DeleteApiOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteApiInput) *apigatewayv2.DeleteApiOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteApiInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApiMapping provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteApiMapping(_a0 *apigatewayv2.DeleteApiMappingInput) (*apigatewayv2.DeleteApiMappingOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.DeleteApiMappingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteApiMappingInput) (*apigatewayv2.DeleteApiMappingOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteApiMappingInput) *apigatewayv2.DeleteApiMappingOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteApiMappingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteApiMappingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApiMappingRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteApiMappingRequest(_a0 *apigatewayv2.DeleteApiMappingInput) (*request.Request, *apigatewayv2.DeleteApiMappingOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.DeleteApiMappingOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteApiMappingInput) (*request.Request, *apigatewayv2.DeleteApiMappingOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteApiMappingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteApiMappingInput) *apigatewayv2.DeleteApiMappingOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.DeleteApiMappingOutput)
		}
	}

	return r0, r1
}

// DeleteApiMappingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) DeleteApiMappingWithContext(_a0 context.Context, _a1 *apigatewayv2.DeleteApiMappingInput, _a2 ...request.Option) (*apigatewayv2.DeleteApiMappingOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.DeleteApiMappingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteApiMappingInput, ...request.Option) (*apigatewayv2.DeleteApiMappingOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteApiMappingInput, ...request.Option) *apigatewayv2.DeleteApiMappingOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteApiMappingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteApiMappingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApiRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteApiRequest(_a0 *apigatewayv2.DeleteApiInput) (*request.Request, *apigatewayv2.DeleteApiOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.DeleteApiOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteApiInput) (*request.Request, *apigatewayv2.DeleteApiOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteApiInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteApiInput) *apigatewayv2.DeleteApiOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.DeleteApiOutput)
		}
	}

	return r0, r1
}

// DeleteApiWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) DeleteApiWithContext(_a0 context.Context, _a1 *apigatewayv2.DeleteApiInput, _a2 ...request.Option) (*apigatewayv2.DeleteApiOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.DeleteApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteApiInput, ...request.Option) (*apigatewayv2.DeleteApiOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteApiInput, ...request.Option) *apigatewayv2.DeleteApiOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteApiInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAuthorizer provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteAuthorizer(_a0 *apigatewayv2.DeleteAuthorizerInput) (*apigatewayv2.DeleteAuthorizerOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.DeleteAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteAuthorizerInput) (*apigatewayv2.DeleteAuthorizerOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteAuthorizerInput) *apigatewayv2.DeleteAuthorizerOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteAuthorizerInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAuthorizerRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteAuthorizerRequest(_a0 *apigatewayv2.DeleteAuthorizerInput) (*request.Request, *apigatewayv2.DeleteAuthorizerOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.DeleteAuthorizerOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteAuthorizerInput) (*request.Request, *apigatewayv2.DeleteAuthorizerOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteAuthorizerInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteAuthorizerInput) *apigatewayv2.DeleteAuthorizerOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.DeleteAuthorizerOutput)
		}
	}

	return r0, r1
}

// DeleteAuthorizerWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) DeleteAuthorizerWithContext(_a0 context.Context, _a1 *apigatewayv2.DeleteAuthorizerInput, _a2 ...request.Option) (*apigatewayv2.DeleteAuthorizerOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.DeleteAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteAuthorizerInput, ...request.Option) (*apigatewayv2.DeleteAuthorizerOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteAuthorizerInput, ...request.Option) *apigatewayv2.DeleteAuthorizerOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteAuthorizerInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCorsConfiguration provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteCorsConfiguration(_a0 *apigatewayv2.DeleteCorsConfigurationInput) (*apigatewayv2.DeleteCorsConfigurationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.DeleteCorsConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteCorsConfigurationInput) (*apigatewayv2.DeleteCorsConfigurationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteCorsConfigurationInput) *apigatewayv2.DeleteCorsConfigurationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteCorsConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteCorsConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCorsConfigurationRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteCorsConfigurationRequest(_a0 *apigatewayv2.DeleteCorsConfigurationInput) (*request.Request, *apigatewayv2.DeleteCorsConfigurationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.DeleteCorsConfigurationOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteCorsConfigurationInput) (*request.Request, *apigatewayv2.DeleteCorsConfigurationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteCorsConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteCorsConfigurationInput) *apigatewayv2.DeleteCorsConfigurationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.DeleteCorsConfigurationOutput)
		}
	}

	return r0, r1
}

// DeleteCorsConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) DeleteCorsConfigurationWithContext(_a0 context.Context, _a1 *apigatewayv2.DeleteCorsConfigurationInput, _a2 ...request.Option) (*apigatewayv2.DeleteCorsConfigurationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.DeleteCorsConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteCorsConfigurationInput, ...request.Option) (*apigatewayv2.DeleteCorsConfigurationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteCorsConfigurationInput, ...request.Option) *apigatewayv2.DeleteCorsConfigurationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteCorsConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteCorsConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeployment provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteDeployment(_a0 *apigatewayv2.DeleteDeploymentInput) (*apigatewayv2.DeleteDeploymentOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.DeleteDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteDeploymentInput) (*apigatewayv2.DeleteDeploymentOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteDeploymentInput) *apigatewayv2.DeleteDeploymentOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteDeploymentInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeploymentRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteDeploymentRequest(_a0 *apigatewayv2.DeleteDeploymentInput) (*request.Request, *apigatewayv2.DeleteDeploymentOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.DeleteDeploymentOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteDeploymentInput) (*request.Request, *apigatewayv2.DeleteDeploymentOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteDeploymentInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteDeploymentInput) *apigatewayv2.DeleteDeploymentOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.DeleteDeploymentOutput)
		}
	}

	return r0, r1
}

// DeleteDeploymentWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) DeleteDeploymentWithContext(_a0 context.Context, _a1 *apigatewayv2.DeleteDeploymentInput, _a2 ...request.Option) (*apigatewayv2.DeleteDeploymentOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.DeleteDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteDeploymentInput, ...request.Option) (*apigatewayv2.DeleteDeploymentOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteDeploymentInput, ...request.Option) *apigatewayv2.DeleteDeploymentOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteDeploymentInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDomainName provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteDomainName(_a0 *apigatewayv2.DeleteDomainNameInput) (*apigatewayv2.DeleteDomainNameOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.DeleteDomainNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteDomainNameInput) (*apigatewayv2.DeleteDomainNameOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteDomainNameInput) *apigatewayv2.DeleteDomainNameOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteDomainNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteDomainNameInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDomainNameRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteDomainNameRequest(_a0 *apigatewayv2.DeleteDomainNameInput) (*request.Request, *apigatewayv2.DeleteDomainNameOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.DeleteDomainNameOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteDomainNameInput) (*request.Request, *apigatewayv2.DeleteDomainNameOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteDomainNameInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteDomainNameInput) *apigatewayv2.DeleteDomainNameOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.DeleteDomainNameOutput)
		}
	}

	return r0, r1
}

// DeleteDomainNameWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) DeleteDomainNameWithContext(_a0 context.Context, _a1 *apigatewayv2.DeleteDomainNameInput, _a2 ...request.Option) (*apigatewayv2.DeleteDomainNameOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.DeleteDomainNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteDomainNameInput, ...request.Option) (*apigatewayv2.DeleteDomainNameOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteDomainNameInput, ...request.Option) *apigatewayv2.DeleteDomainNameOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteDomainNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteDomainNameInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIntegration provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteIntegration(_a0 *apigatewayv2.DeleteIntegrationInput) (*apigatewayv2.DeleteIntegrationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.DeleteIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteIntegrationInput) (*apigatewayv2.DeleteIntegrationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteIntegrationInput) *apigatewayv2.DeleteIntegrationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteIntegrationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIntegrationRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteIntegrationRequest(_a0 *apigatewayv2.DeleteIntegrationInput) (*request.Request, *apigatewayv2.DeleteIntegrationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.DeleteIntegrationOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteIntegrationInput) (*request.Request, *apigatewayv2.DeleteIntegrationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteIntegrationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteIntegrationInput) *apigatewayv2.DeleteIntegrationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.DeleteIntegrationOutput)
		}
	}

	return r0, r1
}

// DeleteIntegrationResponse provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteIntegrationResponse(_a0 *apigatewayv2.DeleteIntegrationResponseInput) (*apigatewayv2.DeleteIntegrationResponseOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.DeleteIntegrationResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteIntegrationResponseInput) (*apigatewayv2.DeleteIntegrationResponseOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteIntegrationResponseInput) *apigatewayv2.DeleteIntegrationResponseOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteIntegrationResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteIntegrationResponseInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIntegrationResponseRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteIntegrationResponseRequest(_a0 *apigatewayv2.DeleteIntegrationResponseInput) (*request.Request, *apigatewayv2.DeleteIntegrationResponseOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.DeleteIntegrationResponseOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteIntegrationResponseInput) (*request.Request, *apigatewayv2.DeleteIntegrationResponseOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteIntegrationResponseInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteIntegrationResponseInput) *apigatewayv2.DeleteIntegrationResponseOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.DeleteIntegrationResponseOutput)
		}
	}

	return r0, r1
}

// DeleteIntegrationResponseWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) DeleteIntegrationResponseWithContext(_a0 context.Context, _a1 *apigatewayv2.DeleteIntegrationResponseInput, _a2 ...request.Option) (*apigatewayv2.DeleteIntegrationResponseOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.DeleteIntegrationResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteIntegrationResponseInput, ...request.Option) (*apigatewayv2.DeleteIntegrationResponseOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteIntegrationResponseInput, ...request.Option) *apigatewayv2.DeleteIntegrationResponseOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteIntegrationResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteIntegrationResponseInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIntegrationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) DeleteIntegrationWithContext(_a0 context.Context, _a1 *apigatewayv2.DeleteIntegrationInput, _a2 ...request.Option) (*apigatewayv2.DeleteIntegrationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.DeleteIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteIntegrationInput, ...request.Option) (*apigatewayv2.DeleteIntegrationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteIntegrationInput, ...request.Option) *apigatewayv2.DeleteIntegrationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteIntegrationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteModel provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteModel(_a0 *apigatewayv2.DeleteModelInput) (*apigatewayv2.DeleteModelOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.DeleteModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteModelInput) (*apigatewayv2.DeleteModelOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteModelInput) *apigatewayv2.DeleteModelOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteModelInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteModelRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteModelRequest(_a0 *apigatewayv2.DeleteModelInput) (*request.Request, *apigatewayv2.DeleteModelOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.DeleteModelOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteModelInput) (*request.Request, *apigatewayv2.DeleteModelOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteModelInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteModelInput) *apigatewayv2.DeleteModelOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.DeleteModelOutput)
		}
	}

	return r0, r1
}

// DeleteModelWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) DeleteModelWithContext(_a0 context.Context, _a1 *apigatewayv2.DeleteModelInput, _a2 ...request.Option) (*apigatewayv2.DeleteModelOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.DeleteModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteModelInput, ...request.Option) (*apigatewayv2.DeleteModelOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteModelInput, ...request.Option) *apigatewayv2.DeleteModelOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteModelInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRoute provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteRoute(_a0 *apigatewayv2.DeleteRouteInput) (*apigatewayv2.DeleteRouteOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.DeleteRouteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteRouteInput) (*apigatewayv2.DeleteRouteOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteRouteInput) *apigatewayv2.DeleteRouteOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteRouteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteRouteInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRouteRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteRouteRequest(_a0 *apigatewayv2.DeleteRouteInput) (*request.Request, *apigatewayv2.DeleteRouteOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.DeleteRouteOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteRouteInput) (*request.Request, *apigatewayv2.DeleteRouteOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteRouteInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteRouteInput) *apigatewayv2.DeleteRouteOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.DeleteRouteOutput)
		}
	}

	return r0, r1
}

// DeleteRouteRequestParameter provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteRouteRequestParameter(_a0 *apigatewayv2.DeleteRouteRequestParameterInput) (*apigatewayv2.DeleteRouteRequestParameterOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.DeleteRouteRequestParameterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteRouteRequestParameterInput) (*apigatewayv2.DeleteRouteRequestParameterOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteRouteRequestParameterInput) *apigatewayv2.DeleteRouteRequestParameterOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteRouteRequestParameterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteRouteRequestParameterInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRouteRequestParameterRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteRouteRequestParameterRequest(_a0 *apigatewayv2.DeleteRouteRequestParameterInput) (*request.Request, *apigatewayv2.DeleteRouteRequestParameterOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.DeleteRouteRequestParameterOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteRouteRequestParameterInput) (*request.Request, *apigatewayv2.DeleteRouteRequestParameterOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteRouteRequestParameterInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteRouteRequestParameterInput) *apigatewayv2.DeleteRouteRequestParameterOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.DeleteRouteRequestParameterOutput)
		}
	}

	return r0, r1
}

// DeleteRouteRequestParameterWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) DeleteRouteRequestParameterWithContext(_a0 context.Context, _a1 *apigatewayv2.DeleteRouteRequestParameterInput, _a2 ...request.Option) (*apigatewayv2.DeleteRouteRequestParameterOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.DeleteRouteRequestParameterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteRouteRequestParameterInput, ...request.Option) (*apigatewayv2.DeleteRouteRequestParameterOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteRouteRequestParameterInput, ...request.Option) *apigatewayv2.DeleteRouteRequestParameterOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteRouteRequestParameterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteRouteRequestParameterInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRouteResponse provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteRouteResponse(_a0 *apigatewayv2.DeleteRouteResponseInput) (*apigatewayv2.DeleteRouteResponseOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.DeleteRouteResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteRouteResponseInput) (*apigatewayv2.DeleteRouteResponseOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteRouteResponseInput) *apigatewayv2.DeleteRouteResponseOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteRouteResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteRouteResponseInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRouteResponseRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteRouteResponseRequest(_a0 *apigatewayv2.DeleteRouteResponseInput) (*request.Request, *apigatewayv2.DeleteRouteResponseOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.DeleteRouteResponseOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteRouteResponseInput) (*request.Request, *apigatewayv2.DeleteRouteResponseOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteRouteResponseInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteRouteResponseInput) *apigatewayv2.DeleteRouteResponseOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.DeleteRouteResponseOutput)
		}
	}

	return r0, r1
}

// DeleteRouteResponseWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) DeleteRouteResponseWithContext(_a0 context.Context, _a1 *apigatewayv2.DeleteRouteResponseInput, _a2 ...request.Option) (*apigatewayv2.DeleteRouteResponseOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.DeleteRouteResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteRouteResponseInput, ...request.Option) (*apigatewayv2.DeleteRouteResponseOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteRouteResponseInput, ...request.Option) *apigatewayv2.DeleteRouteResponseOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteRouteResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteRouteResponseInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRouteSettings provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteRouteSettings(_a0 *apigatewayv2.DeleteRouteSettingsInput) (*apigatewayv2.DeleteRouteSettingsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.DeleteRouteSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteRouteSettingsInput) (*apigatewayv2.DeleteRouteSettingsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteRouteSettingsInput) *apigatewayv2.DeleteRouteSettingsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteRouteSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteRouteSettingsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRouteSettingsRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteRouteSettingsRequest(_a0 *apigatewayv2.DeleteRouteSettingsInput) (*request.Request, *apigatewayv2.DeleteRouteSettingsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.DeleteRouteSettingsOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteRouteSettingsInput) (*request.Request, *apigatewayv2.DeleteRouteSettingsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteRouteSettingsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteRouteSettingsInput) *apigatewayv2.DeleteRouteSettingsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.DeleteRouteSettingsOutput)
		}
	}

	return r0, r1
}

// DeleteRouteSettingsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) DeleteRouteSettingsWithContext(_a0 context.Context, _a1 *apigatewayv2.DeleteRouteSettingsInput, _a2 ...request.Option) (*apigatewayv2.DeleteRouteSettingsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.DeleteRouteSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteRouteSettingsInput, ...request.Option) (*apigatewayv2.DeleteRouteSettingsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteRouteSettingsInput, ...request.Option) *apigatewayv2.DeleteRouteSettingsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteRouteSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteRouteSettingsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRouteWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) DeleteRouteWithContext(_a0 context.Context, _a1 *apigatewayv2.DeleteRouteInput, _a2 ...request.Option) (*apigatewayv2.DeleteRouteOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.DeleteRouteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteRouteInput, ...request.Option) (*apigatewayv2.DeleteRouteOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteRouteInput, ...request.Option) *apigatewayv2.DeleteRouteOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteRouteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteRouteInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStage provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteStage(_a0 *apigatewayv2.DeleteStageInput) (*apigatewayv2.DeleteStageOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.DeleteStageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteStageInput) (*apigatewayv2.DeleteStageOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteStageInput) *apigatewayv2.DeleteStageOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteStageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteStageInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStageRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteStageRequest(_a0 *apigatewayv2.DeleteStageInput) (*request.Request, *apigatewayv2.DeleteStageOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.DeleteStageOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteStageInput) (*request.Request, *apigatewayv2.DeleteStageOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteStageInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteStageInput) *apigatewayv2.DeleteStageOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.DeleteStageOutput)
		}
	}

	return r0, r1
}

// DeleteStageWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) DeleteStageWithContext(_a0 context.Context, _a1 *apigatewayv2.DeleteStageInput, _a2 ...request.Option) (*apigatewayv2.DeleteStageOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.DeleteStageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteStageInput, ...request.Option) (*apigatewayv2.DeleteStageOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteStageInput, ...request.Option) *apigatewayv2.DeleteStageOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteStageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteStageInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpcLink provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteVpcLink(_a0 *apigatewayv2.DeleteVpcLinkInput) (*apigatewayv2.DeleteVpcLinkOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.DeleteVpcLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteVpcLinkInput) (*apigatewayv2.DeleteVpcLinkOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteVpcLinkInput) *apigatewayv2.DeleteVpcLinkOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteVpcLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteVpcLinkInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpcLinkRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) DeleteVpcLinkRequest(_a0 *apigatewayv2.DeleteVpcLinkInput) (*request.Request, *apigatewayv2.DeleteVpcLinkOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.DeleteVpcLinkOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteVpcLinkInput) (*request.Request, *apigatewayv2.DeleteVpcLinkOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.DeleteVpcLinkInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.DeleteVpcLinkInput) *apigatewayv2.DeleteVpcLinkOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.DeleteVpcLinkOutput)
		}
	}

	return r0, r1
}

// DeleteVpcLinkWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) DeleteVpcLinkWithContext(_a0 context.Context, _a1 *apigatewayv2.DeleteVpcLinkInput, _a2 ...request.Option) (*apigatewayv2.DeleteVpcLinkOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.DeleteVpcLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteVpcLinkInput, ...request.Option) (*apigatewayv2.DeleteVpcLinkOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteVpcLinkInput, ...request.Option) *apigatewayv2.DeleteVpcLinkOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteVpcLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteVpcLinkInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportApi provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) ExportApi(_a0 *apigatewayv2.ExportApiInput) (*apigatewayv2.ExportApiOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.ExportApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.ExportApiInput) (*apigatewayv2.ExportApiOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.ExportApiInput) *apigatewayv2.ExportApiOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.ExportApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.ExportApiInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportApiRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) ExportApiRequest(_a0 *apigatewayv2.ExportApiInput) (*request.Request, *apigatewayv2.ExportApiOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.ExportApiOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.ExportApiInput) (*request.Request, *apigatewayv2.ExportApiOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.ExportApiInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.ExportApiInput) *apigatewayv2.ExportApiOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.ExportApiOutput)
		}
	}

	return r0, r1
}

// ExportApiWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) ExportApiWithContext(_a0 context.Context, _a1 *apigatewayv2.ExportApiInput, _a2 ...request.Option) (*apigatewayv2.ExportApiOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.ExportApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.ExportApiInput, ...request.Option) (*apigatewayv2.ExportApiOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.ExportApiInput, ...request.Option) *apigatewayv2.ExportApiOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.ExportApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.ExportApiInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApi provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetApi(_a0 *apigatewayv2.GetApiInput) (*apigatewayv2.GetApiOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetApiInput) (*apigatewayv2.GetApiOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetApiInput) *apigatewayv2.GetApiOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetApiInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApiMapping provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetApiMapping(_a0 *apigatewayv2.GetApiMappingInput) (*apigatewayv2.GetApiMappingOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetApiMappingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetApiMappingInput) (*apigatewayv2.GetApiMappingOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetApiMappingInput) *apigatewayv2.GetApiMappingOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetApiMappingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetApiMappingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApiMappingRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetApiMappingRequest(_a0 *apigatewayv2.GetApiMappingInput) (*request.Request, *apigatewayv2.GetApiMappingOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetApiMappingOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetApiMappingInput) (*request.Request, *apigatewayv2.GetApiMappingOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetApiMappingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetApiMappingInput) *apigatewayv2.GetApiMappingOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetApiMappingOutput)
		}
	}

	return r0, r1
}

// GetApiMappingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetApiMappingWithContext(_a0 context.Context, _a1 *apigatewayv2.GetApiMappingInput, _a2 ...request.Option) (*apigatewayv2.GetApiMappingOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetApiMappingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetApiMappingInput, ...request.Option) (*apigatewayv2.GetApiMappingOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetApiMappingInput, ...request.Option) *apigatewayv2.GetApiMappingOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetApiMappingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetApiMappingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApiMappings provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetApiMappings(_a0 *apigatewayv2.GetApiMappingsInput) (*apigatewayv2.GetApiMappingsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetApiMappingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetApiMappingsInput) (*apigatewayv2.GetApiMappingsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetApiMappingsInput) *apigatewayv2.GetApiMappingsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetApiMappingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetApiMappingsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApiMappingsRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetApiMappingsRequest(_a0 *apigatewayv2.GetApiMappingsInput) (*request.Request, *apigatewayv2.GetApiMappingsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetApiMappingsOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetApiMappingsInput) (*request.Request, *apigatewayv2.GetApiMappingsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetApiMappingsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetApiMappingsInput) *apigatewayv2.GetApiMappingsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetApiMappingsOutput)
		}
	}

	return r0, r1
}

// GetApiMappingsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetApiMappingsWithContext(_a0 context.Context, _a1 *apigatewayv2.GetApiMappingsInput, _a2 ...request.Option) (*apigatewayv2.GetApiMappingsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetApiMappingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetApiMappingsInput, ...request.Option) (*apigatewayv2.GetApiMappingsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetApiMappingsInput, ...request.Option) *apigatewayv2.GetApiMappingsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetApiMappingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetApiMappingsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApiRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetApiRequest(_a0 *apigatewayv2.GetApiInput) (*request.Request, *apigatewayv2.GetApiOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetApiOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetApiInput) (*request.Request, *apigatewayv2.GetApiOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetApiInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetApiInput) *apigatewayv2.GetApiOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetApiOutput)
		}
	}

	return r0, r1
}

// GetApiWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetApiWithContext(_a0 context.Context, _a1 *apigatewayv2.GetApiInput, _a2 ...request.Option) (*apigatewayv2.GetApiOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetApiInput, ...request.Option) (*apigatewayv2.GetApiOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetApiInput, ...request.Option) *apigatewayv2.GetApiOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetApiInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApis provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetApis(_a0 *apigatewayv2.GetApisInput) (*apigatewayv2.GetApisOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetApisOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetApisInput) (*apigatewayv2.GetApisOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetApisInput) *apigatewayv2.GetApisOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetApisOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetApisInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApisRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetApisRequest(_a0 *apigatewayv2.GetApisInput) (*request.Request, *apigatewayv2.GetApisOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetApisOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetApisInput) (*request.Request, *apigatewayv2.GetApisOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetApisInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetApisInput) *apigatewayv2.GetApisOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetApisOutput)
		}
	}

	return r0, r1
}

// GetApisWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetApisWithContext(_a0 context.Context, _a1 *apigatewayv2.GetApisInput, _a2 ...request.Option) (*apigatewayv2.GetApisOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetApisOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetApisInput, ...request.Option) (*apigatewayv2.GetApisOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetApisInput, ...request.Option) *apigatewayv2.GetApisOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetApisOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetApisInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthorizer provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetAuthorizer(_a0 *apigatewayv2.GetAuthorizerInput) (*apigatewayv2.GetAuthorizerOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetAuthorizerInput) (*apigatewayv2.GetAuthorizerOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetAuthorizerInput) *apigatewayv2.GetAuthorizerOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetAuthorizerInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthorizerRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetAuthorizerRequest(_a0 *apigatewayv2.GetAuthorizerInput) (*request.Request, *apigatewayv2.GetAuthorizerOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetAuthorizerOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetAuthorizerInput) (*request.Request, *apigatewayv2.GetAuthorizerOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetAuthorizerInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetAuthorizerInput) *apigatewayv2.GetAuthorizerOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetAuthorizerOutput)
		}
	}

	return r0, r1
}

// GetAuthorizerWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetAuthorizerWithContext(_a0 context.Context, _a1 *apigatewayv2.GetAuthorizerInput, _a2 ...request.Option) (*apigatewayv2.GetAuthorizerOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetAuthorizerInput, ...request.Option) (*apigatewayv2.GetAuthorizerOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetAuthorizerInput, ...request.Option) *apigatewayv2.GetAuthorizerOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetAuthorizerInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthorizers provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetAuthorizers(_a0 *apigatewayv2.GetAuthorizersInput) (*apigatewayv2.GetAuthorizersOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetAuthorizersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetAuthorizersInput) (*apigatewayv2.GetAuthorizersOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetAuthorizersInput) *apigatewayv2.GetAuthorizersOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetAuthorizersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetAuthorizersInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthorizersRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetAuthorizersRequest(_a0 *apigatewayv2.GetAuthorizersInput) (*request.Request, *apigatewayv2.GetAuthorizersOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetAuthorizersOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetAuthorizersInput) (*request.Request, *apigatewayv2.GetAuthorizersOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetAuthorizersInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetAuthorizersInput) *apigatewayv2.GetAuthorizersOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetAuthorizersOutput)
		}
	}

	return r0, r1
}

// GetAuthorizersWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetAuthorizersWithContext(_a0 context.Context, _a1 *apigatewayv2.GetAuthorizersInput, _a2 ...request.Option) (*apigatewayv2.GetAuthorizersOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetAuthorizersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetAuthorizersInput, ...request.Option) (*apigatewayv2.GetAuthorizersOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetAuthorizersInput, ...request.Option) *apigatewayv2.GetAuthorizersOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetAuthorizersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetAuthorizersInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeployment provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetDeployment(_a0 *apigatewayv2.GetDeploymentInput) (*apigatewayv2.GetDeploymentOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetDeploymentInput) (*apigatewayv2.GetDeploymentOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetDeploymentInput) *apigatewayv2.GetDeploymentOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetDeploymentInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetDeploymentRequest(_a0 *apigatewayv2.GetDeploymentInput) (*request.Request, *apigatewayv2.GetDeploymentOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetDeploymentOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetDeploymentInput) (*request.Request, *apigatewayv2.GetDeploymentOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetDeploymentInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetDeploymentInput) *apigatewayv2.GetDeploymentOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetDeploymentOutput)
		}
	}

	return r0, r1
}

// GetDeploymentWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetDeploymentWithContext(_a0 context.Context, _a1 *apigatewayv2.GetDeploymentInput, _a2 ...request.Option) (*apigatewayv2.GetDeploymentOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetDeploymentInput, ...request.Option) (*apigatewayv2.GetDeploymentOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetDeploymentInput, ...request.Option) *apigatewayv2.GetDeploymentOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetDeploymentInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeployments provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetDeployments(_a0 *apigatewayv2.GetDeploymentsInput) (*apigatewayv2.GetDeploymentsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetDeploymentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetDeploymentsInput) (*apigatewayv2.GetDeploymentsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetDeploymentsInput) *apigatewayv2.GetDeploymentsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetDeploymentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetDeploymentsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentsRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetDeploymentsRequest(_a0 *apigatewayv2.GetDeploymentsInput) (*request.Request, *apigatewayv2.GetDeploymentsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetDeploymentsOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetDeploymentsInput) (*request.Request, *apigatewayv2.GetDeploymentsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetDeploymentsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetDeploymentsInput) *apigatewayv2.GetDeploymentsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetDeploymentsOutput)
		}
	}

	return r0, r1
}

// GetDeploymentsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetDeploymentsWithContext(_a0 context.Context, _a1 *apigatewayv2.GetDeploymentsInput, _a2 ...request.Option) (*apigatewayv2.GetDeploymentsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetDeploymentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetDeploymentsInput, ...request.Option) (*apigatewayv2.GetDeploymentsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetDeploymentsInput, ...request.Option) *apigatewayv2.GetDeploymentsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetDeploymentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetDeploymentsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainName provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetDomainName(_a0 *apigatewayv2.GetDomainNameInput) (*apigatewayv2.GetDomainNameOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetDomainNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetDomainNameInput) (*apigatewayv2.GetDomainNameOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetDomainNameInput) *apigatewayv2.GetDomainNameOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetDomainNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetDomainNameInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainNameRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetDomainNameRequest(_a0 *apigatewayv2.GetDomainNameInput) (*request.Request, *apigatewayv2.GetDomainNameOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetDomainNameOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetDomainNameInput) (*request.Request, *apigatewayv2.GetDomainNameOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetDomainNameInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetDomainNameInput) *apigatewayv2.GetDomainNameOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetDomainNameOutput)
		}
	}

	return r0, r1
}

// GetDomainNameWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetDomainNameWithContext(_a0 context.Context, _a1 *apigatewayv2.GetDomainNameInput, _a2 ...request.Option) (*apigatewayv2.GetDomainNameOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetDomainNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetDomainNameInput, ...request.Option) (*apigatewayv2.GetDomainNameOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetDomainNameInput, ...request.Option) *apigatewayv2.GetDomainNameOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetDomainNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetDomainNameInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainNames provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetDomainNames(_a0 *apigatewayv2.GetDomainNamesInput) (*apigatewayv2.GetDomainNamesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetDomainNamesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetDomainNamesInput) (*apigatewayv2.GetDomainNamesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetDomainNamesInput) *apigatewayv2.GetDomainNamesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetDomainNamesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetDomainNamesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainNamesRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetDomainNamesRequest(_a0 *apigatewayv2.GetDomainNamesInput) (*request.Request, *apigatewayv2.GetDomainNamesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetDomainNamesOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetDomainNamesInput) (*request.Request, *apigatewayv2.GetDomainNamesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetDomainNamesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetDomainNamesInput) *apigatewayv2.GetDomainNamesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetDomainNamesOutput)
		}
	}

	return r0, r1
}

// GetDomainNamesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetDomainNamesWithContext(_a0 context.Context, _a1 *apigatewayv2.GetDomainNamesInput, _a2 ...request.Option) (*apigatewayv2.GetDomainNamesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetDomainNamesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetDomainNamesInput, ...request.Option) (*apigatewayv2.GetDomainNamesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetDomainNamesInput, ...request.Option) *apigatewayv2.GetDomainNamesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetDomainNamesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetDomainNamesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntegration provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetIntegration(_a0 *apigatewayv2.GetIntegrationInput) (*apigatewayv2.GetIntegrationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetIntegrationInput) (*apigatewayv2.GetIntegrationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetIntegrationInput) *apigatewayv2.GetIntegrationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetIntegrationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntegrationRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetIntegrationRequest(_a0 *apigatewayv2.GetIntegrationInput) (*request.Request, *apigatewayv2.GetIntegrationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetIntegrationOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetIntegrationInput) (*request.Request, *apigatewayv2.GetIntegrationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetIntegrationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetIntegrationInput) *apigatewayv2.GetIntegrationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetIntegrationOutput)
		}
	}

	return r0, r1
}

// GetIntegrationResponse provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetIntegrationResponse(_a0 *apigatewayv2.GetIntegrationResponseInput) (*apigatewayv2.GetIntegrationResponseOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetIntegrationResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetIntegrationResponseInput) (*apigatewayv2.GetIntegrationResponseOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetIntegrationResponseInput) *apigatewayv2.GetIntegrationResponseOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetIntegrationResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetIntegrationResponseInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntegrationResponseRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetIntegrationResponseRequest(_a0 *apigatewayv2.GetIntegrationResponseInput) (*request.Request, *apigatewayv2.GetIntegrationResponseOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetIntegrationResponseOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetIntegrationResponseInput) (*request.Request, *apigatewayv2.GetIntegrationResponseOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetIntegrationResponseInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetIntegrationResponseInput) *apigatewayv2.GetIntegrationResponseOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetIntegrationResponseOutput)
		}
	}

	return r0, r1
}

// GetIntegrationResponseWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetIntegrationResponseWithContext(_a0 context.Context, _a1 *apigatewayv2.GetIntegrationResponseInput, _a2 ...request.Option) (*apigatewayv2.GetIntegrationResponseOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetIntegrationResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetIntegrationResponseInput, ...request.Option) (*apigatewayv2.GetIntegrationResponseOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetIntegrationResponseInput, ...request.Option) *apigatewayv2.GetIntegrationResponseOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetIntegrationResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetIntegrationResponseInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntegrationResponses provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetIntegrationResponses(_a0 *apigatewayv2.GetIntegrationResponsesInput) (*apigatewayv2.GetIntegrationResponsesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetIntegrationResponsesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetIntegrationResponsesInput) (*apigatewayv2.GetIntegrationResponsesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetIntegrationResponsesInput) *apigatewayv2.GetIntegrationResponsesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetIntegrationResponsesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetIntegrationResponsesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntegrationResponsesRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetIntegrationResponsesRequest(_a0 *apigatewayv2.GetIntegrationResponsesInput) (*request.Request, *apigatewayv2.GetIntegrationResponsesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetIntegrationResponsesOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetIntegrationResponsesInput) (*request.Request, *apigatewayv2.GetIntegrationResponsesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetIntegrationResponsesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetIntegrationResponsesInput) *apigatewayv2.GetIntegrationResponsesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetIntegrationResponsesOutput)
		}
	}

	return r0, r1
}

// GetIntegrationResponsesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetIntegrationResponsesWithContext(_a0 context.Context, _a1 *apigatewayv2.GetIntegrationResponsesInput, _a2 ...request.Option) (*apigatewayv2.GetIntegrationResponsesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetIntegrationResponsesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetIntegrationResponsesInput, ...request.Option) (*apigatewayv2.GetIntegrationResponsesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetIntegrationResponsesInput, ...request.Option) *apigatewayv2.GetIntegrationResponsesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetIntegrationResponsesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetIntegrationResponsesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntegrationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetIntegrationWithContext(_a0 context.Context, _a1 *apigatewayv2.GetIntegrationInput, _a2 ...request.Option) (*apigatewayv2.GetIntegrationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetIntegrationInput, ...request.Option) (*apigatewayv2.GetIntegrationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetIntegrationInput, ...request.Option) *apigatewayv2.GetIntegrationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetIntegrationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntegrations provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetIntegrations(_a0 *apigatewayv2.GetIntegrationsInput) (*apigatewayv2.GetIntegrationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetIntegrationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetIntegrationsInput) (*apigatewayv2.GetIntegrationsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetIntegrationsInput) *apigatewayv2.GetIntegrationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetIntegrationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetIntegrationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntegrationsRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetIntegrationsRequest(_a0 *apigatewayv2.GetIntegrationsInput) (*request.Request, *apigatewayv2.GetIntegrationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetIntegrationsOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetIntegrationsInput) (*request.Request, *apigatewayv2.GetIntegrationsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetIntegrationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetIntegrationsInput) *apigatewayv2.GetIntegrationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetIntegrationsOutput)
		}
	}

	return r0, r1
}

// GetIntegrationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetIntegrationsWithContext(_a0 context.Context, _a1 *apigatewayv2.GetIntegrationsInput, _a2 ...request.Option) (*apigatewayv2.GetIntegrationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetIntegrationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetIntegrationsInput, ...request.Option) (*apigatewayv2.GetIntegrationsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetIntegrationsInput, ...request.Option) *apigatewayv2.GetIntegrationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetIntegrationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetIntegrationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModel provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetModel(_a0 *apigatewayv2.GetModelInput) (*apigatewayv2.GetModelOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetModelInput) (*apigatewayv2.GetModelOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetModelInput) *apigatewayv2.GetModelOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetModelInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModelRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetModelRequest(_a0 *apigatewayv2.GetModelInput) (*request.Request, *apigatewayv2.GetModelOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetModelOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetModelInput) (*request.Request, *apigatewayv2.GetModelOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetModelInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetModelInput) *apigatewayv2.GetModelOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetModelOutput)
		}
	}

	return r0, r1
}

// GetModelTemplate provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetModelTemplate(_a0 *apigatewayv2.GetModelTemplateInput) (*apigatewayv2.GetModelTemplateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetModelTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetModelTemplateInput) (*apigatewayv2.GetModelTemplateOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetModelTemplateInput) *apigatewayv2.GetModelTemplateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetModelTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetModelTemplateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModelTemplateRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetModelTemplateRequest(_a0 *apigatewayv2.GetModelTemplateInput) (*request.Request, *apigatewayv2.GetModelTemplateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetModelTemplateOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetModelTemplateInput) (*request.Request, *apigatewayv2.GetModelTemplateOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetModelTemplateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetModelTemplateInput) *apigatewayv2.GetModelTemplateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetModelTemplateOutput)
		}
	}

	return r0, r1
}

// GetModelTemplateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetModelTemplateWithContext(_a0 context.Context, _a1 *apigatewayv2.GetModelTemplateInput, _a2 ...request.Option) (*apigatewayv2.GetModelTemplateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetModelTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetModelTemplateInput, ...request.Option) (*apigatewayv2.GetModelTemplateOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetModelTemplateInput, ...request.Option) *apigatewayv2.GetModelTemplateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetModelTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetModelTemplateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModelWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetModelWithContext(_a0 context.Context, _a1 *apigatewayv2.GetModelInput, _a2 ...request.Option) (*apigatewayv2.GetModelOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetModelInput, ...request.Option) (*apigatewayv2.GetModelOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetModelInput, ...request.Option) *apigatewayv2.GetModelOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetModelInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModels provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetModels(_a0 *apigatewayv2.GetModelsInput) (*apigatewayv2.GetModelsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetModelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetModelsInput) (*apigatewayv2.GetModelsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetModelsInput) *apigatewayv2.GetModelsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetModelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetModelsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModelsRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetModelsRequest(_a0 *apigatewayv2.GetModelsInput) (*request.Request, *apigatewayv2.GetModelsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetModelsOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetModelsInput) (*request.Request, *apigatewayv2.GetModelsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetModelsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetModelsInput) *apigatewayv2.GetModelsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetModelsOutput)
		}
	}

	return r0, r1
}

// GetModelsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetModelsWithContext(_a0 context.Context, _a1 *apigatewayv2.GetModelsInput, _a2 ...request.Option) (*apigatewayv2.GetModelsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetModelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetModelsInput, ...request.Option) (*apigatewayv2.GetModelsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetModelsInput, ...request.Option) *apigatewayv2.GetModelsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetModelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetModelsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoute provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetRoute(_a0 *apigatewayv2.GetRouteInput) (*apigatewayv2.GetRouteOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetRouteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetRouteInput) (*apigatewayv2.GetRouteOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetRouteInput) *apigatewayv2.GetRouteOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetRouteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetRouteInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRouteRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetRouteRequest(_a0 *apigatewayv2.GetRouteInput) (*request.Request, *apigatewayv2.GetRouteOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetRouteOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetRouteInput) (*request.Request, *apigatewayv2.GetRouteOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetRouteInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetRouteInput) *apigatewayv2.GetRouteOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetRouteOutput)
		}
	}

	return r0, r1
}

// GetRouteResponse provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetRouteResponse(_a0 *apigatewayv2.GetRouteResponseInput) (*apigatewayv2.GetRouteResponseOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetRouteResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetRouteResponseInput) (*apigatewayv2.GetRouteResponseOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetRouteResponseInput) *apigatewayv2.GetRouteResponseOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetRouteResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetRouteResponseInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRouteResponseRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetRouteResponseRequest(_a0 *apigatewayv2.GetRouteResponseInput) (*request.Request, *apigatewayv2.GetRouteResponseOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetRouteResponseOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetRouteResponseInput) (*request.Request, *apigatewayv2.GetRouteResponseOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetRouteResponseInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetRouteResponseInput) *apigatewayv2.GetRouteResponseOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetRouteResponseOutput)
		}
	}

	return r0, r1
}

// GetRouteResponseWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetRouteResponseWithContext(_a0 context.Context, _a1 *apigatewayv2.GetRouteResponseInput, _a2 ...request.Option) (*apigatewayv2.GetRouteResponseOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetRouteResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetRouteResponseInput, ...request.Option) (*apigatewayv2.GetRouteResponseOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetRouteResponseInput, ...request.Option) *apigatewayv2.GetRouteResponseOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetRouteResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetRouteResponseInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRouteResponses provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetRouteResponses(_a0 *apigatewayv2.GetRouteResponsesInput) (*apigatewayv2.GetRouteResponsesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetRouteResponsesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetRouteResponsesInput) (*apigatewayv2.GetRouteResponsesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetRouteResponsesInput) *apigatewayv2.GetRouteResponsesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetRouteResponsesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetRouteResponsesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRouteResponsesRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetRouteResponsesRequest(_a0 *apigatewayv2.GetRouteResponsesInput) (*request.Request, *apigatewayv2.GetRouteResponsesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetRouteResponsesOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetRouteResponsesInput) (*request.Request, *apigatewayv2.GetRouteResponsesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetRouteResponsesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetRouteResponsesInput) *apigatewayv2.GetRouteResponsesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetRouteResponsesOutput)
		}
	}

	return r0, r1
}

// GetRouteResponsesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetRouteResponsesWithContext(_a0 context.Context, _a1 *apigatewayv2.GetRouteResponsesInput, _a2 ...request.Option) (*apigatewayv2.GetRouteResponsesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetRouteResponsesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetRouteResponsesInput, ...request.Option) (*apigatewayv2.GetRouteResponsesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetRouteResponsesInput, ...request.Option) *apigatewayv2.GetRouteResponsesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetRouteResponsesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetRouteResponsesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRouteWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetRouteWithContext(_a0 context.Context, _a1 *apigatewayv2.GetRouteInput, _a2 ...request.Option) (*apigatewayv2.GetRouteOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetRouteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetRouteInput, ...request.Option) (*apigatewayv2.GetRouteOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetRouteInput, ...request.Option) *apigatewayv2.GetRouteOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetRouteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetRouteInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoutes provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetRoutes(_a0 *apigatewayv2.GetRoutesInput) (*apigatewayv2.GetRoutesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetRoutesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetRoutesInput) (*apigatewayv2.GetRoutesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetRoutesInput) *apigatewayv2.GetRoutesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetRoutesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetRoutesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoutesRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetRoutesRequest(_a0 *apigatewayv2.GetRoutesInput) (*request.Request, *apigatewayv2.GetRoutesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetRoutesOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetRoutesInput) (*request.Request, *apigatewayv2.GetRoutesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetRoutesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetRoutesInput) *apigatewayv2.GetRoutesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetRoutesOutput)
		}
	}

	return r0, r1
}

// GetRoutesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetRoutesWithContext(_a0 context.Context, _a1 *apigatewayv2.GetRoutesInput, _a2 ...request.Option) (*apigatewayv2.GetRoutesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetRoutesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetRoutesInput, ...request.Option) (*apigatewayv2.GetRoutesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetRoutesInput, ...request.Option) *apigatewayv2.GetRoutesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetRoutesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetRoutesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStage provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetStage(_a0 *apigatewayv2.GetStageInput) (*apigatewayv2.GetStageOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetStageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetStageInput) (*apigatewayv2.GetStageOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetStageInput) *apigatewayv2.GetStageOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetStageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetStageInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStageRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetStageRequest(_a0 *apigatewayv2.GetStageInput) (*request.Request, *apigatewayv2.GetStageOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetStageOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetStageInput) (*request.Request, *apigatewayv2.GetStageOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetStageInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetStageInput) *apigatewayv2.GetStageOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetStageOutput)
		}
	}

	return r0, r1
}

// GetStageWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetStageWithContext(_a0 context.Context, _a1 *apigatewayv2.GetStageInput, _a2 ...request.Option) (*apigatewayv2.GetStageOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetStageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetStageInput, ...request.Option) (*apigatewayv2.GetStageOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetStageInput, ...request.Option) *apigatewayv2.GetStageOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetStageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetStageInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStages provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetStages(_a0 *apigatewayv2.GetStagesInput) (*apigatewayv2.GetStagesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetStagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetStagesInput) (*apigatewayv2.GetStagesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetStagesInput) *apigatewayv2.GetStagesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetStagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetStagesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStagesRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetStagesRequest(_a0 *apigatewayv2.GetStagesInput) (*request.Request, *apigatewayv2.GetStagesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetStagesOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetStagesInput) (*request.Request, *apigatewayv2.GetStagesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetStagesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetStagesInput) *apigatewayv2.GetStagesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetStagesOutput)
		}
	}

	return r0, r1
}

// GetStagesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetStagesWithContext(_a0 context.Context, _a1 *apigatewayv2.GetStagesInput, _a2 ...request.Option) (*apigatewayv2.GetStagesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetStagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetStagesInput, ...request.Option) (*apigatewayv2.GetStagesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetStagesInput, ...request.Option) *apigatewayv2.GetStagesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetStagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetStagesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTags provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetTags(_a0 *apigatewayv2.GetTagsInput) (*apigatewayv2.GetTagsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetTagsInput) (*apigatewayv2.GetTagsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetTagsInput) *apigatewayv2.GetTagsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetTagsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTagsRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetTagsRequest(_a0 *apigatewayv2.GetTagsInput) (*request.Request, *apigatewayv2.GetTagsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetTagsOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetTagsInput) (*request.Request, *apigatewayv2.GetTagsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetTagsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetTagsInput) *apigatewayv2.GetTagsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetTagsOutput)
		}
	}

	return r0, r1
}

// GetTagsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetTagsWithContext(_a0 context.Context, _a1 *apigatewayv2.GetTagsInput, _a2 ...request.Option) (*apigatewayv2.GetTagsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetTagsInput, ...request.Option) (*apigatewayv2.GetTagsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetTagsInput, ...request.Option) *apigatewayv2.GetTagsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetTagsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVpcLink provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetVpcLink(_a0 *apigatewayv2.GetVpcLinkInput) (*apigatewayv2.GetVpcLinkOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetVpcLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetVpcLinkInput) (*apigatewayv2.GetVpcLinkOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetVpcLinkInput) *apigatewayv2.GetVpcLinkOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetVpcLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetVpcLinkInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVpcLinkRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetVpcLinkRequest(_a0 *apigatewayv2.GetVpcLinkInput) (*request.Request, *apigatewayv2.GetVpcLinkOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetVpcLinkOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetVpcLinkInput) (*request.Request, *apigatewayv2.GetVpcLinkOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetVpcLinkInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetVpcLinkInput) *apigatewayv2.GetVpcLinkOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetVpcLinkOutput)
		}
	}

	return r0, r1
}

// GetVpcLinkWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetVpcLinkWithContext(_a0 context.Context, _a1 *apigatewayv2.GetVpcLinkInput, _a2 ...request.Option) (*apigatewayv2.GetVpcLinkOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetVpcLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetVpcLinkInput, ...request.Option) (*apigatewayv2.GetVpcLinkOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetVpcLinkInput, ...request.Option) *apigatewayv2.GetVpcLinkOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetVpcLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetVpcLinkInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVpcLinks provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetVpcLinks(_a0 *apigatewayv2.GetVpcLinksInput) (*apigatewayv2.GetVpcLinksOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.GetVpcLinksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetVpcLinksInput) (*apigatewayv2.GetVpcLinksOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetVpcLinksInput) *apigatewayv2.GetVpcLinksOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetVpcLinksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetVpcLinksInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVpcLinksRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) GetVpcLinksRequest(_a0 *apigatewayv2.GetVpcLinksInput) (*request.Request, *apigatewayv2.GetVpcLinksOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.GetVpcLinksOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetVpcLinksInput) (*request.Request, *apigatewayv2.GetVpcLinksOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.GetVpcLinksInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.GetVpcLinksInput) *apigatewayv2.GetVpcLinksOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.GetVpcLinksOutput)
		}
	}

	return r0, r1
}

// GetVpcLinksWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) GetVpcLinksWithContext(_a0 context.Context, _a1 *apigatewayv2.GetVpcLinksInput, _a2 ...request.Option) (*apigatewayv2.GetVpcLinksOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.GetVpcLinksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetVpcLinksInput, ...request.Option) (*apigatewayv2.GetVpcLinksOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetVpcLinksInput, ...request.Option) *apigatewayv2.GetVpcLinksOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetVpcLinksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetVpcLinksInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportApi provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) ImportApi(_a0 *apigatewayv2.ImportApiInput) (*apigatewayv2.ImportApiOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.ImportApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.ImportApiInput) (*apigatewayv2.ImportApiOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.ImportApiInput) *apigatewayv2.ImportApiOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.ImportApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.ImportApiInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportApiRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) ImportApiRequest(_a0 *apigatewayv2.ImportApiInput) (*request.Request, *apigatewayv2.ImportApiOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.ImportApiOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.ImportApiInput) (*request.Request, *apigatewayv2.ImportApiOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.ImportApiInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.ImportApiInput) *apigatewayv2.ImportApiOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.ImportApiOutput)
		}
	}

	return r0, r1
}

// ImportApiWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) ImportApiWithContext(_a0 context.Context, _a1 *apigatewayv2.ImportApiInput, _a2 ...request.Option) (*apigatewayv2.ImportApiOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.ImportApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.ImportApiInput, ...request.Option) (*apigatewayv2.ImportApiOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.ImportApiInput, ...request.Option) *apigatewayv2.ImportApiOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.ImportApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.ImportApiInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReimportApi provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) ReimportApi(_a0 *apigatewayv2.ReimportApiInput) (*apigatewayv2.ReimportApiOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.ReimportApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.ReimportApiInput) (*apigatewayv2.ReimportApiOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.ReimportApiInput) *apigatewayv2.ReimportApiOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.ReimportApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.ReimportApiInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReimportApiRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) ReimportApiRequest(_a0 *apigatewayv2.ReimportApiInput) (*request.Request, *apigatewayv2.ReimportApiOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.ReimportApiOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.ReimportApiInput) (*request.Request, *apigatewayv2.ReimportApiOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.ReimportApiInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.ReimportApiInput) *apigatewayv2.ReimportApiOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.ReimportApiOutput)
		}
	}

	return r0, r1
}

// ReimportApiWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) ReimportApiWithContext(_a0 context.Context, _a1 *apigatewayv2.ReimportApiInput, _a2 ...request.Option) (*apigatewayv2.ReimportApiOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.ReimportApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.ReimportApiInput, ...request.Option) (*apigatewayv2.ReimportApiOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.ReimportApiInput, ...request.Option) *apigatewayv2.ReimportApiOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.ReimportApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.ReimportApiInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetAuthorizersCache provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) ResetAuthorizersCache(_a0 *apigatewayv2.ResetAuthorizersCacheInput) (*apigatewayv2.ResetAuthorizersCacheOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.ResetAuthorizersCacheOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.ResetAuthorizersCacheInput) (*apigatewayv2.ResetAuthorizersCacheOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.ResetAuthorizersCacheInput) *apigatewayv2.ResetAuthorizersCacheOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.ResetAuthorizersCacheOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.ResetAuthorizersCacheInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetAuthorizersCacheRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) ResetAuthorizersCacheRequest(_a0 *apigatewayv2.ResetAuthorizersCacheInput) (*request.Request, *apigatewayv2.ResetAuthorizersCacheOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.ResetAuthorizersCacheOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.ResetAuthorizersCacheInput) (*request.Request, *apigatewayv2.ResetAuthorizersCacheOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.ResetAuthorizersCacheInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.ResetAuthorizersCacheInput) *apigatewayv2.ResetAuthorizersCacheOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.ResetAuthorizersCacheOutput)
		}
	}

	return r0, r1
}

// ResetAuthorizersCacheWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) ResetAuthorizersCacheWithContext(_a0 context.Context, _a1 *apigatewayv2.ResetAuthorizersCacheInput, _a2 ...request.Option) (*apigatewayv2.ResetAuthorizersCacheOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.ResetAuthorizersCacheOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.ResetAuthorizersCacheInput, ...request.Option) (*apigatewayv2.ResetAuthorizersCacheOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.ResetAuthorizersCacheInput, ...request.Option) *apigatewayv2.ResetAuthorizersCacheOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.ResetAuthorizersCacheOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.ResetAuthorizersCacheInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) TagResource(_a0 *apigatewayv2.TagResourceInput) (*apigatewayv2.TagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.TagResourceInput) (*apigatewayv2.TagResourceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.TagResourceInput) *apigatewayv2.TagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.TagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResourceRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) TagResourceRequest(_a0 *apigatewayv2.TagResourceInput) (*request.Request, *apigatewayv2.TagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.TagResourceOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.TagResourceInput) (*request.Request, *apigatewayv2.TagResourceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.TagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.TagResourceInput) *apigatewayv2.TagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.TagResourceOutput)
		}
	}

	return r0, r1
}

// TagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) TagResourceWithContext(_a0 context.Context, _a1 *apigatewayv2.TagResourceInput, _a2 ...request.Option) (*apigatewayv2.TagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.TagResourceInput, ...request.Option) (*apigatewayv2.TagResourceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.TagResourceInput, ...request.Option) *apigatewayv2.TagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.TagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UntagResource(_a0 *apigatewayv2.UntagResourceInput) (*apigatewayv2.UntagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UntagResourceInput) (*apigatewayv2.UntagResourceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UntagResourceInput) *apigatewayv2.UntagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UntagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResourceRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UntagResourceRequest(_a0 *apigatewayv2.UntagResourceInput) (*request.Request, *apigatewayv2.UntagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UntagResourceInput) (*request.Request, *apigatewayv2.UntagResourceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UntagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UntagResourceInput) *apigatewayv2.UntagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.UntagResourceOutput)
		}
	}

	return r0, r1
}

// UntagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) UntagResourceWithContext(_a0 context.Context, _a1 *apigatewayv2.UntagResourceInput, _a2 ...request.Option) (*apigatewayv2.UntagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UntagResourceInput, ...request.Option) (*apigatewayv2.UntagResourceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UntagResourceInput, ...request.Option) *apigatewayv2.UntagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UntagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApi provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateApi(_a0 *apigatewayv2.UpdateApiInput) (*apigatewayv2.UpdateApiOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.UpdateApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateApiInput) (*apigatewayv2.UpdateApiOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateApiInput) *apigatewayv2.UpdateApiOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateApiInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApiMapping provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateApiMapping(_a0 *apigatewayv2.UpdateApiMappingInput) (*apigatewayv2.UpdateApiMappingOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.UpdateApiMappingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateApiMappingInput) (*apigatewayv2.UpdateApiMappingOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateApiMappingInput) *apigatewayv2.UpdateApiMappingOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateApiMappingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateApiMappingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApiMappingRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateApiMappingRequest(_a0 *apigatewayv2.UpdateApiMappingInput) (*request.Request, *apigatewayv2.UpdateApiMappingOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.UpdateApiMappingOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateApiMappingInput) (*request.Request, *apigatewayv2.UpdateApiMappingOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateApiMappingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateApiMappingInput) *apigatewayv2.UpdateApiMappingOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.UpdateApiMappingOutput)
		}
	}

	return r0, r1
}

// UpdateApiMappingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) UpdateApiMappingWithContext(_a0 context.Context, _a1 *apigatewayv2.UpdateApiMappingInput, _a2 ...request.Option) (*apigatewayv2.UpdateApiMappingOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.UpdateApiMappingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateApiMappingInput, ...request.Option) (*apigatewayv2.UpdateApiMappingOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateApiMappingInput, ...request.Option) *apigatewayv2.UpdateApiMappingOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateApiMappingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateApiMappingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApiRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateApiRequest(_a0 *apigatewayv2.UpdateApiInput) (*request.Request, *apigatewayv2.UpdateApiOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.UpdateApiOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateApiInput) (*request.Request, *apigatewayv2.UpdateApiOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateApiInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateApiInput) *apigatewayv2.UpdateApiOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.UpdateApiOutput)
		}
	}

	return r0, r1
}

// UpdateApiWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) UpdateApiWithContext(_a0 context.Context, _a1 *apigatewayv2.UpdateApiInput, _a2 ...request.Option) (*apigatewayv2.UpdateApiOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.UpdateApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateApiInput, ...request.Option) (*apigatewayv2.UpdateApiOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateApiInput, ...request.Option) *apigatewayv2.UpdateApiOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateApiInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAuthorizer provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateAuthorizer(_a0 *apigatewayv2.UpdateAuthorizerInput) (*apigatewayv2.UpdateAuthorizerOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.UpdateAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateAuthorizerInput) (*apigatewayv2.UpdateAuthorizerOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateAuthorizerInput) *apigatewayv2.UpdateAuthorizerOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateAuthorizerInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAuthorizerRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateAuthorizerRequest(_a0 *apigatewayv2.UpdateAuthorizerInput) (*request.Request, *apigatewayv2.UpdateAuthorizerOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.UpdateAuthorizerOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateAuthorizerInput) (*request.Request, *apigatewayv2.UpdateAuthorizerOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateAuthorizerInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateAuthorizerInput) *apigatewayv2.UpdateAuthorizerOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.UpdateAuthorizerOutput)
		}
	}

	return r0, r1
}

// UpdateAuthorizerWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) UpdateAuthorizerWithContext(_a0 context.Context, _a1 *apigatewayv2.UpdateAuthorizerInput, _a2 ...request.Option) (*apigatewayv2.UpdateAuthorizerOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.UpdateAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateAuthorizerInput, ...request.Option) (*apigatewayv2.UpdateAuthorizerOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateAuthorizerInput, ...request.Option) *apigatewayv2.UpdateAuthorizerOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateAuthorizerInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeployment provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateDeployment(_a0 *apigatewayv2.UpdateDeploymentInput) (*apigatewayv2.UpdateDeploymentOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.UpdateDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateDeploymentInput) (*apigatewayv2.UpdateDeploymentOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateDeploymentInput) *apigatewayv2.UpdateDeploymentOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateDeploymentInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeploymentRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateDeploymentRequest(_a0 *apigatewayv2.UpdateDeploymentInput) (*request.Request, *apigatewayv2.UpdateDeploymentOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.UpdateDeploymentOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateDeploymentInput) (*request.Request, *apigatewayv2.UpdateDeploymentOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateDeploymentInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateDeploymentInput) *apigatewayv2.UpdateDeploymentOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.UpdateDeploymentOutput)
		}
	}

	return r0, r1
}

// UpdateDeploymentWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) UpdateDeploymentWithContext(_a0 context.Context, _a1 *apigatewayv2.UpdateDeploymentInput, _a2 ...request.Option) (*apigatewayv2.UpdateDeploymentOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.UpdateDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateDeploymentInput, ...request.Option) (*apigatewayv2.UpdateDeploymentOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateDeploymentInput, ...request.Option) *apigatewayv2.UpdateDeploymentOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateDeploymentInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDomainName provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateDomainName(_a0 *apigatewayv2.UpdateDomainNameInput) (*apigatewayv2.UpdateDomainNameOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.UpdateDomainNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateDomainNameInput) (*apigatewayv2.UpdateDomainNameOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateDomainNameInput) *apigatewayv2.UpdateDomainNameOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateDomainNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateDomainNameInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDomainNameRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateDomainNameRequest(_a0 *apigatewayv2.UpdateDomainNameInput) (*request.Request, *apigatewayv2.UpdateDomainNameOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.UpdateDomainNameOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateDomainNameInput) (*request.Request, *apigatewayv2.UpdateDomainNameOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateDomainNameInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateDomainNameInput) *apigatewayv2.UpdateDomainNameOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.UpdateDomainNameOutput)
		}
	}

	return r0, r1
}

// UpdateDomainNameWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) UpdateDomainNameWithContext(_a0 context.Context, _a1 *apigatewayv2.UpdateDomainNameInput, _a2 ...request.Option) (*apigatewayv2.UpdateDomainNameOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.UpdateDomainNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateDomainNameInput, ...request.Option) (*apigatewayv2.UpdateDomainNameOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateDomainNameInput, ...request.Option) *apigatewayv2.UpdateDomainNameOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateDomainNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateDomainNameInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIntegration provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateIntegration(_a0 *apigatewayv2.UpdateIntegrationInput) (*apigatewayv2.UpdateIntegrationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.UpdateIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateIntegrationInput) (*apigatewayv2.UpdateIntegrationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateIntegrationInput) *apigatewayv2.UpdateIntegrationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateIntegrationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIntegrationRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateIntegrationRequest(_a0 *apigatewayv2.UpdateIntegrationInput) (*request.Request, *apigatewayv2.UpdateIntegrationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.UpdateIntegrationOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateIntegrationInput) (*request.Request, *apigatewayv2.UpdateIntegrationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateIntegrationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateIntegrationInput) *apigatewayv2.UpdateIntegrationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.UpdateIntegrationOutput)
		}
	}

	return r0, r1
}

// UpdateIntegrationResponse provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateIntegrationResponse(_a0 *apigatewayv2.UpdateIntegrationResponseInput) (*apigatewayv2.UpdateIntegrationResponseOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.UpdateIntegrationResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateIntegrationResponseInput) (*apigatewayv2.UpdateIntegrationResponseOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateIntegrationResponseInput) *apigatewayv2.UpdateIntegrationResponseOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateIntegrationResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateIntegrationResponseInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIntegrationResponseRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateIntegrationResponseRequest(_a0 *apigatewayv2.UpdateIntegrationResponseInput) (*request.Request, *apigatewayv2.UpdateIntegrationResponseOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.UpdateIntegrationResponseOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateIntegrationResponseInput) (*request.Request, *apigatewayv2.UpdateIntegrationResponseOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateIntegrationResponseInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateIntegrationResponseInput) *apigatewayv2.UpdateIntegrationResponseOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.UpdateIntegrationResponseOutput)
		}
	}

	return r0, r1
}

// UpdateIntegrationResponseWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) UpdateIntegrationResponseWithContext(_a0 context.Context, _a1 *apigatewayv2.UpdateIntegrationResponseInput, _a2 ...request.Option) (*apigatewayv2.UpdateIntegrationResponseOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.UpdateIntegrationResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateIntegrationResponseInput, ...request.Option) (*apigatewayv2.UpdateIntegrationResponseOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateIntegrationResponseInput, ...request.Option) *apigatewayv2.UpdateIntegrationResponseOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateIntegrationResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateIntegrationResponseInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIntegrationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) UpdateIntegrationWithContext(_a0 context.Context, _a1 *apigatewayv2.UpdateIntegrationInput, _a2 ...request.Option) (*apigatewayv2.UpdateIntegrationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.UpdateIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateIntegrationInput, ...request.Option) (*apigatewayv2.UpdateIntegrationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateIntegrationInput, ...request.Option) *apigatewayv2.UpdateIntegrationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateIntegrationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateModel provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateModel(_a0 *apigatewayv2.UpdateModelInput) (*apigatewayv2.UpdateModelOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.UpdateModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateModelInput) (*apigatewayv2.UpdateModelOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateModelInput) *apigatewayv2.UpdateModelOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateModelInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateModelRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateModelRequest(_a0 *apigatewayv2.UpdateModelInput) (*request.Request, *apigatewayv2.UpdateModelOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.UpdateModelOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateModelInput) (*request.Request, *apigatewayv2.UpdateModelOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateModelInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateModelInput) *apigatewayv2.UpdateModelOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.UpdateModelOutput)
		}
	}

	return r0, r1
}

// UpdateModelWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) UpdateModelWithContext(_a0 context.Context, _a1 *apigatewayv2.UpdateModelInput, _a2 ...request.Option) (*apigatewayv2.UpdateModelOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.UpdateModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateModelInput, ...request.Option) (*apigatewayv2.UpdateModelOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateModelInput, ...request.Option) *apigatewayv2.UpdateModelOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateModelInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoute provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateRoute(_a0 *apigatewayv2.UpdateRouteInput) (*apigatewayv2.UpdateRouteOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.UpdateRouteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateRouteInput) (*apigatewayv2.UpdateRouteOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateRouteInput) *apigatewayv2.UpdateRouteOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateRouteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateRouteInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRouteRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateRouteRequest(_a0 *apigatewayv2.UpdateRouteInput) (*request.Request, *apigatewayv2.UpdateRouteOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.UpdateRouteOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateRouteInput) (*request.Request, *apigatewayv2.UpdateRouteOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateRouteInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateRouteInput) *apigatewayv2.UpdateRouteOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.UpdateRouteOutput)
		}
	}

	return r0, r1
}

// UpdateRouteResponse provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateRouteResponse(_a0 *apigatewayv2.UpdateRouteResponseInput) (*apigatewayv2.UpdateRouteResponseOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.UpdateRouteResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateRouteResponseInput) (*apigatewayv2.UpdateRouteResponseOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateRouteResponseInput) *apigatewayv2.UpdateRouteResponseOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateRouteResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateRouteResponseInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRouteResponseRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateRouteResponseRequest(_a0 *apigatewayv2.UpdateRouteResponseInput) (*request.Request, *apigatewayv2.UpdateRouteResponseOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.UpdateRouteResponseOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateRouteResponseInput) (*request.Request, *apigatewayv2.UpdateRouteResponseOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateRouteResponseInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateRouteResponseInput) *apigatewayv2.UpdateRouteResponseOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.UpdateRouteResponseOutput)
		}
	}

	return r0, r1
}

// UpdateRouteResponseWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) UpdateRouteResponseWithContext(_a0 context.Context, _a1 *apigatewayv2.UpdateRouteResponseInput, _a2 ...request.Option) (*apigatewayv2.UpdateRouteResponseOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.UpdateRouteResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateRouteResponseInput, ...request.Option) (*apigatewayv2.UpdateRouteResponseOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateRouteResponseInput, ...request.Option) *apigatewayv2.UpdateRouteResponseOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateRouteResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateRouteResponseInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRouteWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) UpdateRouteWithContext(_a0 context.Context, _a1 *apigatewayv2.UpdateRouteInput, _a2 ...request.Option) (*apigatewayv2.UpdateRouteOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.UpdateRouteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateRouteInput, ...request.Option) (*apigatewayv2.UpdateRouteOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateRouteInput, ...request.Option) *apigatewayv2.UpdateRouteOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateRouteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateRouteInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStage provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateStage(_a0 *apigatewayv2.UpdateStageInput) (*apigatewayv2.UpdateStageOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.UpdateStageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateStageInput) (*apigatewayv2.UpdateStageOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateStageInput) *apigatewayv2.UpdateStageOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateStageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateStageInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStageRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateStageRequest(_a0 *apigatewayv2.UpdateStageInput) (*request.Request, *apigatewayv2.UpdateStageOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.UpdateStageOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateStageInput) (*request.Request, *apigatewayv2.UpdateStageOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateStageInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateStageInput) *apigatewayv2.UpdateStageOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.UpdateStageOutput)
		}
	}

	return r0, r1
}

// UpdateStageWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) UpdateStageWithContext(_a0 context.Context, _a1 *apigatewayv2.UpdateStageInput, _a2 ...request.Option) (*apigatewayv2.UpdateStageOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.UpdateStageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateStageInput, ...request.Option) (*apigatewayv2.UpdateStageOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateStageInput, ...request.Option) *apigatewayv2.UpdateStageOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateStageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateStageInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVpcLink provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateVpcLink(_a0 *apigatewayv2.UpdateVpcLinkInput) (*apigatewayv2.UpdateVpcLinkOutput, error) {
	ret := _m.Called(_a0)

	var r0 *apigatewayv2.UpdateVpcLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateVpcLinkInput) (*apigatewayv2.UpdateVpcLinkOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateVpcLinkInput) *apigatewayv2.UpdateVpcLinkOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateVpcLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateVpcLinkInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVpcLinkRequest provides a mock function with given fields: _a0
func (_m *MockFakeApiGatewayV2) UpdateVpcLinkRequest(_a0 *apigatewayv2.UpdateVpcLinkInput) (*request.Request, *apigatewayv2.UpdateVpcLinkOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *apigatewayv2.UpdateVpcLinkOutput
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateVpcLinkInput) (*request.Request, *apigatewayv2.UpdateVpcLinkOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*apigatewayv2.UpdateVpcLinkInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*apigatewayv2.UpdateVpcLinkInput) *apigatewayv2.UpdateVpcLinkOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apigatewayv2.UpdateVpcLinkOutput)
		}
	}

	return r0, r1
}

// UpdateVpcLinkWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeApiGatewayV2) UpdateVpcLinkWithContext(_a0 context.Context, _a1 *apigatewayv2.UpdateVpcLinkInput, _a2 ...request.Option) (*apigatewayv2.UpdateVpcLinkOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apigatewayv2.UpdateVpcLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateVpcLinkInput, ...request.Option) (*apigatewayv2.UpdateVpcLinkOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateVpcLinkInput, ...request.Option) *apigatewayv2.UpdateVpcLinkOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateVpcLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateVpcLinkInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockFakeApiGatewayV2 interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockFakeApiGatewayV2 creates a new instance of MockFakeApiGatewayV2. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockFakeApiGatewayV2(t mockConstructorTestingTNewMockFakeApiGatewayV2) *MockFakeApiGatewayV2 {
	mock := &MockFakeApiGatewayV2{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
