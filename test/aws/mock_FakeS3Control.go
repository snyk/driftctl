// Code generated by mockery v2.28.1. DO NOT EDIT.

package aws

import (
	context "context"

	request "github.com/aws/aws-sdk-go/aws/request"
	mock "github.com/stretchr/testify/mock"

	s3control "github.com/aws/aws-sdk-go/service/s3control"
)

// MockFakeS3Control is an autogenerated mock type for the FakeS3Control type
type MockFakeS3Control struct {
	mock.Mock
}

// CreateAccessPoint provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) CreateAccessPoint(_a0 *s3control.CreateAccessPointInput) (*s3control.CreateAccessPointOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.CreateAccessPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.CreateAccessPointInput) (*s3control.CreateAccessPointOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.CreateAccessPointInput) *s3control.CreateAccessPointOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.CreateAccessPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.CreateAccessPointInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccessPointForObjectLambda provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) CreateAccessPointForObjectLambda(_a0 *s3control.CreateAccessPointForObjectLambdaInput) (*s3control.CreateAccessPointForObjectLambdaOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.CreateAccessPointForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.CreateAccessPointForObjectLambdaInput) (*s3control.CreateAccessPointForObjectLambdaOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.CreateAccessPointForObjectLambdaInput) *s3control.CreateAccessPointForObjectLambdaOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.CreateAccessPointForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.CreateAccessPointForObjectLambdaInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccessPointForObjectLambdaRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) CreateAccessPointForObjectLambdaRequest(_a0 *s3control.CreateAccessPointForObjectLambdaInput) (*request.Request, *s3control.CreateAccessPointForObjectLambdaOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.CreateAccessPointForObjectLambdaOutput
	if rf, ok := ret.Get(0).(func(*s3control.CreateAccessPointForObjectLambdaInput) (*request.Request, *s3control.CreateAccessPointForObjectLambdaOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.CreateAccessPointForObjectLambdaInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.CreateAccessPointForObjectLambdaInput) *s3control.CreateAccessPointForObjectLambdaOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.CreateAccessPointForObjectLambdaOutput)
		}
	}

	return r0, r1
}

// CreateAccessPointForObjectLambdaWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) CreateAccessPointForObjectLambdaWithContext(_a0 context.Context, _a1 *s3control.CreateAccessPointForObjectLambdaInput, _a2 ...request.Option) (*s3control.CreateAccessPointForObjectLambdaOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.CreateAccessPointForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateAccessPointForObjectLambdaInput, ...request.Option) (*s3control.CreateAccessPointForObjectLambdaOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateAccessPointForObjectLambdaInput, ...request.Option) *s3control.CreateAccessPointForObjectLambdaOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.CreateAccessPointForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.CreateAccessPointForObjectLambdaInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccessPointRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) CreateAccessPointRequest(_a0 *s3control.CreateAccessPointInput) (*request.Request, *s3control.CreateAccessPointOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.CreateAccessPointOutput
	if rf, ok := ret.Get(0).(func(*s3control.CreateAccessPointInput) (*request.Request, *s3control.CreateAccessPointOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.CreateAccessPointInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.CreateAccessPointInput) *s3control.CreateAccessPointOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.CreateAccessPointOutput)
		}
	}

	return r0, r1
}

// CreateAccessPointWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) CreateAccessPointWithContext(_a0 context.Context, _a1 *s3control.CreateAccessPointInput, _a2 ...request.Option) (*s3control.CreateAccessPointOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.CreateAccessPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateAccessPointInput, ...request.Option) (*s3control.CreateAccessPointOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateAccessPointInput, ...request.Option) *s3control.CreateAccessPointOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.CreateAccessPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.CreateAccessPointInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBucket provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) CreateBucket(_a0 *s3control.CreateBucketInput) (*s3control.CreateBucketOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.CreateBucketOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.CreateBucketInput) (*s3control.CreateBucketOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.CreateBucketInput) *s3control.CreateBucketOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.CreateBucketOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.CreateBucketInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBucketRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) CreateBucketRequest(_a0 *s3control.CreateBucketInput) (*request.Request, *s3control.CreateBucketOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.CreateBucketOutput
	if rf, ok := ret.Get(0).(func(*s3control.CreateBucketInput) (*request.Request, *s3control.CreateBucketOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.CreateBucketInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.CreateBucketInput) *s3control.CreateBucketOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.CreateBucketOutput)
		}
	}

	return r0, r1
}

// CreateBucketWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) CreateBucketWithContext(_a0 context.Context, _a1 *s3control.CreateBucketInput, _a2 ...request.Option) (*s3control.CreateBucketOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.CreateBucketOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateBucketInput, ...request.Option) (*s3control.CreateBucketOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateBucketInput, ...request.Option) *s3control.CreateBucketOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.CreateBucketOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.CreateBucketInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJob provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) CreateJob(_a0 *s3control.CreateJobInput) (*s3control.CreateJobOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.CreateJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.CreateJobInput) (*s3control.CreateJobOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.CreateJobInput) *s3control.CreateJobOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.CreateJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.CreateJobInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJobRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) CreateJobRequest(_a0 *s3control.CreateJobInput) (*request.Request, *s3control.CreateJobOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.CreateJobOutput
	if rf, ok := ret.Get(0).(func(*s3control.CreateJobInput) (*request.Request, *s3control.CreateJobOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.CreateJobInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.CreateJobInput) *s3control.CreateJobOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.CreateJobOutput)
		}
	}

	return r0, r1
}

// CreateJobWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) CreateJobWithContext(_a0 context.Context, _a1 *s3control.CreateJobInput, _a2 ...request.Option) (*s3control.CreateJobOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.CreateJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateJobInput, ...request.Option) (*s3control.CreateJobOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateJobInput, ...request.Option) *s3control.CreateJobOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.CreateJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.CreateJobInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMultiRegionAccessPoint provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) CreateMultiRegionAccessPoint(_a0 *s3control.CreateMultiRegionAccessPointInput) (*s3control.CreateMultiRegionAccessPointOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.CreateMultiRegionAccessPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.CreateMultiRegionAccessPointInput) (*s3control.CreateMultiRegionAccessPointOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.CreateMultiRegionAccessPointInput) *s3control.CreateMultiRegionAccessPointOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.CreateMultiRegionAccessPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.CreateMultiRegionAccessPointInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMultiRegionAccessPointRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) CreateMultiRegionAccessPointRequest(_a0 *s3control.CreateMultiRegionAccessPointInput) (*request.Request, *s3control.CreateMultiRegionAccessPointOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.CreateMultiRegionAccessPointOutput
	if rf, ok := ret.Get(0).(func(*s3control.CreateMultiRegionAccessPointInput) (*request.Request, *s3control.CreateMultiRegionAccessPointOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.CreateMultiRegionAccessPointInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.CreateMultiRegionAccessPointInput) *s3control.CreateMultiRegionAccessPointOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.CreateMultiRegionAccessPointOutput)
		}
	}

	return r0, r1
}

// CreateMultiRegionAccessPointWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) CreateMultiRegionAccessPointWithContext(_a0 context.Context, _a1 *s3control.CreateMultiRegionAccessPointInput, _a2 ...request.Option) (*s3control.CreateMultiRegionAccessPointOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.CreateMultiRegionAccessPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateMultiRegionAccessPointInput, ...request.Option) (*s3control.CreateMultiRegionAccessPointOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateMultiRegionAccessPointInput, ...request.Option) *s3control.CreateMultiRegionAccessPointOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.CreateMultiRegionAccessPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.CreateMultiRegionAccessPointInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessPoint provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteAccessPoint(_a0 *s3control.DeleteAccessPointInput) (*s3control.DeleteAccessPointOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.DeleteAccessPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.DeleteAccessPointInput) (*s3control.DeleteAccessPointOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteAccessPointInput) *s3control.DeleteAccessPointOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteAccessPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteAccessPointInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessPointForObjectLambda provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteAccessPointForObjectLambda(_a0 *s3control.DeleteAccessPointForObjectLambdaInput) (*s3control.DeleteAccessPointForObjectLambdaOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.DeleteAccessPointForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.DeleteAccessPointForObjectLambdaInput) (*s3control.DeleteAccessPointForObjectLambdaOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteAccessPointForObjectLambdaInput) *s3control.DeleteAccessPointForObjectLambdaOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteAccessPointForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteAccessPointForObjectLambdaInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessPointForObjectLambdaRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteAccessPointForObjectLambdaRequest(_a0 *s3control.DeleteAccessPointForObjectLambdaInput) (*request.Request, *s3control.DeleteAccessPointForObjectLambdaOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.DeleteAccessPointForObjectLambdaOutput
	if rf, ok := ret.Get(0).(func(*s3control.DeleteAccessPointForObjectLambdaInput) (*request.Request, *s3control.DeleteAccessPointForObjectLambdaOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteAccessPointForObjectLambdaInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteAccessPointForObjectLambdaInput) *s3control.DeleteAccessPointForObjectLambdaOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.DeleteAccessPointForObjectLambdaOutput)
		}
	}

	return r0, r1
}

// DeleteAccessPointForObjectLambdaWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) DeleteAccessPointForObjectLambdaWithContext(_a0 context.Context, _a1 *s3control.DeleteAccessPointForObjectLambdaInput, _a2 ...request.Option) (*s3control.DeleteAccessPointForObjectLambdaOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.DeleteAccessPointForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessPointForObjectLambdaInput, ...request.Option) (*s3control.DeleteAccessPointForObjectLambdaOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessPointForObjectLambdaInput, ...request.Option) *s3control.DeleteAccessPointForObjectLambdaOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteAccessPointForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteAccessPointForObjectLambdaInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessPointPolicy provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteAccessPointPolicy(_a0 *s3control.DeleteAccessPointPolicyInput) (*s3control.DeleteAccessPointPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.DeleteAccessPointPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.DeleteAccessPointPolicyInput) (*s3control.DeleteAccessPointPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteAccessPointPolicyInput) *s3control.DeleteAccessPointPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteAccessPointPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteAccessPointPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessPointPolicyForObjectLambda provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteAccessPointPolicyForObjectLambda(_a0 *s3control.DeleteAccessPointPolicyForObjectLambdaInput) (*s3control.DeleteAccessPointPolicyForObjectLambdaOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.DeleteAccessPointPolicyForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.DeleteAccessPointPolicyForObjectLambdaInput) (*s3control.DeleteAccessPointPolicyForObjectLambdaOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteAccessPointPolicyForObjectLambdaInput) *s3control.DeleteAccessPointPolicyForObjectLambdaOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteAccessPointPolicyForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteAccessPointPolicyForObjectLambdaInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessPointPolicyForObjectLambdaRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteAccessPointPolicyForObjectLambdaRequest(_a0 *s3control.DeleteAccessPointPolicyForObjectLambdaInput) (*request.Request, *s3control.DeleteAccessPointPolicyForObjectLambdaOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.DeleteAccessPointPolicyForObjectLambdaOutput
	if rf, ok := ret.Get(0).(func(*s3control.DeleteAccessPointPolicyForObjectLambdaInput) (*request.Request, *s3control.DeleteAccessPointPolicyForObjectLambdaOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteAccessPointPolicyForObjectLambdaInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteAccessPointPolicyForObjectLambdaInput) *s3control.DeleteAccessPointPolicyForObjectLambdaOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.DeleteAccessPointPolicyForObjectLambdaOutput)
		}
	}

	return r0, r1
}

// DeleteAccessPointPolicyForObjectLambdaWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) DeleteAccessPointPolicyForObjectLambdaWithContext(_a0 context.Context, _a1 *s3control.DeleteAccessPointPolicyForObjectLambdaInput, _a2 ...request.Option) (*s3control.DeleteAccessPointPolicyForObjectLambdaOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.DeleteAccessPointPolicyForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessPointPolicyForObjectLambdaInput, ...request.Option) (*s3control.DeleteAccessPointPolicyForObjectLambdaOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessPointPolicyForObjectLambdaInput, ...request.Option) *s3control.DeleteAccessPointPolicyForObjectLambdaOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteAccessPointPolicyForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteAccessPointPolicyForObjectLambdaInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessPointPolicyRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteAccessPointPolicyRequest(_a0 *s3control.DeleteAccessPointPolicyInput) (*request.Request, *s3control.DeleteAccessPointPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.DeleteAccessPointPolicyOutput
	if rf, ok := ret.Get(0).(func(*s3control.DeleteAccessPointPolicyInput) (*request.Request, *s3control.DeleteAccessPointPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteAccessPointPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteAccessPointPolicyInput) *s3control.DeleteAccessPointPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.DeleteAccessPointPolicyOutput)
		}
	}

	return r0, r1
}

// DeleteAccessPointPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) DeleteAccessPointPolicyWithContext(_a0 context.Context, _a1 *s3control.DeleteAccessPointPolicyInput, _a2 ...request.Option) (*s3control.DeleteAccessPointPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.DeleteAccessPointPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessPointPolicyInput, ...request.Option) (*s3control.DeleteAccessPointPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessPointPolicyInput, ...request.Option) *s3control.DeleteAccessPointPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteAccessPointPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteAccessPointPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessPointRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteAccessPointRequest(_a0 *s3control.DeleteAccessPointInput) (*request.Request, *s3control.DeleteAccessPointOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.DeleteAccessPointOutput
	if rf, ok := ret.Get(0).(func(*s3control.DeleteAccessPointInput) (*request.Request, *s3control.DeleteAccessPointOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteAccessPointInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteAccessPointInput) *s3control.DeleteAccessPointOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.DeleteAccessPointOutput)
		}
	}

	return r0, r1
}

// DeleteAccessPointWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) DeleteAccessPointWithContext(_a0 context.Context, _a1 *s3control.DeleteAccessPointInput, _a2 ...request.Option) (*s3control.DeleteAccessPointOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.DeleteAccessPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessPointInput, ...request.Option) (*s3control.DeleteAccessPointOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessPointInput, ...request.Option) *s3control.DeleteAccessPointOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteAccessPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteAccessPointInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBucket provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteBucket(_a0 *s3control.DeleteBucketInput) (*s3control.DeleteBucketOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.DeleteBucketOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.DeleteBucketInput) (*s3control.DeleteBucketOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteBucketInput) *s3control.DeleteBucketOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteBucketOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteBucketInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBucketLifecycleConfiguration provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteBucketLifecycleConfiguration(_a0 *s3control.DeleteBucketLifecycleConfigurationInput) (*s3control.DeleteBucketLifecycleConfigurationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.DeleteBucketLifecycleConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.DeleteBucketLifecycleConfigurationInput) (*s3control.DeleteBucketLifecycleConfigurationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteBucketLifecycleConfigurationInput) *s3control.DeleteBucketLifecycleConfigurationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteBucketLifecycleConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteBucketLifecycleConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBucketLifecycleConfigurationRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteBucketLifecycleConfigurationRequest(_a0 *s3control.DeleteBucketLifecycleConfigurationInput) (*request.Request, *s3control.DeleteBucketLifecycleConfigurationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.DeleteBucketLifecycleConfigurationOutput
	if rf, ok := ret.Get(0).(func(*s3control.DeleteBucketLifecycleConfigurationInput) (*request.Request, *s3control.DeleteBucketLifecycleConfigurationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteBucketLifecycleConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteBucketLifecycleConfigurationInput) *s3control.DeleteBucketLifecycleConfigurationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.DeleteBucketLifecycleConfigurationOutput)
		}
	}

	return r0, r1
}

// DeleteBucketLifecycleConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) DeleteBucketLifecycleConfigurationWithContext(_a0 context.Context, _a1 *s3control.DeleteBucketLifecycleConfigurationInput, _a2 ...request.Option) (*s3control.DeleteBucketLifecycleConfigurationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.DeleteBucketLifecycleConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteBucketLifecycleConfigurationInput, ...request.Option) (*s3control.DeleteBucketLifecycleConfigurationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteBucketLifecycleConfigurationInput, ...request.Option) *s3control.DeleteBucketLifecycleConfigurationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteBucketLifecycleConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteBucketLifecycleConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBucketPolicy provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteBucketPolicy(_a0 *s3control.DeleteBucketPolicyInput) (*s3control.DeleteBucketPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.DeleteBucketPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.DeleteBucketPolicyInput) (*s3control.DeleteBucketPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteBucketPolicyInput) *s3control.DeleteBucketPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteBucketPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteBucketPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBucketPolicyRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteBucketPolicyRequest(_a0 *s3control.DeleteBucketPolicyInput) (*request.Request, *s3control.DeleteBucketPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.DeleteBucketPolicyOutput
	if rf, ok := ret.Get(0).(func(*s3control.DeleteBucketPolicyInput) (*request.Request, *s3control.DeleteBucketPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteBucketPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteBucketPolicyInput) *s3control.DeleteBucketPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.DeleteBucketPolicyOutput)
		}
	}

	return r0, r1
}

// DeleteBucketPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) DeleteBucketPolicyWithContext(_a0 context.Context, _a1 *s3control.DeleteBucketPolicyInput, _a2 ...request.Option) (*s3control.DeleteBucketPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.DeleteBucketPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteBucketPolicyInput, ...request.Option) (*s3control.DeleteBucketPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteBucketPolicyInput, ...request.Option) *s3control.DeleteBucketPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteBucketPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteBucketPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBucketRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteBucketRequest(_a0 *s3control.DeleteBucketInput) (*request.Request, *s3control.DeleteBucketOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.DeleteBucketOutput
	if rf, ok := ret.Get(0).(func(*s3control.DeleteBucketInput) (*request.Request, *s3control.DeleteBucketOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteBucketInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteBucketInput) *s3control.DeleteBucketOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.DeleteBucketOutput)
		}
	}

	return r0, r1
}

// DeleteBucketTagging provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteBucketTagging(_a0 *s3control.DeleteBucketTaggingInput) (*s3control.DeleteBucketTaggingOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.DeleteBucketTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.DeleteBucketTaggingInput) (*s3control.DeleteBucketTaggingOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteBucketTaggingInput) *s3control.DeleteBucketTaggingOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteBucketTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteBucketTaggingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBucketTaggingRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteBucketTaggingRequest(_a0 *s3control.DeleteBucketTaggingInput) (*request.Request, *s3control.DeleteBucketTaggingOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.DeleteBucketTaggingOutput
	if rf, ok := ret.Get(0).(func(*s3control.DeleteBucketTaggingInput) (*request.Request, *s3control.DeleteBucketTaggingOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteBucketTaggingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteBucketTaggingInput) *s3control.DeleteBucketTaggingOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.DeleteBucketTaggingOutput)
		}
	}

	return r0, r1
}

// DeleteBucketTaggingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) DeleteBucketTaggingWithContext(_a0 context.Context, _a1 *s3control.DeleteBucketTaggingInput, _a2 ...request.Option) (*s3control.DeleteBucketTaggingOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.DeleteBucketTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteBucketTaggingInput, ...request.Option) (*s3control.DeleteBucketTaggingOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteBucketTaggingInput, ...request.Option) *s3control.DeleteBucketTaggingOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteBucketTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteBucketTaggingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBucketWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) DeleteBucketWithContext(_a0 context.Context, _a1 *s3control.DeleteBucketInput, _a2 ...request.Option) (*s3control.DeleteBucketOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.DeleteBucketOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteBucketInput, ...request.Option) (*s3control.DeleteBucketOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteBucketInput, ...request.Option) *s3control.DeleteBucketOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteBucketOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteBucketInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJobTagging provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteJobTagging(_a0 *s3control.DeleteJobTaggingInput) (*s3control.DeleteJobTaggingOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.DeleteJobTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.DeleteJobTaggingInput) (*s3control.DeleteJobTaggingOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteJobTaggingInput) *s3control.DeleteJobTaggingOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteJobTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteJobTaggingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJobTaggingRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteJobTaggingRequest(_a0 *s3control.DeleteJobTaggingInput) (*request.Request, *s3control.DeleteJobTaggingOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.DeleteJobTaggingOutput
	if rf, ok := ret.Get(0).(func(*s3control.DeleteJobTaggingInput) (*request.Request, *s3control.DeleteJobTaggingOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteJobTaggingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteJobTaggingInput) *s3control.DeleteJobTaggingOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.DeleteJobTaggingOutput)
		}
	}

	return r0, r1
}

// DeleteJobTaggingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) DeleteJobTaggingWithContext(_a0 context.Context, _a1 *s3control.DeleteJobTaggingInput, _a2 ...request.Option) (*s3control.DeleteJobTaggingOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.DeleteJobTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteJobTaggingInput, ...request.Option) (*s3control.DeleteJobTaggingOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteJobTaggingInput, ...request.Option) *s3control.DeleteJobTaggingOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteJobTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteJobTaggingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMultiRegionAccessPoint provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteMultiRegionAccessPoint(_a0 *s3control.DeleteMultiRegionAccessPointInput) (*s3control.DeleteMultiRegionAccessPointOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.DeleteMultiRegionAccessPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.DeleteMultiRegionAccessPointInput) (*s3control.DeleteMultiRegionAccessPointOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteMultiRegionAccessPointInput) *s3control.DeleteMultiRegionAccessPointOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteMultiRegionAccessPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteMultiRegionAccessPointInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMultiRegionAccessPointRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteMultiRegionAccessPointRequest(_a0 *s3control.DeleteMultiRegionAccessPointInput) (*request.Request, *s3control.DeleteMultiRegionAccessPointOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.DeleteMultiRegionAccessPointOutput
	if rf, ok := ret.Get(0).(func(*s3control.DeleteMultiRegionAccessPointInput) (*request.Request, *s3control.DeleteMultiRegionAccessPointOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteMultiRegionAccessPointInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteMultiRegionAccessPointInput) *s3control.DeleteMultiRegionAccessPointOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.DeleteMultiRegionAccessPointOutput)
		}
	}

	return r0, r1
}

// DeleteMultiRegionAccessPointWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) DeleteMultiRegionAccessPointWithContext(_a0 context.Context, _a1 *s3control.DeleteMultiRegionAccessPointInput, _a2 ...request.Option) (*s3control.DeleteMultiRegionAccessPointOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.DeleteMultiRegionAccessPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteMultiRegionAccessPointInput, ...request.Option) (*s3control.DeleteMultiRegionAccessPointOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteMultiRegionAccessPointInput, ...request.Option) *s3control.DeleteMultiRegionAccessPointOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteMultiRegionAccessPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteMultiRegionAccessPointInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePublicAccessBlock provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeletePublicAccessBlock(_a0 *s3control.DeletePublicAccessBlockInput) (*s3control.DeletePublicAccessBlockOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.DeletePublicAccessBlockOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.DeletePublicAccessBlockInput) (*s3control.DeletePublicAccessBlockOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeletePublicAccessBlockInput) *s3control.DeletePublicAccessBlockOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeletePublicAccessBlockOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeletePublicAccessBlockInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePublicAccessBlockRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeletePublicAccessBlockRequest(_a0 *s3control.DeletePublicAccessBlockInput) (*request.Request, *s3control.DeletePublicAccessBlockOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.DeletePublicAccessBlockOutput
	if rf, ok := ret.Get(0).(func(*s3control.DeletePublicAccessBlockInput) (*request.Request, *s3control.DeletePublicAccessBlockOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeletePublicAccessBlockInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeletePublicAccessBlockInput) *s3control.DeletePublicAccessBlockOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.DeletePublicAccessBlockOutput)
		}
	}

	return r0, r1
}

// DeletePublicAccessBlockWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) DeletePublicAccessBlockWithContext(_a0 context.Context, _a1 *s3control.DeletePublicAccessBlockInput, _a2 ...request.Option) (*s3control.DeletePublicAccessBlockOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.DeletePublicAccessBlockOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeletePublicAccessBlockInput, ...request.Option) (*s3control.DeletePublicAccessBlockOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeletePublicAccessBlockInput, ...request.Option) *s3control.DeletePublicAccessBlockOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeletePublicAccessBlockOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeletePublicAccessBlockInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStorageLensConfiguration provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteStorageLensConfiguration(_a0 *s3control.DeleteStorageLensConfigurationInput) (*s3control.DeleteStorageLensConfigurationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.DeleteStorageLensConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.DeleteStorageLensConfigurationInput) (*s3control.DeleteStorageLensConfigurationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteStorageLensConfigurationInput) *s3control.DeleteStorageLensConfigurationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteStorageLensConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteStorageLensConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStorageLensConfigurationRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteStorageLensConfigurationRequest(_a0 *s3control.DeleteStorageLensConfigurationInput) (*request.Request, *s3control.DeleteStorageLensConfigurationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.DeleteStorageLensConfigurationOutput
	if rf, ok := ret.Get(0).(func(*s3control.DeleteStorageLensConfigurationInput) (*request.Request, *s3control.DeleteStorageLensConfigurationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteStorageLensConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteStorageLensConfigurationInput) *s3control.DeleteStorageLensConfigurationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.DeleteStorageLensConfigurationOutput)
		}
	}

	return r0, r1
}

// DeleteStorageLensConfigurationTagging provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteStorageLensConfigurationTagging(_a0 *s3control.DeleteStorageLensConfigurationTaggingInput) (*s3control.DeleteStorageLensConfigurationTaggingOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.DeleteStorageLensConfigurationTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.DeleteStorageLensConfigurationTaggingInput) (*s3control.DeleteStorageLensConfigurationTaggingOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteStorageLensConfigurationTaggingInput) *s3control.DeleteStorageLensConfigurationTaggingOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteStorageLensConfigurationTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteStorageLensConfigurationTaggingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStorageLensConfigurationTaggingRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DeleteStorageLensConfigurationTaggingRequest(_a0 *s3control.DeleteStorageLensConfigurationTaggingInput) (*request.Request, *s3control.DeleteStorageLensConfigurationTaggingOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.DeleteStorageLensConfigurationTaggingOutput
	if rf, ok := ret.Get(0).(func(*s3control.DeleteStorageLensConfigurationTaggingInput) (*request.Request, *s3control.DeleteStorageLensConfigurationTaggingOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DeleteStorageLensConfigurationTaggingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DeleteStorageLensConfigurationTaggingInput) *s3control.DeleteStorageLensConfigurationTaggingOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.DeleteStorageLensConfigurationTaggingOutput)
		}
	}

	return r0, r1
}

// DeleteStorageLensConfigurationTaggingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) DeleteStorageLensConfigurationTaggingWithContext(_a0 context.Context, _a1 *s3control.DeleteStorageLensConfigurationTaggingInput, _a2 ...request.Option) (*s3control.DeleteStorageLensConfigurationTaggingOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.DeleteStorageLensConfigurationTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteStorageLensConfigurationTaggingInput, ...request.Option) (*s3control.DeleteStorageLensConfigurationTaggingOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteStorageLensConfigurationTaggingInput, ...request.Option) *s3control.DeleteStorageLensConfigurationTaggingOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteStorageLensConfigurationTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteStorageLensConfigurationTaggingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStorageLensConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) DeleteStorageLensConfigurationWithContext(_a0 context.Context, _a1 *s3control.DeleteStorageLensConfigurationInput, _a2 ...request.Option) (*s3control.DeleteStorageLensConfigurationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.DeleteStorageLensConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteStorageLensConfigurationInput, ...request.Option) (*s3control.DeleteStorageLensConfigurationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteStorageLensConfigurationInput, ...request.Option) *s3control.DeleteStorageLensConfigurationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteStorageLensConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteStorageLensConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeJob provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DescribeJob(_a0 *s3control.DescribeJobInput) (*s3control.DescribeJobOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.DescribeJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.DescribeJobInput) (*s3control.DescribeJobOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DescribeJobInput) *s3control.DescribeJobOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DescribeJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DescribeJobInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeJobRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DescribeJobRequest(_a0 *s3control.DescribeJobInput) (*request.Request, *s3control.DescribeJobOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.DescribeJobOutput
	if rf, ok := ret.Get(0).(func(*s3control.DescribeJobInput) (*request.Request, *s3control.DescribeJobOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DescribeJobInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DescribeJobInput) *s3control.DescribeJobOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.DescribeJobOutput)
		}
	}

	return r0, r1
}

// DescribeJobWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) DescribeJobWithContext(_a0 context.Context, _a1 *s3control.DescribeJobInput, _a2 ...request.Option) (*s3control.DescribeJobOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.DescribeJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DescribeJobInput, ...request.Option) (*s3control.DescribeJobOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DescribeJobInput, ...request.Option) *s3control.DescribeJobOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DescribeJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DescribeJobInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMultiRegionAccessPointOperation provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DescribeMultiRegionAccessPointOperation(_a0 *s3control.DescribeMultiRegionAccessPointOperationInput) (*s3control.DescribeMultiRegionAccessPointOperationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.DescribeMultiRegionAccessPointOperationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.DescribeMultiRegionAccessPointOperationInput) (*s3control.DescribeMultiRegionAccessPointOperationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DescribeMultiRegionAccessPointOperationInput) *s3control.DescribeMultiRegionAccessPointOperationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DescribeMultiRegionAccessPointOperationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DescribeMultiRegionAccessPointOperationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMultiRegionAccessPointOperationRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) DescribeMultiRegionAccessPointOperationRequest(_a0 *s3control.DescribeMultiRegionAccessPointOperationInput) (*request.Request, *s3control.DescribeMultiRegionAccessPointOperationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.DescribeMultiRegionAccessPointOperationOutput
	if rf, ok := ret.Get(0).(func(*s3control.DescribeMultiRegionAccessPointOperationInput) (*request.Request, *s3control.DescribeMultiRegionAccessPointOperationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.DescribeMultiRegionAccessPointOperationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.DescribeMultiRegionAccessPointOperationInput) *s3control.DescribeMultiRegionAccessPointOperationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.DescribeMultiRegionAccessPointOperationOutput)
		}
	}

	return r0, r1
}

// DescribeMultiRegionAccessPointOperationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) DescribeMultiRegionAccessPointOperationWithContext(_a0 context.Context, _a1 *s3control.DescribeMultiRegionAccessPointOperationInput, _a2 ...request.Option) (*s3control.DescribeMultiRegionAccessPointOperationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.DescribeMultiRegionAccessPointOperationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DescribeMultiRegionAccessPointOperationInput, ...request.Option) (*s3control.DescribeMultiRegionAccessPointOperationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DescribeMultiRegionAccessPointOperationInput, ...request.Option) *s3control.DescribeMultiRegionAccessPointOperationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DescribeMultiRegionAccessPointOperationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DescribeMultiRegionAccessPointOperationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessPoint provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetAccessPoint(_a0 *s3control.GetAccessPointInput) (*s3control.GetAccessPointOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.GetAccessPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointInput) (*s3control.GetAccessPointOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointInput) *s3control.GetAccessPointOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetAccessPointInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessPointConfigurationForObjectLambda provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetAccessPointConfigurationForObjectLambda(_a0 *s3control.GetAccessPointConfigurationForObjectLambdaInput) (*s3control.GetAccessPointConfigurationForObjectLambdaOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.GetAccessPointConfigurationForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointConfigurationForObjectLambdaInput) (*s3control.GetAccessPointConfigurationForObjectLambdaOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointConfigurationForObjectLambdaInput) *s3control.GetAccessPointConfigurationForObjectLambdaOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessPointConfigurationForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetAccessPointConfigurationForObjectLambdaInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessPointConfigurationForObjectLambdaRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetAccessPointConfigurationForObjectLambdaRequest(_a0 *s3control.GetAccessPointConfigurationForObjectLambdaInput) (*request.Request, *s3control.GetAccessPointConfigurationForObjectLambdaOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.GetAccessPointConfigurationForObjectLambdaOutput
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointConfigurationForObjectLambdaInput) (*request.Request, *s3control.GetAccessPointConfigurationForObjectLambdaOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointConfigurationForObjectLambdaInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetAccessPointConfigurationForObjectLambdaInput) *s3control.GetAccessPointConfigurationForObjectLambdaOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.GetAccessPointConfigurationForObjectLambdaOutput)
		}
	}

	return r0, r1
}

// GetAccessPointConfigurationForObjectLambdaWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) GetAccessPointConfigurationForObjectLambdaWithContext(_a0 context.Context, _a1 *s3control.GetAccessPointConfigurationForObjectLambdaInput, _a2 ...request.Option) (*s3control.GetAccessPointConfigurationForObjectLambdaOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.GetAccessPointConfigurationForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointConfigurationForObjectLambdaInput, ...request.Option) (*s3control.GetAccessPointConfigurationForObjectLambdaOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointConfigurationForObjectLambdaInput, ...request.Option) *s3control.GetAccessPointConfigurationForObjectLambdaOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessPointConfigurationForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetAccessPointConfigurationForObjectLambdaInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessPointForObjectLambda provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetAccessPointForObjectLambda(_a0 *s3control.GetAccessPointForObjectLambdaInput) (*s3control.GetAccessPointForObjectLambdaOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.GetAccessPointForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointForObjectLambdaInput) (*s3control.GetAccessPointForObjectLambdaOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointForObjectLambdaInput) *s3control.GetAccessPointForObjectLambdaOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessPointForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetAccessPointForObjectLambdaInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessPointForObjectLambdaRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetAccessPointForObjectLambdaRequest(_a0 *s3control.GetAccessPointForObjectLambdaInput) (*request.Request, *s3control.GetAccessPointForObjectLambdaOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.GetAccessPointForObjectLambdaOutput
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointForObjectLambdaInput) (*request.Request, *s3control.GetAccessPointForObjectLambdaOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointForObjectLambdaInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetAccessPointForObjectLambdaInput) *s3control.GetAccessPointForObjectLambdaOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.GetAccessPointForObjectLambdaOutput)
		}
	}

	return r0, r1
}

// GetAccessPointForObjectLambdaWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) GetAccessPointForObjectLambdaWithContext(_a0 context.Context, _a1 *s3control.GetAccessPointForObjectLambdaInput, _a2 ...request.Option) (*s3control.GetAccessPointForObjectLambdaOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.GetAccessPointForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointForObjectLambdaInput, ...request.Option) (*s3control.GetAccessPointForObjectLambdaOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointForObjectLambdaInput, ...request.Option) *s3control.GetAccessPointForObjectLambdaOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessPointForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetAccessPointForObjectLambdaInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessPointPolicy provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetAccessPointPolicy(_a0 *s3control.GetAccessPointPolicyInput) (*s3control.GetAccessPointPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.GetAccessPointPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointPolicyInput) (*s3control.GetAccessPointPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointPolicyInput) *s3control.GetAccessPointPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessPointPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetAccessPointPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessPointPolicyForObjectLambda provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetAccessPointPolicyForObjectLambda(_a0 *s3control.GetAccessPointPolicyForObjectLambdaInput) (*s3control.GetAccessPointPolicyForObjectLambdaOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.GetAccessPointPolicyForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointPolicyForObjectLambdaInput) (*s3control.GetAccessPointPolicyForObjectLambdaOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointPolicyForObjectLambdaInput) *s3control.GetAccessPointPolicyForObjectLambdaOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessPointPolicyForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetAccessPointPolicyForObjectLambdaInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessPointPolicyForObjectLambdaRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetAccessPointPolicyForObjectLambdaRequest(_a0 *s3control.GetAccessPointPolicyForObjectLambdaInput) (*request.Request, *s3control.GetAccessPointPolicyForObjectLambdaOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.GetAccessPointPolicyForObjectLambdaOutput
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointPolicyForObjectLambdaInput) (*request.Request, *s3control.GetAccessPointPolicyForObjectLambdaOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointPolicyForObjectLambdaInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetAccessPointPolicyForObjectLambdaInput) *s3control.GetAccessPointPolicyForObjectLambdaOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.GetAccessPointPolicyForObjectLambdaOutput)
		}
	}

	return r0, r1
}

// GetAccessPointPolicyForObjectLambdaWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) GetAccessPointPolicyForObjectLambdaWithContext(_a0 context.Context, _a1 *s3control.GetAccessPointPolicyForObjectLambdaInput, _a2 ...request.Option) (*s3control.GetAccessPointPolicyForObjectLambdaOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.GetAccessPointPolicyForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointPolicyForObjectLambdaInput, ...request.Option) (*s3control.GetAccessPointPolicyForObjectLambdaOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointPolicyForObjectLambdaInput, ...request.Option) *s3control.GetAccessPointPolicyForObjectLambdaOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessPointPolicyForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetAccessPointPolicyForObjectLambdaInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessPointPolicyRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetAccessPointPolicyRequest(_a0 *s3control.GetAccessPointPolicyInput) (*request.Request, *s3control.GetAccessPointPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.GetAccessPointPolicyOutput
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointPolicyInput) (*request.Request, *s3control.GetAccessPointPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetAccessPointPolicyInput) *s3control.GetAccessPointPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.GetAccessPointPolicyOutput)
		}
	}

	return r0, r1
}

// GetAccessPointPolicyStatus provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetAccessPointPolicyStatus(_a0 *s3control.GetAccessPointPolicyStatusInput) (*s3control.GetAccessPointPolicyStatusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.GetAccessPointPolicyStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointPolicyStatusInput) (*s3control.GetAccessPointPolicyStatusOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointPolicyStatusInput) *s3control.GetAccessPointPolicyStatusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessPointPolicyStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetAccessPointPolicyStatusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessPointPolicyStatusForObjectLambda provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetAccessPointPolicyStatusForObjectLambda(_a0 *s3control.GetAccessPointPolicyStatusForObjectLambdaInput) (*s3control.GetAccessPointPolicyStatusForObjectLambdaOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.GetAccessPointPolicyStatusForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointPolicyStatusForObjectLambdaInput) (*s3control.GetAccessPointPolicyStatusForObjectLambdaOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointPolicyStatusForObjectLambdaInput) *s3control.GetAccessPointPolicyStatusForObjectLambdaOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessPointPolicyStatusForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetAccessPointPolicyStatusForObjectLambdaInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessPointPolicyStatusForObjectLambdaRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetAccessPointPolicyStatusForObjectLambdaRequest(_a0 *s3control.GetAccessPointPolicyStatusForObjectLambdaInput) (*request.Request, *s3control.GetAccessPointPolicyStatusForObjectLambdaOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.GetAccessPointPolicyStatusForObjectLambdaOutput
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointPolicyStatusForObjectLambdaInput) (*request.Request, *s3control.GetAccessPointPolicyStatusForObjectLambdaOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointPolicyStatusForObjectLambdaInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetAccessPointPolicyStatusForObjectLambdaInput) *s3control.GetAccessPointPolicyStatusForObjectLambdaOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.GetAccessPointPolicyStatusForObjectLambdaOutput)
		}
	}

	return r0, r1
}

// GetAccessPointPolicyStatusForObjectLambdaWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) GetAccessPointPolicyStatusForObjectLambdaWithContext(_a0 context.Context, _a1 *s3control.GetAccessPointPolicyStatusForObjectLambdaInput, _a2 ...request.Option) (*s3control.GetAccessPointPolicyStatusForObjectLambdaOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.GetAccessPointPolicyStatusForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointPolicyStatusForObjectLambdaInput, ...request.Option) (*s3control.GetAccessPointPolicyStatusForObjectLambdaOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointPolicyStatusForObjectLambdaInput, ...request.Option) *s3control.GetAccessPointPolicyStatusForObjectLambdaOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessPointPolicyStatusForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetAccessPointPolicyStatusForObjectLambdaInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessPointPolicyStatusRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetAccessPointPolicyStatusRequest(_a0 *s3control.GetAccessPointPolicyStatusInput) (*request.Request, *s3control.GetAccessPointPolicyStatusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.GetAccessPointPolicyStatusOutput
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointPolicyStatusInput) (*request.Request, *s3control.GetAccessPointPolicyStatusOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointPolicyStatusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetAccessPointPolicyStatusInput) *s3control.GetAccessPointPolicyStatusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.GetAccessPointPolicyStatusOutput)
		}
	}

	return r0, r1
}

// GetAccessPointPolicyStatusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) GetAccessPointPolicyStatusWithContext(_a0 context.Context, _a1 *s3control.GetAccessPointPolicyStatusInput, _a2 ...request.Option) (*s3control.GetAccessPointPolicyStatusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.GetAccessPointPolicyStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointPolicyStatusInput, ...request.Option) (*s3control.GetAccessPointPolicyStatusOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointPolicyStatusInput, ...request.Option) *s3control.GetAccessPointPolicyStatusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessPointPolicyStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetAccessPointPolicyStatusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessPointPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) GetAccessPointPolicyWithContext(_a0 context.Context, _a1 *s3control.GetAccessPointPolicyInput, _a2 ...request.Option) (*s3control.GetAccessPointPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.GetAccessPointPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointPolicyInput, ...request.Option) (*s3control.GetAccessPointPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointPolicyInput, ...request.Option) *s3control.GetAccessPointPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessPointPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetAccessPointPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessPointRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetAccessPointRequest(_a0 *s3control.GetAccessPointInput) (*request.Request, *s3control.GetAccessPointOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.GetAccessPointOutput
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointInput) (*request.Request, *s3control.GetAccessPointOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetAccessPointInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetAccessPointInput) *s3control.GetAccessPointOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.GetAccessPointOutput)
		}
	}

	return r0, r1
}

// GetAccessPointWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) GetAccessPointWithContext(_a0 context.Context, _a1 *s3control.GetAccessPointInput, _a2 ...request.Option) (*s3control.GetAccessPointOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.GetAccessPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointInput, ...request.Option) (*s3control.GetAccessPointOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointInput, ...request.Option) *s3control.GetAccessPointOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetAccessPointInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucket provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetBucket(_a0 *s3control.GetBucketInput) (*s3control.GetBucketOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.GetBucketOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.GetBucketInput) (*s3control.GetBucketOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetBucketInput) *s3control.GetBucketOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetBucketOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetBucketInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketLifecycleConfiguration provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetBucketLifecycleConfiguration(_a0 *s3control.GetBucketLifecycleConfigurationInput) (*s3control.GetBucketLifecycleConfigurationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.GetBucketLifecycleConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.GetBucketLifecycleConfigurationInput) (*s3control.GetBucketLifecycleConfigurationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetBucketLifecycleConfigurationInput) *s3control.GetBucketLifecycleConfigurationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetBucketLifecycleConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetBucketLifecycleConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketLifecycleConfigurationRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetBucketLifecycleConfigurationRequest(_a0 *s3control.GetBucketLifecycleConfigurationInput) (*request.Request, *s3control.GetBucketLifecycleConfigurationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.GetBucketLifecycleConfigurationOutput
	if rf, ok := ret.Get(0).(func(*s3control.GetBucketLifecycleConfigurationInput) (*request.Request, *s3control.GetBucketLifecycleConfigurationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetBucketLifecycleConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetBucketLifecycleConfigurationInput) *s3control.GetBucketLifecycleConfigurationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.GetBucketLifecycleConfigurationOutput)
		}
	}

	return r0, r1
}

// GetBucketLifecycleConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) GetBucketLifecycleConfigurationWithContext(_a0 context.Context, _a1 *s3control.GetBucketLifecycleConfigurationInput, _a2 ...request.Option) (*s3control.GetBucketLifecycleConfigurationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.GetBucketLifecycleConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetBucketLifecycleConfigurationInput, ...request.Option) (*s3control.GetBucketLifecycleConfigurationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetBucketLifecycleConfigurationInput, ...request.Option) *s3control.GetBucketLifecycleConfigurationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetBucketLifecycleConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetBucketLifecycleConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketPolicy provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetBucketPolicy(_a0 *s3control.GetBucketPolicyInput) (*s3control.GetBucketPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.GetBucketPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.GetBucketPolicyInput) (*s3control.GetBucketPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetBucketPolicyInput) *s3control.GetBucketPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetBucketPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetBucketPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketPolicyRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetBucketPolicyRequest(_a0 *s3control.GetBucketPolicyInput) (*request.Request, *s3control.GetBucketPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.GetBucketPolicyOutput
	if rf, ok := ret.Get(0).(func(*s3control.GetBucketPolicyInput) (*request.Request, *s3control.GetBucketPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetBucketPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetBucketPolicyInput) *s3control.GetBucketPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.GetBucketPolicyOutput)
		}
	}

	return r0, r1
}

// GetBucketPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) GetBucketPolicyWithContext(_a0 context.Context, _a1 *s3control.GetBucketPolicyInput, _a2 ...request.Option) (*s3control.GetBucketPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.GetBucketPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetBucketPolicyInput, ...request.Option) (*s3control.GetBucketPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetBucketPolicyInput, ...request.Option) *s3control.GetBucketPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetBucketPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetBucketPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetBucketRequest(_a0 *s3control.GetBucketInput) (*request.Request, *s3control.GetBucketOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.GetBucketOutput
	if rf, ok := ret.Get(0).(func(*s3control.GetBucketInput) (*request.Request, *s3control.GetBucketOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetBucketInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetBucketInput) *s3control.GetBucketOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.GetBucketOutput)
		}
	}

	return r0, r1
}

// GetBucketTagging provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetBucketTagging(_a0 *s3control.GetBucketTaggingInput) (*s3control.GetBucketTaggingOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.GetBucketTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.GetBucketTaggingInput) (*s3control.GetBucketTaggingOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetBucketTaggingInput) *s3control.GetBucketTaggingOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetBucketTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetBucketTaggingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketTaggingRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetBucketTaggingRequest(_a0 *s3control.GetBucketTaggingInput) (*request.Request, *s3control.GetBucketTaggingOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.GetBucketTaggingOutput
	if rf, ok := ret.Get(0).(func(*s3control.GetBucketTaggingInput) (*request.Request, *s3control.GetBucketTaggingOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetBucketTaggingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetBucketTaggingInput) *s3control.GetBucketTaggingOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.GetBucketTaggingOutput)
		}
	}

	return r0, r1
}

// GetBucketTaggingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) GetBucketTaggingWithContext(_a0 context.Context, _a1 *s3control.GetBucketTaggingInput, _a2 ...request.Option) (*s3control.GetBucketTaggingOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.GetBucketTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetBucketTaggingInput, ...request.Option) (*s3control.GetBucketTaggingOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetBucketTaggingInput, ...request.Option) *s3control.GetBucketTaggingOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetBucketTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetBucketTaggingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketVersioning provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetBucketVersioning(_a0 *s3control.GetBucketVersioningInput) (*s3control.GetBucketVersioningOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.GetBucketVersioningOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.GetBucketVersioningInput) (*s3control.GetBucketVersioningOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetBucketVersioningInput) *s3control.GetBucketVersioningOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetBucketVersioningOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetBucketVersioningInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketVersioningRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetBucketVersioningRequest(_a0 *s3control.GetBucketVersioningInput) (*request.Request, *s3control.GetBucketVersioningOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.GetBucketVersioningOutput
	if rf, ok := ret.Get(0).(func(*s3control.GetBucketVersioningInput) (*request.Request, *s3control.GetBucketVersioningOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetBucketVersioningInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetBucketVersioningInput) *s3control.GetBucketVersioningOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.GetBucketVersioningOutput)
		}
	}

	return r0, r1
}

// GetBucketVersioningWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) GetBucketVersioningWithContext(_a0 context.Context, _a1 *s3control.GetBucketVersioningInput, _a2 ...request.Option) (*s3control.GetBucketVersioningOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.GetBucketVersioningOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetBucketVersioningInput, ...request.Option) (*s3control.GetBucketVersioningOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetBucketVersioningInput, ...request.Option) *s3control.GetBucketVersioningOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetBucketVersioningOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetBucketVersioningInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) GetBucketWithContext(_a0 context.Context, _a1 *s3control.GetBucketInput, _a2 ...request.Option) (*s3control.GetBucketOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.GetBucketOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetBucketInput, ...request.Option) (*s3control.GetBucketOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetBucketInput, ...request.Option) *s3control.GetBucketOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetBucketOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetBucketInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobTagging provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetJobTagging(_a0 *s3control.GetJobTaggingInput) (*s3control.GetJobTaggingOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.GetJobTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.GetJobTaggingInput) (*s3control.GetJobTaggingOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetJobTaggingInput) *s3control.GetJobTaggingOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetJobTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetJobTaggingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobTaggingRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetJobTaggingRequest(_a0 *s3control.GetJobTaggingInput) (*request.Request, *s3control.GetJobTaggingOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.GetJobTaggingOutput
	if rf, ok := ret.Get(0).(func(*s3control.GetJobTaggingInput) (*request.Request, *s3control.GetJobTaggingOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetJobTaggingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetJobTaggingInput) *s3control.GetJobTaggingOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.GetJobTaggingOutput)
		}
	}

	return r0, r1
}

// GetJobTaggingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) GetJobTaggingWithContext(_a0 context.Context, _a1 *s3control.GetJobTaggingInput, _a2 ...request.Option) (*s3control.GetJobTaggingOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.GetJobTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetJobTaggingInput, ...request.Option) (*s3control.GetJobTaggingOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetJobTaggingInput, ...request.Option) *s3control.GetJobTaggingOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetJobTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetJobTaggingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiRegionAccessPoint provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetMultiRegionAccessPoint(_a0 *s3control.GetMultiRegionAccessPointInput) (*s3control.GetMultiRegionAccessPointOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.GetMultiRegionAccessPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.GetMultiRegionAccessPointInput) (*s3control.GetMultiRegionAccessPointOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetMultiRegionAccessPointInput) *s3control.GetMultiRegionAccessPointOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetMultiRegionAccessPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetMultiRegionAccessPointInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiRegionAccessPointPolicy provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetMultiRegionAccessPointPolicy(_a0 *s3control.GetMultiRegionAccessPointPolicyInput) (*s3control.GetMultiRegionAccessPointPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.GetMultiRegionAccessPointPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.GetMultiRegionAccessPointPolicyInput) (*s3control.GetMultiRegionAccessPointPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetMultiRegionAccessPointPolicyInput) *s3control.GetMultiRegionAccessPointPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetMultiRegionAccessPointPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetMultiRegionAccessPointPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiRegionAccessPointPolicyRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetMultiRegionAccessPointPolicyRequest(_a0 *s3control.GetMultiRegionAccessPointPolicyInput) (*request.Request, *s3control.GetMultiRegionAccessPointPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.GetMultiRegionAccessPointPolicyOutput
	if rf, ok := ret.Get(0).(func(*s3control.GetMultiRegionAccessPointPolicyInput) (*request.Request, *s3control.GetMultiRegionAccessPointPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetMultiRegionAccessPointPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetMultiRegionAccessPointPolicyInput) *s3control.GetMultiRegionAccessPointPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.GetMultiRegionAccessPointPolicyOutput)
		}
	}

	return r0, r1
}

// GetMultiRegionAccessPointPolicyStatus provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetMultiRegionAccessPointPolicyStatus(_a0 *s3control.GetMultiRegionAccessPointPolicyStatusInput) (*s3control.GetMultiRegionAccessPointPolicyStatusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.GetMultiRegionAccessPointPolicyStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.GetMultiRegionAccessPointPolicyStatusInput) (*s3control.GetMultiRegionAccessPointPolicyStatusOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetMultiRegionAccessPointPolicyStatusInput) *s3control.GetMultiRegionAccessPointPolicyStatusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetMultiRegionAccessPointPolicyStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetMultiRegionAccessPointPolicyStatusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiRegionAccessPointPolicyStatusRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetMultiRegionAccessPointPolicyStatusRequest(_a0 *s3control.GetMultiRegionAccessPointPolicyStatusInput) (*request.Request, *s3control.GetMultiRegionAccessPointPolicyStatusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.GetMultiRegionAccessPointPolicyStatusOutput
	if rf, ok := ret.Get(0).(func(*s3control.GetMultiRegionAccessPointPolicyStatusInput) (*request.Request, *s3control.GetMultiRegionAccessPointPolicyStatusOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetMultiRegionAccessPointPolicyStatusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetMultiRegionAccessPointPolicyStatusInput) *s3control.GetMultiRegionAccessPointPolicyStatusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.GetMultiRegionAccessPointPolicyStatusOutput)
		}
	}

	return r0, r1
}

// GetMultiRegionAccessPointPolicyStatusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) GetMultiRegionAccessPointPolicyStatusWithContext(_a0 context.Context, _a1 *s3control.GetMultiRegionAccessPointPolicyStatusInput, _a2 ...request.Option) (*s3control.GetMultiRegionAccessPointPolicyStatusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.GetMultiRegionAccessPointPolicyStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetMultiRegionAccessPointPolicyStatusInput, ...request.Option) (*s3control.GetMultiRegionAccessPointPolicyStatusOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetMultiRegionAccessPointPolicyStatusInput, ...request.Option) *s3control.GetMultiRegionAccessPointPolicyStatusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetMultiRegionAccessPointPolicyStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetMultiRegionAccessPointPolicyStatusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiRegionAccessPointPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) GetMultiRegionAccessPointPolicyWithContext(_a0 context.Context, _a1 *s3control.GetMultiRegionAccessPointPolicyInput, _a2 ...request.Option) (*s3control.GetMultiRegionAccessPointPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.GetMultiRegionAccessPointPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetMultiRegionAccessPointPolicyInput, ...request.Option) (*s3control.GetMultiRegionAccessPointPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetMultiRegionAccessPointPolicyInput, ...request.Option) *s3control.GetMultiRegionAccessPointPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetMultiRegionAccessPointPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetMultiRegionAccessPointPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiRegionAccessPointRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetMultiRegionAccessPointRequest(_a0 *s3control.GetMultiRegionAccessPointInput) (*request.Request, *s3control.GetMultiRegionAccessPointOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.GetMultiRegionAccessPointOutput
	if rf, ok := ret.Get(0).(func(*s3control.GetMultiRegionAccessPointInput) (*request.Request, *s3control.GetMultiRegionAccessPointOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetMultiRegionAccessPointInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetMultiRegionAccessPointInput) *s3control.GetMultiRegionAccessPointOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.GetMultiRegionAccessPointOutput)
		}
	}

	return r0, r1
}

// GetMultiRegionAccessPointWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) GetMultiRegionAccessPointWithContext(_a0 context.Context, _a1 *s3control.GetMultiRegionAccessPointInput, _a2 ...request.Option) (*s3control.GetMultiRegionAccessPointOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.GetMultiRegionAccessPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetMultiRegionAccessPointInput, ...request.Option) (*s3control.GetMultiRegionAccessPointOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetMultiRegionAccessPointInput, ...request.Option) *s3control.GetMultiRegionAccessPointOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetMultiRegionAccessPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetMultiRegionAccessPointInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublicAccessBlock provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetPublicAccessBlock(_a0 *s3control.GetPublicAccessBlockInput) (*s3control.GetPublicAccessBlockOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.GetPublicAccessBlockOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.GetPublicAccessBlockInput) (*s3control.GetPublicAccessBlockOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetPublicAccessBlockInput) *s3control.GetPublicAccessBlockOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetPublicAccessBlockOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetPublicAccessBlockInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublicAccessBlockRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetPublicAccessBlockRequest(_a0 *s3control.GetPublicAccessBlockInput) (*request.Request, *s3control.GetPublicAccessBlockOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.GetPublicAccessBlockOutput
	if rf, ok := ret.Get(0).(func(*s3control.GetPublicAccessBlockInput) (*request.Request, *s3control.GetPublicAccessBlockOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetPublicAccessBlockInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetPublicAccessBlockInput) *s3control.GetPublicAccessBlockOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.GetPublicAccessBlockOutput)
		}
	}

	return r0, r1
}

// GetPublicAccessBlockWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) GetPublicAccessBlockWithContext(_a0 context.Context, _a1 *s3control.GetPublicAccessBlockInput, _a2 ...request.Option) (*s3control.GetPublicAccessBlockOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.GetPublicAccessBlockOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetPublicAccessBlockInput, ...request.Option) (*s3control.GetPublicAccessBlockOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetPublicAccessBlockInput, ...request.Option) *s3control.GetPublicAccessBlockOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetPublicAccessBlockOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetPublicAccessBlockInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageLensConfiguration provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetStorageLensConfiguration(_a0 *s3control.GetStorageLensConfigurationInput) (*s3control.GetStorageLensConfigurationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.GetStorageLensConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.GetStorageLensConfigurationInput) (*s3control.GetStorageLensConfigurationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetStorageLensConfigurationInput) *s3control.GetStorageLensConfigurationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetStorageLensConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetStorageLensConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageLensConfigurationRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetStorageLensConfigurationRequest(_a0 *s3control.GetStorageLensConfigurationInput) (*request.Request, *s3control.GetStorageLensConfigurationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.GetStorageLensConfigurationOutput
	if rf, ok := ret.Get(0).(func(*s3control.GetStorageLensConfigurationInput) (*request.Request, *s3control.GetStorageLensConfigurationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetStorageLensConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetStorageLensConfigurationInput) *s3control.GetStorageLensConfigurationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.GetStorageLensConfigurationOutput)
		}
	}

	return r0, r1
}

// GetStorageLensConfigurationTagging provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetStorageLensConfigurationTagging(_a0 *s3control.GetStorageLensConfigurationTaggingInput) (*s3control.GetStorageLensConfigurationTaggingOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.GetStorageLensConfigurationTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.GetStorageLensConfigurationTaggingInput) (*s3control.GetStorageLensConfigurationTaggingOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetStorageLensConfigurationTaggingInput) *s3control.GetStorageLensConfigurationTaggingOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetStorageLensConfigurationTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetStorageLensConfigurationTaggingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageLensConfigurationTaggingRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) GetStorageLensConfigurationTaggingRequest(_a0 *s3control.GetStorageLensConfigurationTaggingInput) (*request.Request, *s3control.GetStorageLensConfigurationTaggingOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.GetStorageLensConfigurationTaggingOutput
	if rf, ok := ret.Get(0).(func(*s3control.GetStorageLensConfigurationTaggingInput) (*request.Request, *s3control.GetStorageLensConfigurationTaggingOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.GetStorageLensConfigurationTaggingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.GetStorageLensConfigurationTaggingInput) *s3control.GetStorageLensConfigurationTaggingOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.GetStorageLensConfigurationTaggingOutput)
		}
	}

	return r0, r1
}

// GetStorageLensConfigurationTaggingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) GetStorageLensConfigurationTaggingWithContext(_a0 context.Context, _a1 *s3control.GetStorageLensConfigurationTaggingInput, _a2 ...request.Option) (*s3control.GetStorageLensConfigurationTaggingOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.GetStorageLensConfigurationTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetStorageLensConfigurationTaggingInput, ...request.Option) (*s3control.GetStorageLensConfigurationTaggingOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetStorageLensConfigurationTaggingInput, ...request.Option) *s3control.GetStorageLensConfigurationTaggingOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetStorageLensConfigurationTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetStorageLensConfigurationTaggingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageLensConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) GetStorageLensConfigurationWithContext(_a0 context.Context, _a1 *s3control.GetStorageLensConfigurationInput, _a2 ...request.Option) (*s3control.GetStorageLensConfigurationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.GetStorageLensConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetStorageLensConfigurationInput, ...request.Option) (*s3control.GetStorageLensConfigurationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetStorageLensConfigurationInput, ...request.Option) *s3control.GetStorageLensConfigurationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetStorageLensConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetStorageLensConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccessPoints provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) ListAccessPoints(_a0 *s3control.ListAccessPointsInput) (*s3control.ListAccessPointsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.ListAccessPointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.ListAccessPointsInput) (*s3control.ListAccessPointsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.ListAccessPointsInput) *s3control.ListAccessPointsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListAccessPointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.ListAccessPointsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccessPointsForObjectLambda provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) ListAccessPointsForObjectLambda(_a0 *s3control.ListAccessPointsForObjectLambdaInput) (*s3control.ListAccessPointsForObjectLambdaOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.ListAccessPointsForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.ListAccessPointsForObjectLambdaInput) (*s3control.ListAccessPointsForObjectLambdaOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.ListAccessPointsForObjectLambdaInput) *s3control.ListAccessPointsForObjectLambdaOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListAccessPointsForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.ListAccessPointsForObjectLambdaInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccessPointsForObjectLambdaPages provides a mock function with given fields: _a0, _a1
func (_m *MockFakeS3Control) ListAccessPointsForObjectLambdaPages(_a0 *s3control.ListAccessPointsForObjectLambdaInput, _a1 func(*s3control.ListAccessPointsForObjectLambdaOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*s3control.ListAccessPointsForObjectLambdaInput, func(*s3control.ListAccessPointsForObjectLambdaOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListAccessPointsForObjectLambdaPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockFakeS3Control) ListAccessPointsForObjectLambdaPagesWithContext(_a0 context.Context, _a1 *s3control.ListAccessPointsForObjectLambdaInput, _a2 func(*s3control.ListAccessPointsForObjectLambdaOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListAccessPointsForObjectLambdaInput, func(*s3control.ListAccessPointsForObjectLambdaOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListAccessPointsForObjectLambdaRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) ListAccessPointsForObjectLambdaRequest(_a0 *s3control.ListAccessPointsForObjectLambdaInput) (*request.Request, *s3control.ListAccessPointsForObjectLambdaOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.ListAccessPointsForObjectLambdaOutput
	if rf, ok := ret.Get(0).(func(*s3control.ListAccessPointsForObjectLambdaInput) (*request.Request, *s3control.ListAccessPointsForObjectLambdaOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.ListAccessPointsForObjectLambdaInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.ListAccessPointsForObjectLambdaInput) *s3control.ListAccessPointsForObjectLambdaOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.ListAccessPointsForObjectLambdaOutput)
		}
	}

	return r0, r1
}

// ListAccessPointsForObjectLambdaWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) ListAccessPointsForObjectLambdaWithContext(_a0 context.Context, _a1 *s3control.ListAccessPointsForObjectLambdaInput, _a2 ...request.Option) (*s3control.ListAccessPointsForObjectLambdaOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.ListAccessPointsForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListAccessPointsForObjectLambdaInput, ...request.Option) (*s3control.ListAccessPointsForObjectLambdaOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListAccessPointsForObjectLambdaInput, ...request.Option) *s3control.ListAccessPointsForObjectLambdaOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListAccessPointsForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.ListAccessPointsForObjectLambdaInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccessPointsPages provides a mock function with given fields: _a0, _a1
func (_m *MockFakeS3Control) ListAccessPointsPages(_a0 *s3control.ListAccessPointsInput, _a1 func(*s3control.ListAccessPointsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*s3control.ListAccessPointsInput, func(*s3control.ListAccessPointsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListAccessPointsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockFakeS3Control) ListAccessPointsPagesWithContext(_a0 context.Context, _a1 *s3control.ListAccessPointsInput, _a2 func(*s3control.ListAccessPointsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListAccessPointsInput, func(*s3control.ListAccessPointsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListAccessPointsRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) ListAccessPointsRequest(_a0 *s3control.ListAccessPointsInput) (*request.Request, *s3control.ListAccessPointsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.ListAccessPointsOutput
	if rf, ok := ret.Get(0).(func(*s3control.ListAccessPointsInput) (*request.Request, *s3control.ListAccessPointsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.ListAccessPointsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.ListAccessPointsInput) *s3control.ListAccessPointsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.ListAccessPointsOutput)
		}
	}

	return r0, r1
}

// ListAccessPointsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) ListAccessPointsWithContext(_a0 context.Context, _a1 *s3control.ListAccessPointsInput, _a2 ...request.Option) (*s3control.ListAccessPointsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.ListAccessPointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListAccessPointsInput, ...request.Option) (*s3control.ListAccessPointsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListAccessPointsInput, ...request.Option) *s3control.ListAccessPointsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListAccessPointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.ListAccessPointsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobs provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) ListJobs(_a0 *s3control.ListJobsInput) (*s3control.ListJobsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.ListJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.ListJobsInput) (*s3control.ListJobsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.ListJobsInput) *s3control.ListJobsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.ListJobsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobsPages provides a mock function with given fields: _a0, _a1
func (_m *MockFakeS3Control) ListJobsPages(_a0 *s3control.ListJobsInput, _a1 func(*s3control.ListJobsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*s3control.ListJobsInput, func(*s3control.ListJobsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListJobsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockFakeS3Control) ListJobsPagesWithContext(_a0 context.Context, _a1 *s3control.ListJobsInput, _a2 func(*s3control.ListJobsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListJobsInput, func(*s3control.ListJobsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListJobsRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) ListJobsRequest(_a0 *s3control.ListJobsInput) (*request.Request, *s3control.ListJobsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.ListJobsOutput
	if rf, ok := ret.Get(0).(func(*s3control.ListJobsInput) (*request.Request, *s3control.ListJobsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.ListJobsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.ListJobsInput) *s3control.ListJobsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.ListJobsOutput)
		}
	}

	return r0, r1
}

// ListJobsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) ListJobsWithContext(_a0 context.Context, _a1 *s3control.ListJobsInput, _a2 ...request.Option) (*s3control.ListJobsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.ListJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListJobsInput, ...request.Option) (*s3control.ListJobsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListJobsInput, ...request.Option) *s3control.ListJobsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.ListJobsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMultiRegionAccessPoints provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) ListMultiRegionAccessPoints(_a0 *s3control.ListMultiRegionAccessPointsInput) (*s3control.ListMultiRegionAccessPointsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.ListMultiRegionAccessPointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.ListMultiRegionAccessPointsInput) (*s3control.ListMultiRegionAccessPointsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.ListMultiRegionAccessPointsInput) *s3control.ListMultiRegionAccessPointsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListMultiRegionAccessPointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.ListMultiRegionAccessPointsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMultiRegionAccessPointsPages provides a mock function with given fields: _a0, _a1
func (_m *MockFakeS3Control) ListMultiRegionAccessPointsPages(_a0 *s3control.ListMultiRegionAccessPointsInput, _a1 func(*s3control.ListMultiRegionAccessPointsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*s3control.ListMultiRegionAccessPointsInput, func(*s3control.ListMultiRegionAccessPointsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListMultiRegionAccessPointsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockFakeS3Control) ListMultiRegionAccessPointsPagesWithContext(_a0 context.Context, _a1 *s3control.ListMultiRegionAccessPointsInput, _a2 func(*s3control.ListMultiRegionAccessPointsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListMultiRegionAccessPointsInput, func(*s3control.ListMultiRegionAccessPointsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListMultiRegionAccessPointsRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) ListMultiRegionAccessPointsRequest(_a0 *s3control.ListMultiRegionAccessPointsInput) (*request.Request, *s3control.ListMultiRegionAccessPointsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.ListMultiRegionAccessPointsOutput
	if rf, ok := ret.Get(0).(func(*s3control.ListMultiRegionAccessPointsInput) (*request.Request, *s3control.ListMultiRegionAccessPointsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.ListMultiRegionAccessPointsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.ListMultiRegionAccessPointsInput) *s3control.ListMultiRegionAccessPointsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.ListMultiRegionAccessPointsOutput)
		}
	}

	return r0, r1
}

// ListMultiRegionAccessPointsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) ListMultiRegionAccessPointsWithContext(_a0 context.Context, _a1 *s3control.ListMultiRegionAccessPointsInput, _a2 ...request.Option) (*s3control.ListMultiRegionAccessPointsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.ListMultiRegionAccessPointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListMultiRegionAccessPointsInput, ...request.Option) (*s3control.ListMultiRegionAccessPointsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListMultiRegionAccessPointsInput, ...request.Option) *s3control.ListMultiRegionAccessPointsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListMultiRegionAccessPointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.ListMultiRegionAccessPointsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRegionalBuckets provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) ListRegionalBuckets(_a0 *s3control.ListRegionalBucketsInput) (*s3control.ListRegionalBucketsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.ListRegionalBucketsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.ListRegionalBucketsInput) (*s3control.ListRegionalBucketsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.ListRegionalBucketsInput) *s3control.ListRegionalBucketsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListRegionalBucketsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.ListRegionalBucketsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRegionalBucketsPages provides a mock function with given fields: _a0, _a1
func (_m *MockFakeS3Control) ListRegionalBucketsPages(_a0 *s3control.ListRegionalBucketsInput, _a1 func(*s3control.ListRegionalBucketsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*s3control.ListRegionalBucketsInput, func(*s3control.ListRegionalBucketsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListRegionalBucketsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockFakeS3Control) ListRegionalBucketsPagesWithContext(_a0 context.Context, _a1 *s3control.ListRegionalBucketsInput, _a2 func(*s3control.ListRegionalBucketsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListRegionalBucketsInput, func(*s3control.ListRegionalBucketsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListRegionalBucketsRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) ListRegionalBucketsRequest(_a0 *s3control.ListRegionalBucketsInput) (*request.Request, *s3control.ListRegionalBucketsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.ListRegionalBucketsOutput
	if rf, ok := ret.Get(0).(func(*s3control.ListRegionalBucketsInput) (*request.Request, *s3control.ListRegionalBucketsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.ListRegionalBucketsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.ListRegionalBucketsInput) *s3control.ListRegionalBucketsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.ListRegionalBucketsOutput)
		}
	}

	return r0, r1
}

// ListRegionalBucketsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) ListRegionalBucketsWithContext(_a0 context.Context, _a1 *s3control.ListRegionalBucketsInput, _a2 ...request.Option) (*s3control.ListRegionalBucketsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.ListRegionalBucketsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListRegionalBucketsInput, ...request.Option) (*s3control.ListRegionalBucketsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListRegionalBucketsInput, ...request.Option) *s3control.ListRegionalBucketsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListRegionalBucketsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.ListRegionalBucketsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStorageLensConfigurations provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) ListStorageLensConfigurations(_a0 *s3control.ListStorageLensConfigurationsInput) (*s3control.ListStorageLensConfigurationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.ListStorageLensConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.ListStorageLensConfigurationsInput) (*s3control.ListStorageLensConfigurationsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.ListStorageLensConfigurationsInput) *s3control.ListStorageLensConfigurationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListStorageLensConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.ListStorageLensConfigurationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStorageLensConfigurationsPages provides a mock function with given fields: _a0, _a1
func (_m *MockFakeS3Control) ListStorageLensConfigurationsPages(_a0 *s3control.ListStorageLensConfigurationsInput, _a1 func(*s3control.ListStorageLensConfigurationsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*s3control.ListStorageLensConfigurationsInput, func(*s3control.ListStorageLensConfigurationsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListStorageLensConfigurationsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockFakeS3Control) ListStorageLensConfigurationsPagesWithContext(_a0 context.Context, _a1 *s3control.ListStorageLensConfigurationsInput, _a2 func(*s3control.ListStorageLensConfigurationsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListStorageLensConfigurationsInput, func(*s3control.ListStorageLensConfigurationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListStorageLensConfigurationsRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) ListStorageLensConfigurationsRequest(_a0 *s3control.ListStorageLensConfigurationsInput) (*request.Request, *s3control.ListStorageLensConfigurationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.ListStorageLensConfigurationsOutput
	if rf, ok := ret.Get(0).(func(*s3control.ListStorageLensConfigurationsInput) (*request.Request, *s3control.ListStorageLensConfigurationsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.ListStorageLensConfigurationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.ListStorageLensConfigurationsInput) *s3control.ListStorageLensConfigurationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.ListStorageLensConfigurationsOutput)
		}
	}

	return r0, r1
}

// ListStorageLensConfigurationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) ListStorageLensConfigurationsWithContext(_a0 context.Context, _a1 *s3control.ListStorageLensConfigurationsInput, _a2 ...request.Option) (*s3control.ListStorageLensConfigurationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.ListStorageLensConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListStorageLensConfigurationsInput, ...request.Option) (*s3control.ListStorageLensConfigurationsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListStorageLensConfigurationsInput, ...request.Option) *s3control.ListStorageLensConfigurationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListStorageLensConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.ListStorageLensConfigurationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccessPointConfigurationForObjectLambda provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutAccessPointConfigurationForObjectLambda(_a0 *s3control.PutAccessPointConfigurationForObjectLambdaInput) (*s3control.PutAccessPointConfigurationForObjectLambdaOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.PutAccessPointConfigurationForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.PutAccessPointConfigurationForObjectLambdaInput) (*s3control.PutAccessPointConfigurationForObjectLambdaOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutAccessPointConfigurationForObjectLambdaInput) *s3control.PutAccessPointConfigurationForObjectLambdaOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutAccessPointConfigurationForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutAccessPointConfigurationForObjectLambdaInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccessPointConfigurationForObjectLambdaRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutAccessPointConfigurationForObjectLambdaRequest(_a0 *s3control.PutAccessPointConfigurationForObjectLambdaInput) (*request.Request, *s3control.PutAccessPointConfigurationForObjectLambdaOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.PutAccessPointConfigurationForObjectLambdaOutput
	if rf, ok := ret.Get(0).(func(*s3control.PutAccessPointConfigurationForObjectLambdaInput) (*request.Request, *s3control.PutAccessPointConfigurationForObjectLambdaOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutAccessPointConfigurationForObjectLambdaInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutAccessPointConfigurationForObjectLambdaInput) *s3control.PutAccessPointConfigurationForObjectLambdaOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.PutAccessPointConfigurationForObjectLambdaOutput)
		}
	}

	return r0, r1
}

// PutAccessPointConfigurationForObjectLambdaWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) PutAccessPointConfigurationForObjectLambdaWithContext(_a0 context.Context, _a1 *s3control.PutAccessPointConfigurationForObjectLambdaInput, _a2 ...request.Option) (*s3control.PutAccessPointConfigurationForObjectLambdaOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.PutAccessPointConfigurationForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutAccessPointConfigurationForObjectLambdaInput, ...request.Option) (*s3control.PutAccessPointConfigurationForObjectLambdaOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutAccessPointConfigurationForObjectLambdaInput, ...request.Option) *s3control.PutAccessPointConfigurationForObjectLambdaOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutAccessPointConfigurationForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutAccessPointConfigurationForObjectLambdaInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccessPointPolicy provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutAccessPointPolicy(_a0 *s3control.PutAccessPointPolicyInput) (*s3control.PutAccessPointPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.PutAccessPointPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.PutAccessPointPolicyInput) (*s3control.PutAccessPointPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutAccessPointPolicyInput) *s3control.PutAccessPointPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutAccessPointPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutAccessPointPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccessPointPolicyForObjectLambda provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutAccessPointPolicyForObjectLambda(_a0 *s3control.PutAccessPointPolicyForObjectLambdaInput) (*s3control.PutAccessPointPolicyForObjectLambdaOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.PutAccessPointPolicyForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.PutAccessPointPolicyForObjectLambdaInput) (*s3control.PutAccessPointPolicyForObjectLambdaOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutAccessPointPolicyForObjectLambdaInput) *s3control.PutAccessPointPolicyForObjectLambdaOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutAccessPointPolicyForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutAccessPointPolicyForObjectLambdaInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccessPointPolicyForObjectLambdaRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutAccessPointPolicyForObjectLambdaRequest(_a0 *s3control.PutAccessPointPolicyForObjectLambdaInput) (*request.Request, *s3control.PutAccessPointPolicyForObjectLambdaOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.PutAccessPointPolicyForObjectLambdaOutput
	if rf, ok := ret.Get(0).(func(*s3control.PutAccessPointPolicyForObjectLambdaInput) (*request.Request, *s3control.PutAccessPointPolicyForObjectLambdaOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutAccessPointPolicyForObjectLambdaInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutAccessPointPolicyForObjectLambdaInput) *s3control.PutAccessPointPolicyForObjectLambdaOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.PutAccessPointPolicyForObjectLambdaOutput)
		}
	}

	return r0, r1
}

// PutAccessPointPolicyForObjectLambdaWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) PutAccessPointPolicyForObjectLambdaWithContext(_a0 context.Context, _a1 *s3control.PutAccessPointPolicyForObjectLambdaInput, _a2 ...request.Option) (*s3control.PutAccessPointPolicyForObjectLambdaOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.PutAccessPointPolicyForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutAccessPointPolicyForObjectLambdaInput, ...request.Option) (*s3control.PutAccessPointPolicyForObjectLambdaOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutAccessPointPolicyForObjectLambdaInput, ...request.Option) *s3control.PutAccessPointPolicyForObjectLambdaOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutAccessPointPolicyForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutAccessPointPolicyForObjectLambdaInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccessPointPolicyRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutAccessPointPolicyRequest(_a0 *s3control.PutAccessPointPolicyInput) (*request.Request, *s3control.PutAccessPointPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.PutAccessPointPolicyOutput
	if rf, ok := ret.Get(0).(func(*s3control.PutAccessPointPolicyInput) (*request.Request, *s3control.PutAccessPointPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutAccessPointPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutAccessPointPolicyInput) *s3control.PutAccessPointPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.PutAccessPointPolicyOutput)
		}
	}

	return r0, r1
}

// PutAccessPointPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) PutAccessPointPolicyWithContext(_a0 context.Context, _a1 *s3control.PutAccessPointPolicyInput, _a2 ...request.Option) (*s3control.PutAccessPointPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.PutAccessPointPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutAccessPointPolicyInput, ...request.Option) (*s3control.PutAccessPointPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutAccessPointPolicyInput, ...request.Option) *s3control.PutAccessPointPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutAccessPointPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutAccessPointPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutBucketLifecycleConfiguration provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutBucketLifecycleConfiguration(_a0 *s3control.PutBucketLifecycleConfigurationInput) (*s3control.PutBucketLifecycleConfigurationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.PutBucketLifecycleConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.PutBucketLifecycleConfigurationInput) (*s3control.PutBucketLifecycleConfigurationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutBucketLifecycleConfigurationInput) *s3control.PutBucketLifecycleConfigurationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutBucketLifecycleConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutBucketLifecycleConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutBucketLifecycleConfigurationRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutBucketLifecycleConfigurationRequest(_a0 *s3control.PutBucketLifecycleConfigurationInput) (*request.Request, *s3control.PutBucketLifecycleConfigurationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.PutBucketLifecycleConfigurationOutput
	if rf, ok := ret.Get(0).(func(*s3control.PutBucketLifecycleConfigurationInput) (*request.Request, *s3control.PutBucketLifecycleConfigurationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutBucketLifecycleConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutBucketLifecycleConfigurationInput) *s3control.PutBucketLifecycleConfigurationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.PutBucketLifecycleConfigurationOutput)
		}
	}

	return r0, r1
}

// PutBucketLifecycleConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) PutBucketLifecycleConfigurationWithContext(_a0 context.Context, _a1 *s3control.PutBucketLifecycleConfigurationInput, _a2 ...request.Option) (*s3control.PutBucketLifecycleConfigurationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.PutBucketLifecycleConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutBucketLifecycleConfigurationInput, ...request.Option) (*s3control.PutBucketLifecycleConfigurationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutBucketLifecycleConfigurationInput, ...request.Option) *s3control.PutBucketLifecycleConfigurationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutBucketLifecycleConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutBucketLifecycleConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutBucketPolicy provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutBucketPolicy(_a0 *s3control.PutBucketPolicyInput) (*s3control.PutBucketPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.PutBucketPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.PutBucketPolicyInput) (*s3control.PutBucketPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutBucketPolicyInput) *s3control.PutBucketPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutBucketPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutBucketPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutBucketPolicyRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutBucketPolicyRequest(_a0 *s3control.PutBucketPolicyInput) (*request.Request, *s3control.PutBucketPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.PutBucketPolicyOutput
	if rf, ok := ret.Get(0).(func(*s3control.PutBucketPolicyInput) (*request.Request, *s3control.PutBucketPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutBucketPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutBucketPolicyInput) *s3control.PutBucketPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.PutBucketPolicyOutput)
		}
	}

	return r0, r1
}

// PutBucketPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) PutBucketPolicyWithContext(_a0 context.Context, _a1 *s3control.PutBucketPolicyInput, _a2 ...request.Option) (*s3control.PutBucketPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.PutBucketPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutBucketPolicyInput, ...request.Option) (*s3control.PutBucketPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutBucketPolicyInput, ...request.Option) *s3control.PutBucketPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutBucketPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutBucketPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutBucketTagging provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutBucketTagging(_a0 *s3control.PutBucketTaggingInput) (*s3control.PutBucketTaggingOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.PutBucketTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.PutBucketTaggingInput) (*s3control.PutBucketTaggingOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutBucketTaggingInput) *s3control.PutBucketTaggingOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutBucketTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutBucketTaggingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutBucketTaggingRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutBucketTaggingRequest(_a0 *s3control.PutBucketTaggingInput) (*request.Request, *s3control.PutBucketTaggingOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.PutBucketTaggingOutput
	if rf, ok := ret.Get(0).(func(*s3control.PutBucketTaggingInput) (*request.Request, *s3control.PutBucketTaggingOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutBucketTaggingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutBucketTaggingInput) *s3control.PutBucketTaggingOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.PutBucketTaggingOutput)
		}
	}

	return r0, r1
}

// PutBucketTaggingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) PutBucketTaggingWithContext(_a0 context.Context, _a1 *s3control.PutBucketTaggingInput, _a2 ...request.Option) (*s3control.PutBucketTaggingOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.PutBucketTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutBucketTaggingInput, ...request.Option) (*s3control.PutBucketTaggingOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutBucketTaggingInput, ...request.Option) *s3control.PutBucketTaggingOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutBucketTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutBucketTaggingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutBucketVersioning provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutBucketVersioning(_a0 *s3control.PutBucketVersioningInput) (*s3control.PutBucketVersioningOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.PutBucketVersioningOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.PutBucketVersioningInput) (*s3control.PutBucketVersioningOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutBucketVersioningInput) *s3control.PutBucketVersioningOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutBucketVersioningOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutBucketVersioningInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutBucketVersioningRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutBucketVersioningRequest(_a0 *s3control.PutBucketVersioningInput) (*request.Request, *s3control.PutBucketVersioningOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.PutBucketVersioningOutput
	if rf, ok := ret.Get(0).(func(*s3control.PutBucketVersioningInput) (*request.Request, *s3control.PutBucketVersioningOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutBucketVersioningInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutBucketVersioningInput) *s3control.PutBucketVersioningOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.PutBucketVersioningOutput)
		}
	}

	return r0, r1
}

// PutBucketVersioningWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) PutBucketVersioningWithContext(_a0 context.Context, _a1 *s3control.PutBucketVersioningInput, _a2 ...request.Option) (*s3control.PutBucketVersioningOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.PutBucketVersioningOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutBucketVersioningInput, ...request.Option) (*s3control.PutBucketVersioningOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutBucketVersioningInput, ...request.Option) *s3control.PutBucketVersioningOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutBucketVersioningOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutBucketVersioningInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutJobTagging provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutJobTagging(_a0 *s3control.PutJobTaggingInput) (*s3control.PutJobTaggingOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.PutJobTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.PutJobTaggingInput) (*s3control.PutJobTaggingOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutJobTaggingInput) *s3control.PutJobTaggingOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutJobTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutJobTaggingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutJobTaggingRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutJobTaggingRequest(_a0 *s3control.PutJobTaggingInput) (*request.Request, *s3control.PutJobTaggingOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.PutJobTaggingOutput
	if rf, ok := ret.Get(0).(func(*s3control.PutJobTaggingInput) (*request.Request, *s3control.PutJobTaggingOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutJobTaggingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutJobTaggingInput) *s3control.PutJobTaggingOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.PutJobTaggingOutput)
		}
	}

	return r0, r1
}

// PutJobTaggingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) PutJobTaggingWithContext(_a0 context.Context, _a1 *s3control.PutJobTaggingInput, _a2 ...request.Option) (*s3control.PutJobTaggingOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.PutJobTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutJobTaggingInput, ...request.Option) (*s3control.PutJobTaggingOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutJobTaggingInput, ...request.Option) *s3control.PutJobTaggingOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutJobTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutJobTaggingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutMultiRegionAccessPointPolicy provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutMultiRegionAccessPointPolicy(_a0 *s3control.PutMultiRegionAccessPointPolicyInput) (*s3control.PutMultiRegionAccessPointPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.PutMultiRegionAccessPointPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.PutMultiRegionAccessPointPolicyInput) (*s3control.PutMultiRegionAccessPointPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutMultiRegionAccessPointPolicyInput) *s3control.PutMultiRegionAccessPointPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutMultiRegionAccessPointPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutMultiRegionAccessPointPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutMultiRegionAccessPointPolicyRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutMultiRegionAccessPointPolicyRequest(_a0 *s3control.PutMultiRegionAccessPointPolicyInput) (*request.Request, *s3control.PutMultiRegionAccessPointPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.PutMultiRegionAccessPointPolicyOutput
	if rf, ok := ret.Get(0).(func(*s3control.PutMultiRegionAccessPointPolicyInput) (*request.Request, *s3control.PutMultiRegionAccessPointPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutMultiRegionAccessPointPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutMultiRegionAccessPointPolicyInput) *s3control.PutMultiRegionAccessPointPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.PutMultiRegionAccessPointPolicyOutput)
		}
	}

	return r0, r1
}

// PutMultiRegionAccessPointPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) PutMultiRegionAccessPointPolicyWithContext(_a0 context.Context, _a1 *s3control.PutMultiRegionAccessPointPolicyInput, _a2 ...request.Option) (*s3control.PutMultiRegionAccessPointPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.PutMultiRegionAccessPointPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutMultiRegionAccessPointPolicyInput, ...request.Option) (*s3control.PutMultiRegionAccessPointPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutMultiRegionAccessPointPolicyInput, ...request.Option) *s3control.PutMultiRegionAccessPointPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutMultiRegionAccessPointPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutMultiRegionAccessPointPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPublicAccessBlock provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutPublicAccessBlock(_a0 *s3control.PutPublicAccessBlockInput) (*s3control.PutPublicAccessBlockOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.PutPublicAccessBlockOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.PutPublicAccessBlockInput) (*s3control.PutPublicAccessBlockOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutPublicAccessBlockInput) *s3control.PutPublicAccessBlockOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutPublicAccessBlockOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutPublicAccessBlockInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPublicAccessBlockRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutPublicAccessBlockRequest(_a0 *s3control.PutPublicAccessBlockInput) (*request.Request, *s3control.PutPublicAccessBlockOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.PutPublicAccessBlockOutput
	if rf, ok := ret.Get(0).(func(*s3control.PutPublicAccessBlockInput) (*request.Request, *s3control.PutPublicAccessBlockOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutPublicAccessBlockInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutPublicAccessBlockInput) *s3control.PutPublicAccessBlockOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.PutPublicAccessBlockOutput)
		}
	}

	return r0, r1
}

// PutPublicAccessBlockWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) PutPublicAccessBlockWithContext(_a0 context.Context, _a1 *s3control.PutPublicAccessBlockInput, _a2 ...request.Option) (*s3control.PutPublicAccessBlockOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.PutPublicAccessBlockOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutPublicAccessBlockInput, ...request.Option) (*s3control.PutPublicAccessBlockOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutPublicAccessBlockInput, ...request.Option) *s3control.PutPublicAccessBlockOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutPublicAccessBlockOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutPublicAccessBlockInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutStorageLensConfiguration provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutStorageLensConfiguration(_a0 *s3control.PutStorageLensConfigurationInput) (*s3control.PutStorageLensConfigurationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.PutStorageLensConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.PutStorageLensConfigurationInput) (*s3control.PutStorageLensConfigurationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutStorageLensConfigurationInput) *s3control.PutStorageLensConfigurationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutStorageLensConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutStorageLensConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutStorageLensConfigurationRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutStorageLensConfigurationRequest(_a0 *s3control.PutStorageLensConfigurationInput) (*request.Request, *s3control.PutStorageLensConfigurationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.PutStorageLensConfigurationOutput
	if rf, ok := ret.Get(0).(func(*s3control.PutStorageLensConfigurationInput) (*request.Request, *s3control.PutStorageLensConfigurationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutStorageLensConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutStorageLensConfigurationInput) *s3control.PutStorageLensConfigurationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.PutStorageLensConfigurationOutput)
		}
	}

	return r0, r1
}

// PutStorageLensConfigurationTagging provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutStorageLensConfigurationTagging(_a0 *s3control.PutStorageLensConfigurationTaggingInput) (*s3control.PutStorageLensConfigurationTaggingOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.PutStorageLensConfigurationTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.PutStorageLensConfigurationTaggingInput) (*s3control.PutStorageLensConfigurationTaggingOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutStorageLensConfigurationTaggingInput) *s3control.PutStorageLensConfigurationTaggingOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutStorageLensConfigurationTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutStorageLensConfigurationTaggingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutStorageLensConfigurationTaggingRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) PutStorageLensConfigurationTaggingRequest(_a0 *s3control.PutStorageLensConfigurationTaggingInput) (*request.Request, *s3control.PutStorageLensConfigurationTaggingOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.PutStorageLensConfigurationTaggingOutput
	if rf, ok := ret.Get(0).(func(*s3control.PutStorageLensConfigurationTaggingInput) (*request.Request, *s3control.PutStorageLensConfigurationTaggingOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.PutStorageLensConfigurationTaggingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.PutStorageLensConfigurationTaggingInput) *s3control.PutStorageLensConfigurationTaggingOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.PutStorageLensConfigurationTaggingOutput)
		}
	}

	return r0, r1
}

// PutStorageLensConfigurationTaggingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) PutStorageLensConfigurationTaggingWithContext(_a0 context.Context, _a1 *s3control.PutStorageLensConfigurationTaggingInput, _a2 ...request.Option) (*s3control.PutStorageLensConfigurationTaggingOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.PutStorageLensConfigurationTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutStorageLensConfigurationTaggingInput, ...request.Option) (*s3control.PutStorageLensConfigurationTaggingOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutStorageLensConfigurationTaggingInput, ...request.Option) *s3control.PutStorageLensConfigurationTaggingOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutStorageLensConfigurationTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutStorageLensConfigurationTaggingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutStorageLensConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) PutStorageLensConfigurationWithContext(_a0 context.Context, _a1 *s3control.PutStorageLensConfigurationInput, _a2 ...request.Option) (*s3control.PutStorageLensConfigurationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.PutStorageLensConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutStorageLensConfigurationInput, ...request.Option) (*s3control.PutStorageLensConfigurationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutStorageLensConfigurationInput, ...request.Option) *s3control.PutStorageLensConfigurationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutStorageLensConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutStorageLensConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJobPriority provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) UpdateJobPriority(_a0 *s3control.UpdateJobPriorityInput) (*s3control.UpdateJobPriorityOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.UpdateJobPriorityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.UpdateJobPriorityInput) (*s3control.UpdateJobPriorityOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.UpdateJobPriorityInput) *s3control.UpdateJobPriorityOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.UpdateJobPriorityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.UpdateJobPriorityInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJobPriorityRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) UpdateJobPriorityRequest(_a0 *s3control.UpdateJobPriorityInput) (*request.Request, *s3control.UpdateJobPriorityOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.UpdateJobPriorityOutput
	if rf, ok := ret.Get(0).(func(*s3control.UpdateJobPriorityInput) (*request.Request, *s3control.UpdateJobPriorityOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.UpdateJobPriorityInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.UpdateJobPriorityInput) *s3control.UpdateJobPriorityOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.UpdateJobPriorityOutput)
		}
	}

	return r0, r1
}

// UpdateJobPriorityWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) UpdateJobPriorityWithContext(_a0 context.Context, _a1 *s3control.UpdateJobPriorityInput, _a2 ...request.Option) (*s3control.UpdateJobPriorityOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.UpdateJobPriorityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.UpdateJobPriorityInput, ...request.Option) (*s3control.UpdateJobPriorityOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.UpdateJobPriorityInput, ...request.Option) *s3control.UpdateJobPriorityOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.UpdateJobPriorityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.UpdateJobPriorityInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJobStatus provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) UpdateJobStatus(_a0 *s3control.UpdateJobStatusInput) (*s3control.UpdateJobStatusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *s3control.UpdateJobStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3control.UpdateJobStatusInput) (*s3control.UpdateJobStatusOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.UpdateJobStatusInput) *s3control.UpdateJobStatusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.UpdateJobStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.UpdateJobStatusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJobStatusRequest provides a mock function with given fields: _a0
func (_m *MockFakeS3Control) UpdateJobStatusRequest(_a0 *s3control.UpdateJobStatusInput) (*request.Request, *s3control.UpdateJobStatusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *s3control.UpdateJobStatusOutput
	if rf, ok := ret.Get(0).(func(*s3control.UpdateJobStatusInput) (*request.Request, *s3control.UpdateJobStatusOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*s3control.UpdateJobStatusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3control.UpdateJobStatusInput) *s3control.UpdateJobStatusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*s3control.UpdateJobStatusOutput)
		}
	}

	return r0, r1
}

// UpdateJobStatusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFakeS3Control) UpdateJobStatusWithContext(_a0 context.Context, _a1 *s3control.UpdateJobStatusInput, _a2 ...request.Option) (*s3control.UpdateJobStatusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3control.UpdateJobStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.UpdateJobStatusInput, ...request.Option) (*s3control.UpdateJobStatusOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.UpdateJobStatusInput, ...request.Option) *s3control.UpdateJobStatusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.UpdateJobStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.UpdateJobStatusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockFakeS3Control interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockFakeS3Control creates a new instance of MockFakeS3Control. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockFakeS3Control(t mockConstructorTestingTNewMockFakeS3Control) *MockFakeS3Control {
	mock := &MockFakeS3Control{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
