// Code generated by mockery v2.23.1. DO NOT EDIT.

package scaleway

import (
	"github.com/scaleway/scaleway-sdk-go/api/function/v1beta1"
	mock "github.com/stretchr/testify/mock"

	scw "github.com/scaleway/scaleway-sdk-go/scw"
)

// MockFakeFunction is an autogenerated mock type for the FakeFunction type
type MockFakeFunction struct {
	mock.Mock
}

// ListNamespaces provides a mock function with given fields: req, opts
func (_m *MockFakeFunction) ListNamespaces(req *function.ListNamespacesRequest, opts ...scw.RequestOption) (*function.ListNamespacesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *function.ListNamespacesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*function.ListNamespacesRequest, ...scw.RequestOption) (*function.ListNamespacesResponse, error)); ok {
		return rf(req, opts...)
	}
	if rf, ok := ret.Get(0).(func(*function.ListNamespacesRequest, ...scw.RequestOption) *function.ListNamespacesResponse); ok {
		r0 = rf(req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*function.ListNamespacesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*function.ListNamespacesRequest, ...scw.RequestOption) error); ok {
		r1 = rf(req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockFakeFunction interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockFakeFunction creates a new instance of MockFakeFunction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockFakeFunction(t mockConstructorTestingTNewMockFakeFunction) *MockFakeFunction {
	mock := &MockFakeFunction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
