// Code generated by mockery v2.28.1. DO NOT EDIT.

package common

import (
	resource "github.com/snyk/driftctl/enumeration/resource"
	mock "github.com/stretchr/testify/mock"
)

// MockEnumerator is an autogenerated mock type for the Enumerator type
type MockEnumerator struct {
	mock.Mock
}

// Enumerate provides a mock function with given fields:
func (_m *MockEnumerator) Enumerate() ([]*resource.Resource, error) {
	ret := _m.Called()

	var r0 []*resource.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*resource.Resource, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*resource.Resource); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*resource.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SupportedType provides a mock function with given fields:
func (_m *MockEnumerator) SupportedType() resource.ResourceType {
	ret := _m.Called()

	var r0 resource.ResourceType
	if rf, ok := ret.Get(0).(func() resource.ResourceType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(resource.ResourceType)
	}

	return r0
}

type mockConstructorTestingTNewMockEnumerator interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEnumerator creates a new instance of MockEnumerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEnumerator(t mockConstructorTestingTNewMockEnumerator) *MockEnumerator {
	mock := &MockEnumerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
