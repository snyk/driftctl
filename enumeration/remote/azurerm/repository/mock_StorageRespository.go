// Code generated by mockery v2.28.1. DO NOT EDIT.

package repository

import (
	armstorage "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storage/armstorage"
	mock "github.com/stretchr/testify/mock"
)

// MockStorageRespository is an autogenerated mock type for the StorageRespository type
type MockStorageRespository struct {
	mock.Mock
}

// ListAllStorageAccount provides a mock function with given fields:
func (_m *MockStorageRespository) ListAllStorageAccount() ([]*armstorage.StorageAccount, error) {
	ret := _m.Called()

	var r0 []*armstorage.StorageAccount
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*armstorage.StorageAccount, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*armstorage.StorageAccount); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*armstorage.StorageAccount)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllStorageContainer provides a mock function with given fields: account
func (_m *MockStorageRespository) ListAllStorageContainer(account *armstorage.StorageAccount) ([]string, error) {
	ret := _m.Called(account)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*armstorage.StorageAccount) ([]string, error)); ok {
		return rf(account)
	}
	if rf, ok := ret.Get(0).(func(*armstorage.StorageAccount) []string); ok {
		r0 = rf(account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*armstorage.StorageAccount) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockStorageRespository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockStorageRespository creates a new instance of MockStorageRespository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockStorageRespository(t mockConstructorTestingTNewMockStorageRespository) *MockStorageRespository {
	mock := &MockStorageRespository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
