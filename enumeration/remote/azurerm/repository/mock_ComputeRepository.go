// Code generated by mockery v2.28.1. DO NOT EDIT.

package repository

import (
	armcompute "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute"
	mock "github.com/stretchr/testify/mock"
)

// MockComputeRepository is an autogenerated mock type for the ComputeRepository type
type MockComputeRepository struct {
	mock.Mock
}

// ListAllImages provides a mock function with given fields:
func (_m *MockComputeRepository) ListAllImages() ([]*armcompute.Image, error) {
	ret := _m.Called()

	var r0 []*armcompute.Image
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*armcompute.Image, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*armcompute.Image); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*armcompute.Image)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllSSHPublicKeys provides a mock function with given fields:
func (_m *MockComputeRepository) ListAllSSHPublicKeys() ([]*armcompute.SSHPublicKeyResource, error) {
	ret := _m.Called()

	var r0 []*armcompute.SSHPublicKeyResource
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*armcompute.SSHPublicKeyResource, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*armcompute.SSHPublicKeyResource); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*armcompute.SSHPublicKeyResource)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockComputeRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockComputeRepository creates a new instance of MockComputeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockComputeRepository(t mockConstructorTestingTNewMockComputeRepository) *MockComputeRepository {
	mock := &MockComputeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
