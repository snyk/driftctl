// Code generated by mockery v2.28.1. DO NOT EDIT.

package cache

import mock "github.com/stretchr/testify/mock"

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

// Get provides a mock function with given fields: _a0
func (_m *MockCache) Get(_a0 string) interface{} {
	ret := _m.Called(_a0)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetAndLock provides a mock function with given fields: _a0
func (_m *MockCache) GetAndLock(_a0 string) interface{} {
	ret := _m.Called(_a0)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Len provides a mock function with given fields:
func (_m *MockCache) Len() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Put provides a mock function with given fields: _a0, _a1
func (_m *MockCache) Put(_a0 string, _a1 interface{}) bool {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, interface{}) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Unlock provides a mock function with given fields: _a0
func (_m *MockCache) Unlock(_a0 string) {
	_m.Called(_a0)
}

type mockConstructorTestingTNewMockCache interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCache(t mockConstructorTestingTNewMockCache) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
