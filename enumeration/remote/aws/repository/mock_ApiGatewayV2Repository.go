// Code generated by mockery v2.28.1. DO NOT EDIT.

package repository

import (
	apigatewayv2 "github.com/aws/aws-sdk-go/service/apigatewayv2"
	mock "github.com/stretchr/testify/mock"
)

// MockApiGatewayV2Repository is an autogenerated mock type for the ApiGatewayV2Repository type
type MockApiGatewayV2Repository struct {
	mock.Mock
}

// ListAllApiAuthorizers provides a mock function with given fields: _a0
func (_m *MockApiGatewayV2Repository) ListAllApiAuthorizers(_a0 string) ([]*apigatewayv2.Authorizer, error) {
	ret := _m.Called(_a0)

	var r0 []*apigatewayv2.Authorizer
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*apigatewayv2.Authorizer, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []*apigatewayv2.Authorizer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apigatewayv2.Authorizer)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllApiDeployments provides a mock function with given fields: apiId
func (_m *MockApiGatewayV2Repository) ListAllApiDeployments(apiId *string) ([]*apigatewayv2.Deployment, error) {
	ret := _m.Called(apiId)

	var r0 []*apigatewayv2.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) ([]*apigatewayv2.Deployment, error)); ok {
		return rf(apiId)
	}
	if rf, ok := ret.Get(0).(func(*string) []*apigatewayv2.Deployment); ok {
		r0 = rf(apiId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apigatewayv2.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(apiId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllApiIntegrationResponses provides a mock function with given fields: _a0, _a1
func (_m *MockApiGatewayV2Repository) ListAllApiIntegrationResponses(_a0 string, _a1 string) ([]*apigatewayv2.IntegrationResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*apigatewayv2.IntegrationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]*apigatewayv2.IntegrationResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) []*apigatewayv2.IntegrationResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apigatewayv2.IntegrationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllApiIntegrations provides a mock function with given fields: _a0
func (_m *MockApiGatewayV2Repository) ListAllApiIntegrations(_a0 string) ([]*apigatewayv2.Integration, error) {
	ret := _m.Called(_a0)

	var r0 []*apigatewayv2.Integration
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*apigatewayv2.Integration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []*apigatewayv2.Integration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apigatewayv2.Integration)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllApiMappings provides a mock function with given fields: _a0
func (_m *MockApiGatewayV2Repository) ListAllApiMappings(_a0 string) ([]*apigatewayv2.ApiMapping, error) {
	ret := _m.Called(_a0)

	var r0 []*apigatewayv2.ApiMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*apigatewayv2.ApiMapping, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []*apigatewayv2.ApiMapping); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apigatewayv2.ApiMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllApiModels provides a mock function with given fields: _a0
func (_m *MockApiGatewayV2Repository) ListAllApiModels(_a0 string) ([]*apigatewayv2.Model, error) {
	ret := _m.Called(_a0)

	var r0 []*apigatewayv2.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*apigatewayv2.Model, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []*apigatewayv2.Model); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apigatewayv2.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllApiRouteResponses provides a mock function with given fields: _a0, _a1
func (_m *MockApiGatewayV2Repository) ListAllApiRouteResponses(_a0 string, _a1 string) ([]*apigatewayv2.RouteResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*apigatewayv2.RouteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]*apigatewayv2.RouteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) []*apigatewayv2.RouteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apigatewayv2.RouteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllApiRoutes provides a mock function with given fields: apiId
func (_m *MockApiGatewayV2Repository) ListAllApiRoutes(apiId *string) ([]*apigatewayv2.Route, error) {
	ret := _m.Called(apiId)

	var r0 []*apigatewayv2.Route
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) ([]*apigatewayv2.Route, error)); ok {
		return rf(apiId)
	}
	if rf, ok := ret.Get(0).(func(*string) []*apigatewayv2.Route); ok {
		r0 = rf(apiId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apigatewayv2.Route)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(apiId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllApiStages provides a mock function with given fields: _a0
func (_m *MockApiGatewayV2Repository) ListAllApiStages(_a0 string) ([]*apigatewayv2.Stage, error) {
	ret := _m.Called(_a0)

	var r0 []*apigatewayv2.Stage
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*apigatewayv2.Stage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []*apigatewayv2.Stage); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apigatewayv2.Stage)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllApis provides a mock function with given fields:
func (_m *MockApiGatewayV2Repository) ListAllApis() ([]*apigatewayv2.Api, error) {
	ret := _m.Called()

	var r0 []*apigatewayv2.Api
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*apigatewayv2.Api, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*apigatewayv2.Api); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apigatewayv2.Api)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllVpcLinks provides a mock function with given fields:
func (_m *MockApiGatewayV2Repository) ListAllVpcLinks() ([]*apigatewayv2.VpcLink, error) {
	ret := _m.Called()

	var r0 []*apigatewayv2.VpcLink
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*apigatewayv2.VpcLink, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*apigatewayv2.VpcLink); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apigatewayv2.VpcLink)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockApiGatewayV2Repository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockApiGatewayV2Repository creates a new instance of MockApiGatewayV2Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockApiGatewayV2Repository(t mockConstructorTestingTNewMockApiGatewayV2Repository) *MockApiGatewayV2Repository {
	mock := &MockApiGatewayV2Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
