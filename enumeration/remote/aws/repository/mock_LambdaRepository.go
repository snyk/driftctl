// Code generated by mockery v2.28.1. DO NOT EDIT.

package repository

import (
	lambda "github.com/aws/aws-sdk-go/service/lambda"
	mock "github.com/stretchr/testify/mock"
)

// MockLambdaRepository is an autogenerated mock type for the LambdaRepository type
type MockLambdaRepository struct {
	mock.Mock
}

// ListAllLambdaEventSourceMappings provides a mock function with given fields:
func (_m *MockLambdaRepository) ListAllLambdaEventSourceMappings() ([]*lambda.EventSourceMappingConfiguration, error) {
	ret := _m.Called()

	var r0 []*lambda.EventSourceMappingConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*lambda.EventSourceMappingConfiguration, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*lambda.EventSourceMappingConfiguration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*lambda.EventSourceMappingConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllLambdaFunctions provides a mock function with given fields:
func (_m *MockLambdaRepository) ListAllLambdaFunctions() ([]*lambda.FunctionConfiguration, error) {
	ret := _m.Called()

	var r0 []*lambda.FunctionConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*lambda.FunctionConfiguration, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*lambda.FunctionConfiguration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*lambda.FunctionConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockLambdaRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockLambdaRepository creates a new instance of MockLambdaRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockLambdaRepository(t mockConstructorTestingTNewMockLambdaRepository) *MockLambdaRepository {
	mock := &MockLambdaRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
